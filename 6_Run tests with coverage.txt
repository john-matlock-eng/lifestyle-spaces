2025-08-30T14:15:52.6440681Z ##[group]Run if [ -f requirements.txt ] && [ -d tests ]; then
2025-08-30T14:15:52.6441136Z [36;1mif [ -f requirements.txt ] && [ -d tests ]; then[0m
2025-08-30T14:15:52.6441525Z [36;1m  pytest --cov=app --cov-report=term-missing --cov-fail-under=100[0m
2025-08-30T14:15:52.6441861Z [36;1melse[0m
2025-08-30T14:15:52.6442326Z [36;1m  echo "⚠️ Tests need to be configured"[0m
2025-08-30T14:15:52.6442591Z [36;1mfi[0m
2025-08-30T14:15:52.6473329Z shell: /usr/bin/bash -e {0}
2025-08-30T14:15:52.6473559Z env:
2025-08-30T14:15:52.6473802Z   pythonLocation: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-30T14:15:52.6474210Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib/pkgconfig
2025-08-30T14:15:52.6474613Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-30T14:15:52.6474956Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-30T14:15:52.6475297Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-30T14:15:52.6475639Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib
2025-08-30T14:15:52.6475965Z ##[endgroup]
2025-08-30T14:15:57.5332911Z ============================= test session starts ==============================
2025-08-30T14:15:57.5333780Z platform linux -- Python 3.11.13, pytest-7.4.3, pluggy-1.6.0
2025-08-30T14:15:57.5334438Z rootdir: /home/runner/work/lifestyle-spaces/lifestyle-spaces/backend
2025-08-30T14:15:57.5334912Z configfile: pytest.ini
2025-08-30T14:15:57.5335281Z plugins: anyio-4.10.0, cov-4.1.0, asyncio-0.21.1, Faker-20.1.0
2025-08-30T14:15:57.5335702Z asyncio: mode=Mode.STRICT
2025-08-30T14:15:57.5335974Z collected 474 items
2025-08-30T14:15:57.5336127Z 
2025-08-30T14:15:57.6571076Z test_lambda_integration.py ...                                           [  0%]
2025-08-30T14:15:57.6636703Z test_placeholder.py ....                                                 [  1%]
2025-08-30T14:15:57.6730387Z test_server.py ..                                                        [  1%]
2025-08-30T14:15:57.6831847Z tests/test_config.py ....                                                [  2%]
2025-08-30T14:15:57.7497378Z tests/test_space_service.py ..................                           [  6%]
2025-08-30T14:15:58.4621720Z tests/test_spaces.py .................s........sss.......s.....          [ 15%]
2025-08-30T14:15:58.6838083Z tests/test_user_profile.py .................................             [ 22%]
2025-08-30T14:15:59.0828403Z tests/integration/test_api_integration.py ....                           [ 23%]
2025-08-30T14:15:59.7408338Z tests/unit/test_absolute_final_coverage.py FFFFFFFFFFFFFF.FFF            [ 27%]
2025-08-30T14:15:59.8084812Z tests/unit/test_auth_routes.py ............                              [ 29%]
2025-08-30T14:15:59.8262719Z tests/unit/test_cognito_coverage.py ......                               [ 30%]
2025-08-30T14:15:59.8863386Z tests/unit/test_cognito_service_methods.py .....................         [ 35%]
2025-08-30T14:15:59.9050934Z tests/unit/test_cognito_uncovered.py ........                            [ 36%]
2025-08-30T14:15:59.9120648Z tests/unit/test_config.py .....                                          [ 37%]
2025-08-30T14:16:00.0463425Z tests/unit/test_config_100.py ...F...FFF..                               [ 40%]
2025-08-30T14:16:00.1646075Z tests/unit/test_coverage_edge_cases.py ..                                [ 40%]
2025-08-30T14:16:00.3164857Z tests/unit/test_coverage_final_24_lines.py FF.FFF....FFFFF               [ 44%]
2025-08-30T14:16:00.6861118Z tests/unit/test_coverage_final_29_lines.py FF.FFFFF......FFFF            [ 47%]
2025-08-30T14:16:00.7776893Z tests/unit/test_database.py ..                                           [ 48%]
2025-08-30T14:16:01.0557199Z tests/unit/test_database_client.py ...                                   [ 48%]
2025-08-30T14:16:01.1000145Z tests/unit/test_database_coverage.py .................                   [ 52%]
2025-08-30T14:16:01.4964093Z tests/unit/test_final_100_coverage.py FFFFFFF.FFF.FFF                    [ 55%]
2025-08-30T14:16:01.6421667Z tests/unit/test_final_20_lines_coverage.py ........FF...F                [ 58%]
2025-08-30T14:16:01.6998243Z tests/unit/test_final_coverage.py .......                                [ 60%]
2025-08-30T14:16:01.7168793Z tests/unit/test_health.py ...                                            [ 60%]
2025-08-30T14:16:01.7829223Z tests/unit/test_invitation_routes.py ...........                         [ 63%]
2025-08-30T14:16:01.7908362Z tests/unit/test_lambda_handler.py .....                                  [ 64%]
2025-08-30T14:16:01.7978580Z tests/unit/test_main.py .....                                            [ 65%]
2025-08-30T14:16:01.8465266Z tests/unit/test_minor_coverage_100.py FFF...FFF                          [ 67%]
2025-08-30T14:16:01.8885996Z tests/unit/test_models.py ..............................                 [ 73%]
2025-08-30T14:16:01.8965327Z tests/unit/test_security.py .....                                        [ 74%]
2025-08-30T14:16:03.2657004Z tests/unit/test_security_additional.py ....                              [ 75%]
2025-08-30T14:16:05.7564859Z tests/unit/test_services.py sssssssss...................                 [ 81%]
2025-08-30T14:16:08.0605040Z tests/unit/test_services_coverage.py .............                       [ 83%]
2025-08-30T14:16:08.2959792Z tests/unit/test_space_service_100.py ..FFFFF...F                         [ 86%]
2025-08-30T14:16:11.3838989Z tests/unit/test_space_service_coverage.py ............                   [ 88%]
2025-08-30T14:16:11.4720130Z tests/unit/test_spaces_routes.py ................                        [ 92%]
2025-08-30T14:16:11.9469055Z tests/unit/test_user_profile_routes_100.py FFFFFFFFFF                    [ 94%]
2025-08-30T14:16:12.0052956Z tests/unit/test_user_profile_service.py ...................              [ 98%]
2025-08-30T14:16:12.1930312Z tests/unit/test_users_routes.py ........                                 [100%]
2025-08-30T14:16:12.1931088Z 
2025-08-30T14:16:12.1931320Z =================================== FAILURES ===================================
2025-08-30T14:16:12.1932535Z ________ TestAbsoluteFinalCoverage.test_spaces_create_validation_error _________
2025-08-30T14:16:12.1933205Z 
2025-08-30T14:16:12.1933800Z self = <tests.unit.test_absolute_final_coverage.TestAbsoluteFinalCoverage object at 0x7fdf3680f610>
2025-08-30T14:16:12.1934955Z client = <starlette.testclient.TestClient object at 0x7fdf34274910>
2025-08-30T14:16:12.1935738Z mock_current_user = {'email': 'test@example.com', 'user_id': 'test-user-123', 'username': 'testuser'}
2025-08-30T14:16:12.1936195Z 
2025-08-30T14:16:12.1936465Z     def test_spaces_create_validation_error(self, client, mock_current_user):
2025-08-30T14:16:12.1937037Z         """Test spaces create with ValidationError - Line 53."""
2025-08-30T14:16:12.1937524Z         from app.services.exceptions import ValidationError
2025-08-30T14:16:12.1937912Z     
2025-08-30T14:16:12.1938357Z         with patch('app.api.routes.spaces.get_current_user', return_value=mock_current_user):
2025-08-30T14:16:12.1939175Z             with patch('app.api.routes.spaces.SpaceService') as mock_service:
2025-08-30T14:16:12.1939724Z                 mock_service.return_value.create_space.side_effect = ValidationError("Name required")
2025-08-30T14:16:12.1940163Z     
2025-08-30T14:16:12.1940497Z                 response = client.post("/api/spaces", json={"name": "Test", "description": "Test"})
2025-08-30T14:16:12.1940950Z >               assert response.status_code == 422
2025-08-30T14:16:12.1941241Z E               assert 401 == 422
2025-08-30T14:16:12.1941545Z E                +  where 401 = <Response [401 Unauthorized]>.status_code
2025-08-30T14:16:12.1941791Z 
2025-08-30T14:16:12.1941963Z tests/unit/test_absolute_final_coverage.py:40: AssertionError
2025-08-30T14:16:12.1942616Z ------------------------------ Captured log call -------------------------------
2025-08-30T14:16:12.1943198Z INFO     httpx:_client.py:1013 HTTP Request: POST http://testserver/api/spaces "HTTP/1.1 401 Unauthorized"
2025-08-30T14:16:12.1944016Z _______ TestAbsoluteFinalCoverage.test_spaces_create_other_client_error ________
2025-08-30T14:16:12.1944369Z 
2025-08-30T14:16:12.1944672Z self = <tests.unit.test_absolute_final_coverage.TestAbsoluteFinalCoverage object at 0x7fdf3680f6d0>
2025-08-30T14:16:12.1945572Z client = <starlette.testclient.TestClient object at 0x7fdf2fe568d0>
2025-08-30T14:16:12.1946458Z mock_current_user = {'email': 'test@example.com', 'user_id': 'test-user-123', 'username': 'testuser'}
2025-08-30T14:16:12.1947033Z 
2025-08-30T14:16:12.1947377Z     def test_spaces_create_other_client_error(self, client, mock_current_user):
2025-08-30T14:16:12.1948088Z         """Test spaces create with other ClientError - Line 63."""
2025-08-30T14:16:12.1948865Z         with patch('app.api.routes.spaces.get_current_user', return_value=mock_current_user):
2025-08-30T14:16:12.1949685Z             with patch('app.api.routes.spaces.SpaceService') as mock_service:
2025-08-30T14:16:12.1950253Z                 error = ClientError(
2025-08-30T14:16:12.1950743Z                     error_response={'Error': {'Code': 'OtherError'}},
2025-08-30T14:16:12.1951086Z                     operation_name='PutItem'
2025-08-30T14:16:12.1951317Z                 )
2025-08-30T14:16:12.1951570Z                 mock_service.return_value.create_space.side_effect = error
2025-08-30T14:16:12.1951868Z     
2025-08-30T14:16:12.1952436Z                 response = client.post("/api/spaces", json={"name": "Test", "description": "Test"})
2025-08-30T14:16:12.1952831Z >               assert response.status_code == 500
2025-08-30T14:16:12.1953091Z E               assert 401 == 500
2025-08-30T14:16:12.1953366Z E                +  where 401 = <Response [401 Unauthorized]>.status_code
2025-08-30T14:16:12.1953577Z 
2025-08-30T14:16:12.1953733Z tests/unit/test_absolute_final_coverage.py:54: AssertionError
2025-08-30T14:16:12.1954117Z ------------------------------ Captured log call -------------------------------
2025-08-30T14:16:12.1954613Z INFO     httpx:_client.py:1013 HTTP Request: POST http://testserver/api/spaces "HTTP/1.1 401 Unauthorized"
2025-08-30T14:16:12.1955179Z _____ TestAbsoluteFinalCoverage.test_profile_get_cognito_exception_ignored _____
2025-08-30T14:16:12.1955476Z 
2025-08-30T14:16:12.1955738Z self = <tests.unit.test_absolute_final_coverage.TestAbsoluteFinalCoverage object at 0x7fdf3680ff10>
2025-08-30T14:16:12.1956258Z client = <starlette.testclient.TestClient object at 0x7fdf2fe4b190>
2025-08-30T14:16:12.1956735Z mock_current_user = {'email': 'test@example.com', 'user_id': 'test-user-123', 'username': 'testuser'}
2025-08-30T14:16:12.1957050Z 
2025-08-30T14:16:12.1957255Z     def test_profile_get_cognito_exception_ignored(self, client, mock_current_user):
2025-08-30T14:16:12.1957685Z         """Test profile GET ignores Cognito exceptions - Lines 63-65."""
2025-08-30T14:16:12.1958145Z         with patch('app.api.routes.user_profile.get_current_user', return_value=mock_current_user):
2025-08-30T14:16:12.1958660Z             with patch('app.api.routes.user_profile.UserProfileService') as mock_service:
2025-08-30T14:16:12.1959272Z                 mock_service.return_value.get_user_profile.return_value = {
2025-08-30T14:16:12.1959690Z                     "user_id": "test-user-123",
2025-08-30T14:16:12.1960205Z                     "email": "test@example.com",
2025-08-30T14:16:12.1960641Z                     "username": "testuser",
2025-08-30T14:16:12.1961044Z                     "display_name": None,
2025-08-30T14:16:12.1961371Z                     "bio": None,
2025-08-30T14:16:12.1961601Z                     "avatar_url": None,
2025-08-30T14:16:12.1961834Z                     "phone_number": None,
2025-08-30T14:16:12.1962242Z                     "location": None,
2025-08-30T14:16:12.1962476Z                     "is_verified": False,
2025-08-30T14:16:12.1962710Z                     "is_onboarded": False,
2025-08-30T14:16:12.1962960Z                     "created_at": "2024-01-01T00:00:00Z",
2025-08-30T14:16:12.1963227Z                     "updated_at": "2024-01-01T00:00:00Z"
2025-08-30T14:16:12.1963636Z                 }
2025-08-30T14:16:12.1963798Z     
2025-08-30T14:16:12.1964069Z                 with patch('app.api.routes.user_profile.CognitoService') as mock_cognito:
2025-08-30T14:16:12.1964564Z                     mock_cognito.return_value.get_user_attributes.side_effect = Exception("Cognito down")
2025-08-30T14:16:12.1964934Z     
2025-08-30T14:16:12.1965116Z                     response = client.get("/api/profile")
2025-08-30T14:16:12.1965396Z >                   assert response.status_code == 200
2025-08-30T14:16:12.1965653Z E                   assert 404 == 200
2025-08-30T14:16:12.1965920Z E                    +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.1966133Z 
2025-08-30T14:16:12.1966287Z tests/unit/test_absolute_final_coverage.py:80: AssertionError
2025-08-30T14:16:12.1966671Z ------------------------------ Captured log call -------------------------------
2025-08-30T14:16:12.1967150Z INFO     httpx:_client.py:1013 HTTP Request: GET http://testserver/api/profile "HTTP/1.1 404 Not Found"
2025-08-30T14:16:12.1967685Z ________ TestAbsoluteFinalCoverage.test_profile_get_other_client_error _________
2025-08-30T14:16:12.1967977Z 
2025-08-30T14:16:12.1968240Z self = <tests.unit.test_absolute_final_coverage.TestAbsoluteFinalCoverage object at 0x7fdf3680e850>
2025-08-30T14:16:12.1968764Z client = <starlette.testclient.TestClient object at 0x7fdf2fffe890>
2025-08-30T14:16:12.1969232Z mock_current_user = {'email': 'test@example.com', 'user_id': 'test-user-123', 'username': 'testuser'}
2025-08-30T14:16:12.1969547Z 
2025-08-30T14:16:12.1969782Z     def test_profile_get_other_client_error(self, client, mock_current_user):
2025-08-30T14:16:12.1970503Z         """Test profile GET with non-ResourceNotFound ClientError - Line 75."""
2025-08-30T14:16:12.1970988Z         with patch('app.api.routes.user_profile.get_current_user', return_value=mock_current_user):
2025-08-30T14:16:12.1971495Z             with patch('app.api.routes.user_profile.UserProfileService') as mock_service:
2025-08-30T14:16:12.1971873Z                 error = ClientError(
2025-08-30T14:16:12.1972399Z                     error_response={'Error': {'Code': 'OtherError'}},
2025-08-30T14:16:12.1972711Z                     operation_name='GetItem'
2025-08-30T14:16:12.1972937Z                 )
2025-08-30T14:16:12.1973202Z                 mock_service.return_value.get_user_profile.side_effect = error
2025-08-30T14:16:12.1973504Z     
2025-08-30T14:16:12.1973686Z                 response = client.get("/api/profile")
2025-08-30T14:16:12.1973960Z >               assert response.status_code == 500
2025-08-30T14:16:12.1974216Z E               assert 404 == 500
2025-08-30T14:16:12.1974479Z E                +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.1974700Z 
2025-08-30T14:16:12.1974854Z tests/unit/test_absolute_final_coverage.py:94: AssertionError
2025-08-30T14:16:12.1975236Z ------------------------------ Captured log call -------------------------------
2025-08-30T14:16:12.1975713Z INFO     httpx:_client.py:1013 HTTP Request: GET http://testserver/api/profile "HTTP/1.1 404 Not Found"
2025-08-30T14:16:12.1976399Z _________ TestAbsoluteFinalCoverage.test_profile_get_generic_exception _________
2025-08-30T14:16:12.1976693Z 
2025-08-30T14:16:12.1976954Z self = <tests.unit.test_absolute_final_coverage.TestAbsoluteFinalCoverage object at 0x7fdf3680dc10>
2025-08-30T14:16:12.1977473Z client = <starlette.testclient.TestClient object at 0x7fdf36e877d0>
2025-08-30T14:16:12.1977942Z mock_current_user = {'email': 'test@example.com', 'user_id': 'test-user-123', 'username': 'testuser'}
2025-08-30T14:16:12.1978252Z 
2025-08-30T14:16:12.1978433Z     def test_profile_get_generic_exception(self, client, mock_current_user):
2025-08-30T14:16:12.1978832Z         """Test profile GET with generic exception - Lines 81-83."""
2025-08-30T14:16:12.1979285Z         with patch('app.api.routes.user_profile.get_current_user', return_value=mock_current_user):
2025-08-30T14:16:12.1979798Z             with patch('app.api.routes.user_profile.UserProfileService') as mock_service:
2025-08-30T14:16:12.1980394Z                 mock_service.return_value.get_user_profile.side_effect = RuntimeError("DB down")
2025-08-30T14:16:12.1980745Z     
2025-08-30T14:16:12.1980931Z                 response = client.get("/api/profile")
2025-08-30T14:16:12.1981202Z >               assert response.status_code == 500
2025-08-30T14:16:12.1981457Z E               assert 404 == 500
2025-08-30T14:16:12.1981717Z E                +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.1981980Z 
2025-08-30T14:16:12.1982413Z tests/unit/test_absolute_final_coverage.py:104: AssertionError
2025-08-30T14:16:12.1983068Z ------------------------------ Captured log call -------------------------------
2025-08-30T14:16:12.1983820Z INFO     httpx:_client.py:1013 HTTP Request: GET http://testserver/api/profile "HTTP/1.1 404 Not Found"
2025-08-30T14:16:12.1984364Z ____ TestAbsoluteFinalCoverage.test_profile_update_cognito_exception_raised ____
2025-08-30T14:16:12.1984673Z 
2025-08-30T14:16:12.1984940Z self = <tests.unit.test_absolute_final_coverage.TestAbsoluteFinalCoverage object at 0x7fdf3680e710>
2025-08-30T14:16:12.1985448Z client = <starlette.testclient.TestClient object at 0x7fdf3427ebd0>
2025-08-30T14:16:12.1985917Z mock_current_user = {'email': 'test@example.com', 'user_id': 'test-user-123', 'username': 'testuser'}
2025-08-30T14:16:12.1986226Z 
2025-08-30T14:16:12.1986439Z     def test_profile_update_cognito_exception_raised(self, client, mock_current_user):
2025-08-30T14:16:12.1986886Z         """Test profile update Cognito exception is raised - Line 132."""
2025-08-30T14:16:12.1987343Z         with patch('app.api.routes.user_profile.get_current_user', return_value=mock_current_user):
2025-08-30T14:16:12.1987927Z             with patch('app.api.routes.user_profile.CognitoService') as mock_cognito:
2025-08-30T14:16:12.1988441Z                 mock_cognito.return_value.update_user_attributes.side_effect = RuntimeError("Cognito error")
2025-08-30T14:16:12.1988847Z     
2025-08-30T14:16:12.1989109Z                 response = client.put("/api/profile", json={"email": "new@example.com"})
2025-08-30T14:16:12.1989472Z >               assert response.status_code == 500
2025-08-30T14:16:12.1989728Z E               assert 404 == 500
2025-08-30T14:16:12.1989984Z E                +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.1990188Z 
2025-08-30T14:16:12.1990461Z tests/unit/test_absolute_final_coverage.py:114: AssertionError
2025-08-30T14:16:12.1991147Z ------------------------------ Captured log call -------------------------------
2025-08-30T14:16:12.1991833Z INFO     httpx:_client.py:1013 HTTP Request: PUT http://testserver/api/profile "HTTP/1.1 404 Not Found"
2025-08-30T14:16:12.1992640Z _______ TestAbsoluteFinalCoverage.test_profile_update_fallback_exception _______
2025-08-30T14:16:12.1992939Z 
2025-08-30T14:16:12.1993198Z self = <tests.unit.test_absolute_final_coverage.TestAbsoluteFinalCoverage object at 0x7fdf3680ee50>
2025-08-30T14:16:12.1993883Z client = <starlette.testclient.TestClient object at 0x7fdf36e8cb50>
2025-08-30T14:16:12.1994356Z mock_current_user = {'email': 'test@example.com', 'user_id': 'test-user-123', 'username': 'testuser'}
2025-08-30T14:16:12.1994669Z 
2025-08-30T14:16:12.1994856Z     def test_profile_update_fallback_exception(self, client, mock_current_user):
2025-08-30T14:16:12.1995292Z         """Test profile update fallback exception - Lines 171-173."""
2025-08-30T14:16:12.1995740Z         with patch('app.api.routes.user_profile.get_current_user', return_value=mock_current_user):
2025-08-30T14:16:12.1996229Z             with patch('app.api.routes.user_profile.CognitoService') as mock_cognito:
2025-08-30T14:16:12.1996735Z                 mock_cognito.return_value.update_user_attributes.side_effect = Exception("Cognito fail")
2025-08-30T14:16:12.1997119Z     
2025-08-30T14:16:12.1997407Z                 with patch('app.api.routes.user_profile.UserProfileService') as mock_service:
2025-08-30T14:16:12.1997893Z                     mock_service.return_value.update_user_profile.side_effect = Exception("DB fail")
2025-08-30T14:16:12.1998369Z     
2025-08-30T14:16:12.1998626Z                     response = client.put("/api/profile", json={"display_name": "Test"})
2025-08-30T14:16:12.1998985Z >                   assert response.status_code == 500
2025-08-30T14:16:12.1999242Z E                   assert 404 == 500
2025-08-30T14:16:12.1999519Z E                    +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.1999721Z 
2025-08-30T14:16:12.1999883Z tests/unit/test_absolute_final_coverage.py:127: AssertionError
2025-08-30T14:16:12.2000256Z ------------------------------ Captured log call -------------------------------
2025-08-30T14:16:12.2001011Z INFO     httpx:_client.py:1013 HTTP Request: PUT http://testserver/api/profile "HTTP/1.1 404 Not Found"
2025-08-30T14:16:12.2001947Z _______ TestAbsoluteFinalCoverage.test_profile_update_generic_exception ________
2025-08-30T14:16:12.2002432Z 
2025-08-30T14:16:12.2002718Z self = <tests.unit.test_absolute_final_coverage.TestAbsoluteFinalCoverage object at 0x7fdf3680c890>
2025-08-30T14:16:12.2003233Z client = <starlette.testclient.TestClient object at 0x7fdf36e7e390>
2025-08-30T14:16:12.2003708Z mock_current_user = {'email': 'test@example.com', 'user_id': 'test-user-123', 'username': 'testuser'}
2025-08-30T14:16:12.2004021Z 
2025-08-30T14:16:12.2004204Z     def test_profile_update_generic_exception(self, client, mock_current_user):
2025-08-30T14:16:12.2004614Z         """Test profile update generic exception - Lines 179-181."""
2025-08-30T14:16:12.2005054Z         with patch('app.api.routes.user_profile.get_current_user', return_value=mock_current_user):
2025-08-30T14:16:12.2005633Z             with patch('app.api.routes.user_profile.UserProfileUpdate', side_effect=Exception("Parse error")):
2025-08-30T14:16:12.2006159Z                 response = client.put("/api/profile", json={"display_name": "Test"})
2025-08-30T14:16:12.2006514Z >               assert response.status_code == 500
2025-08-30T14:16:12.2006772Z E               assert 404 == 500
2025-08-30T14:16:12.2007035Z E                +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.2007233Z 
2025-08-30T14:16:12.2007392Z tests/unit/test_absolute_final_coverage.py:135: AssertionError
2025-08-30T14:16:12.2007765Z ------------------------------ Captured log call -------------------------------
2025-08-30T14:16:12.2008235Z INFO     httpx:_client.py:1013 HTTP Request: PUT http://testserver/api/profile "HTTP/1.1 404 Not Found"
2025-08-30T14:16:12.2008762Z _________ TestAbsoluteFinalCoverage.test_onboarding_complete_fallback __________
2025-08-30T14:16:12.2009046Z 
2025-08-30T14:16:12.2009311Z self = <tests.unit.test_absolute_final_coverage.TestAbsoluteFinalCoverage object at 0x7fdf3680c450>
2025-08-30T14:16:12.2009820Z client = <starlette.testclient.TestClient object at 0x7fdf36e7d3d0>
2025-08-30T14:16:12.2010290Z mock_current_user = {'email': 'test@example.com', 'user_id': 'test-user-123', 'username': 'testuser'}
2025-08-30T14:16:12.2010752Z 
2025-08-30T14:16:12.2010927Z     def test_onboarding_complete_fallback(self, client, mock_current_user):
2025-08-30T14:16:12.2011570Z         """Test onboarding complete fallback - Line 246."""
2025-08-30T14:16:12.2012438Z         with patch('app.api.routes.user_profile.get_current_user', return_value=mock_current_user):
2025-08-30T14:16:12.2013115Z             with patch('app.api.routes.user_profile.CognitoService') as mock_cognito:
2025-08-30T14:16:12.2013601Z                 mock_cognito.return_value.update_user_attributes.side_effect = Exception("Fail")
2025-08-30T14:16:12.2013957Z     
2025-08-30T14:16:12.2014235Z                 with patch('app.api.routes.user_profile.UserProfileService') as mock_service:
2025-08-30T14:16:12.2014724Z                     mock_service.return_value.complete_onboarding.side_effect = Exception("Fail")
2025-08-30T14:16:12.2015072Z     
2025-08-30T14:16:12.2015363Z                     response = client.post("/api/onboarding/complete", json={"display_name": "Test"})
2025-08-30T14:16:12.2015913Z >                   assert response.status_code == 500
2025-08-30T14:16:12.2016176Z E                   assert 404 == 500
2025-08-30T14:16:12.2016445Z E                    +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.2016656Z 
2025-08-30T14:16:12.2016809Z tests/unit/test_absolute_final_coverage.py:148: AssertionError
2025-08-30T14:16:12.2017188Z ------------------------------ Captured log call -------------------------------
2025-08-30T14:16:12.2017713Z INFO     httpx:_client.py:1013 HTTP Request: POST http://testserver/api/onboarding/complete "HTTP/1.1 404 Not Found"
2025-08-30T14:16:12.2018290Z _____ TestAbsoluteFinalCoverage.test_onboarding_complete_generic_exception _____
2025-08-30T14:16:12.2018593Z 
2025-08-30T14:16:12.2018852Z self = <tests.unit.test_absolute_final_coverage.TestAbsoluteFinalCoverage object at 0x7fdf3680c750>
2025-08-30T14:16:12.2019373Z client = <starlette.testclient.TestClient object at 0x7fdf36cc4e10>
2025-08-30T14:16:12.2019853Z mock_current_user = {'email': 'test@example.com', 'user_id': 'test-user-123', 'username': 'testuser'}
2025-08-30T14:16:12.2020165Z 
2025-08-30T14:16:12.2020367Z     def test_onboarding_complete_generic_exception(self, client, mock_current_user):
2025-08-30T14:16:12.2020810Z         """Test onboarding complete generic exception - Lines 252-254."""
2025-08-30T14:16:12.2021277Z         with patch('app.api.routes.user_profile.get_current_user', return_value=mock_current_user):
2025-08-30T14:16:12.2021840Z >           with patch('app.api.routes.user_profile.OnboardingData', side_effect=Exception("Parse error")):
2025-08-30T14:16:12.2022399Z 
2025-08-30T14:16:12.2022521Z tests/unit/test_absolute_final_coverage.py:154: 
2025-08-30T14:16:12.2022821Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T14:16:12.2023255Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1446: in __enter__
2025-08-30T14:16:12.2023673Z     original, local = self.get_original()
2025-08-30T14:16:12.2023944Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T14:16:12.2024137Z 
2025-08-30T14:16:12.2024260Z self = <unittest.mock._patch object at 0x7fdf2fe21f10>
2025-08-30T14:16:12.2024478Z 
2025-08-30T14:16:12.2024567Z     def get_original(self):
2025-08-30T14:16:12.2024785Z         target = self.getter()
2025-08-30T14:16:12.2024997Z         name = self.attribute
2025-08-30T14:16:12.2025197Z     
2025-08-30T14:16:12.2025357Z         original = DEFAULT
2025-08-30T14:16:12.2025551Z         local = False
2025-08-30T14:16:12.2025727Z     
2025-08-30T14:16:12.2025880Z         try:
2025-08-30T14:16:12.2026061Z             original = target.__dict__[name]
2025-08-30T14:16:12.2026327Z         except (AttributeError, KeyError):
2025-08-30T14:16:12.2026597Z             original = getattr(target, name, DEFAULT)
2025-08-30T14:16:12.2026913Z         else:
2025-08-30T14:16:12.2027219Z             local = True
2025-08-30T14:16:12.2027675Z     
2025-08-30T14:16:12.2027897Z         if name in _builtins and isinstance(target, ModuleType):
2025-08-30T14:16:12.2028195Z             self.create = True
2025-08-30T14:16:12.2028405Z     
2025-08-30T14:16:12.2028590Z         if not self.create and original is DEFAULT:
2025-08-30T14:16:12.2028865Z >           raise AttributeError(
2025-08-30T14:16:12.2029143Z                 "%s does not have the attribute %r" % (target, name)
2025-08-30T14:16:12.2029409Z             )
2025-08-30T14:16:12.2030128Z E           AttributeError: <module 'app.api.routes.user_profile' from '/home/runner/work/lifestyle-spaces/lifestyle-spaces/backend/app/api/routes/user_profile.py'> does not have the attribute 'OnboardingData'
2025-08-30T14:16:12.2030836Z 
2025-08-30T14:16:12.2031088Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1419: AttributeError
2025-08-30T14:16:12.2031626Z ________ TestAbsoluteFinalCoverage.test_users_spaces_other_client_error ________
2025-08-30T14:16:12.2032156Z 
2025-08-30T14:16:12.2032437Z self = <tests.unit.test_absolute_final_coverage.TestAbsoluteFinalCoverage object at 0x7fdf3680d510>
2025-08-30T14:16:12.2032956Z client = <starlette.testclient.TestClient object at 0x7fdf371b28d0>
2025-08-30T14:16:12.2033434Z mock_current_user = {'email': 'test@example.com', 'user_id': 'test-user-123', 'username': 'testuser'}
2025-08-30T14:16:12.2033758Z 
2025-08-30T14:16:12.2034070Z     def test_users_spaces_other_client_error(self, client, mock_current_user):
2025-08-30T14:16:12.2034669Z         """Test users spaces with other ClientError - Line 110."""
2025-08-30T14:16:12.2035101Z         with patch('app.api.routes.users.get_current_user', return_value=mock_current_user):
2025-08-30T14:16:12.2035571Z             with patch('app.api.routes.users.SpaceService') as mock_service:
2025-08-30T14:16:12.2035909Z                 error = ClientError(
2025-08-30T14:16:12.2036180Z                     error_response={'Error': {'Code': 'OtherError'}},
2025-08-30T14:16:12.2036472Z                     operation_name='Query'
2025-08-30T14:16:12.2036716Z                 )
2025-08-30T14:16:12.2036978Z                 mock_service.return_value.list_user_spaces.side_effect = error
2025-08-30T14:16:12.2037275Z     
2025-08-30T14:16:12.2037483Z                 response = client.get("/api/users/me/spaces")
2025-08-30T14:16:12.2037773Z >               assert response.status_code == 500
2025-08-30T14:16:12.2038022Z E               assert 404 == 500
2025-08-30T14:16:12.2038284Z E                +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.2038491Z 
2025-08-30T14:16:12.2038649Z tests/unit/test_absolute_final_coverage.py:170: AssertionError
2025-08-30T14:16:12.2039030Z ------------------------------ Captured log call -------------------------------
2025-08-30T14:16:12.2039540Z INFO     httpx:_client.py:1013 HTTP Request: GET http://testserver/api/users/me/spaces "HTTP/1.1 404 Not Found"
2025-08-30T14:16:12.2040104Z ________ TestAbsoluteFinalCoverage.test_config_parse_cors_json_non_list ________
2025-08-30T14:16:12.2040403Z 
2025-08-30T14:16:12.2040674Z self = <tests.unit.test_absolute_final_coverage.TestAbsoluteFinalCoverage object at 0x7fdf3697c410>
2025-08-30T14:16:12.2041025Z 
2025-08-30T14:16:12.2041136Z     def test_config_parse_cors_json_non_list(self):
2025-08-30T14:16:12.2041438Z         """Test parse_cors with JSON non-list - Line 34."""
2025-08-30T14:16:12.2041739Z         from app.core.config import parse_cors
2025-08-30T14:16:12.2041979Z     
2025-08-30T14:16:12.2042317Z         result = parse_cors('"single_value"')
2025-08-30T14:16:12.2042775Z >       assert result == ["single_value"]
2025-08-30T14:16:12.2043082Z E       assert ['"single_value"'] == ['single_value']
2025-08-30T14:16:12.2043375Z E         At index 0 diff: '"single_value"' != 'single_value'
2025-08-30T14:16:12.2043645Z E         Full diff:
2025-08-30T14:16:12.2043840Z E         - ['single_value']
2025-08-30T14:16:12.2044053Z E         + ['"single_value"']
2025-08-30T14:16:12.2044253Z E         ?   +            +
2025-08-30T14:16:12.2044538Z 
2025-08-30T14:16:12.2044689Z tests/unit/test_absolute_final_coverage.py:178: AssertionError
2025-08-30T14:16:12.2045139Z _____ TestAbsoluteFinalCoverage.test_config_cors_origins_default_non_test ______
2025-08-30T14:16:12.2045431Z 
2025-08-30T14:16:12.2045690Z self = <tests.unit.test_absolute_final_coverage.TestAbsoluteFinalCoverage object at 0x7fdf3697df50>
2025-08-30T14:16:12.2046046Z 
2025-08-30T14:16:12.2046168Z     def test_config_cors_origins_default_non_test(self):
2025-08-30T14:16:12.2046521Z         """Test config CORS origins default non-test - Lines 106-109."""
2025-08-30T14:16:12.2046848Z         from app.core.config import Settings
2025-08-30T14:16:12.2047079Z     
2025-08-30T14:16:12.2047294Z         original_env = os.environ.get('PYTEST_CURRENT_TEST')
2025-08-30T14:16:12.2047566Z         try:
2025-08-30T14:16:12.2047754Z             if 'PYTEST_CURRENT_TEST' in os.environ:
2025-08-30T14:16:12.2048036Z                 del os.environ['PYTEST_CURRENT_TEST']
2025-08-30T14:16:12.2048400Z     
2025-08-30T14:16:12.2048567Z >           settings = Settings(
2025-08-30T14:16:12.2048782Z                 app_name="test",
2025-08-30T14:16:12.2049011Z                 environment="production",
2025-08-30T14:16:12.2049273Z                 dynamodb_table_name="test-table",
2025-08-30T14:16:12.2049527Z                 cors_origins_str=None
2025-08-30T14:16:12.2049747Z             )
2025-08-30T14:16:12.2049845Z 
2025-08-30T14:16:12.2049963Z tests/unit/test_absolute_final_coverage.py:190: 
2025-08-30T14:16:12.2050255Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T14:16:12.2050456Z 
2025-08-30T14:16:12.2050574Z __pydantic_self__ = Settings(), _case_sensitive = None
2025-08-30T14:16:12.2050921Z _nested_model_default_partial_update = None, _env_prefix = None
2025-08-30T14:16:12.2051625Z _env_file = PosixPath('.'), _env_file_encoding = None, _env_ignore_empty = None
2025-08-30T14:16:12.2052138Z _env_nested_delimiter = None, _env_parse_none_str = None
2025-08-30T14:16:12.2052518Z _env_parse_enums = None, _cli_prog_name = None, _cli_parse_args = None
2025-08-30T14:16:12.2052882Z _cli_settings_source = None, _cli_parse_none_str = None
2025-08-30T14:16:12.2053254Z _cli_hide_none_type = None, _cli_avoid_json = None, _cli_enforce_required = None
2025-08-30T14:16:12.2053658Z _cli_use_class_docs_for_groups = None, _cli_exit_on_error = None
2025-08-30T14:16:12.2054050Z _cli_prefix = None, _cli_flag_prefix_char = None, _cli_implicit_flags = None
2025-08-30T14:16:12.2054469Z _cli_ignore_unknown_args = None, _cli_kebab_case = None, _secrets_dir = None
2025-08-30T14:16:12.2055002Z values = {'app_name': 'test', 'cors_origins_str': None, 'dynamodb_table_name': 'test-table', 'environment': 'production'}
2025-08-30T14:16:12.2055373Z 
2025-08-30T14:16:12.2055440Z     def __init__(
2025-08-30T14:16:12.2055626Z         __pydantic_self__,
2025-08-30T14:16:12.2055848Z         _case_sensitive: bool | None = None,
2025-08-30T14:16:12.2056150Z         _nested_model_default_partial_update: bool | None = None,
2025-08-30T14:16:12.2056476Z         _env_prefix: str | None = None,
2025-08-30T14:16:12.2056748Z         _env_file: DotenvType | None = ENV_FILE_SENTINEL,
2025-08-30T14:16:12.2057026Z         _env_file_encoding: str | None = None,
2025-08-30T14:16:12.2057287Z         _env_ignore_empty: bool | None = None,
2025-08-30T14:16:12.2057551Z         _env_nested_delimiter: str | None = None,
2025-08-30T14:16:12.2057816Z         _env_parse_none_str: str | None = None,
2025-08-30T14:16:12.2058082Z         _env_parse_enums: bool | None = None,
2025-08-30T14:16:12.2058335Z         _cli_prog_name: str | None = None,
2025-08-30T14:16:12.2058646Z         _cli_parse_args: bool | list[str] | tuple[str, ...] | None = None,
2025-08-30T14:16:12.2059017Z         _cli_settings_source: CliSettingsSource[Any] | None = None,
2025-08-30T14:16:12.2059335Z         _cli_parse_none_str: str | None = None,
2025-08-30T14:16:12.2059602Z         _cli_hide_none_type: bool | None = None,
2025-08-30T14:16:12.2060026Z         _cli_avoid_json: bool | None = None,
2025-08-30T14:16:12.2060292Z         _cli_enforce_required: bool | None = None,
2025-08-30T14:16:12.2060588Z         _cli_use_class_docs_for_groups: bool | None = None,
2025-08-30T14:16:12.2060877Z         _cli_exit_on_error: bool | None = None,
2025-08-30T14:16:12.2061126Z         _cli_prefix: str | None = None,
2025-08-30T14:16:12.2061380Z         _cli_flag_prefix_char: str | None = None,
2025-08-30T14:16:12.2061647Z         _cli_implicit_flags: bool | None = None,
2025-08-30T14:16:12.2061917Z         _cli_ignore_unknown_args: bool | None = None,
2025-08-30T14:16:12.2062398Z         _cli_kebab_case: bool | None = None,
2025-08-30T14:16:12.2062783Z         _secrets_dir: PathType | None = None,
2025-08-30T14:16:12.2063202Z         **values: Any,
2025-08-30T14:16:12.2063511Z     ) -> None:
2025-08-30T14:16:12.2063833Z         # Uses something other than `self` the first arg to allow "self" as a settable attribute
2025-08-30T14:16:12.2064207Z >       super().__init__(
2025-08-30T14:16:12.2064612Z             **__pydantic_self__._settings_build_values(
2025-08-30T14:16:12.2064865Z                 values,
2025-08-30T14:16:12.2065073Z                 _case_sensitive=_case_sensitive,
2025-08-30T14:16:12.2065433Z                 _nested_model_default_partial_update=_nested_model_default_partial_update,
2025-08-30T14:16:12.2065797Z                 _env_prefix=_env_prefix,
2025-08-30T14:16:12.2066036Z                 _env_file=_env_file,
2025-08-30T14:16:12.2066277Z                 _env_file_encoding=_env_file_encoding,
2025-08-30T14:16:12.2066554Z                 _env_ignore_empty=_env_ignore_empty,
2025-08-30T14:16:12.2066838Z                 _env_nested_delimiter=_env_nested_delimiter,
2025-08-30T14:16:12.2067128Z                 _env_parse_none_str=_env_parse_none_str,
2025-08-30T14:16:12.2067397Z                 _env_parse_enums=_env_parse_enums,
2025-08-30T14:16:12.2067676Z                 _cli_prog_name=_cli_prog_name,
2025-08-30T14:16:12.2067936Z                 _cli_parse_args=_cli_parse_args,
2025-08-30T14:16:12.2068212Z                 _cli_settings_source=_cli_settings_source,
2025-08-30T14:16:12.2068505Z                 _cli_parse_none_str=_cli_parse_none_str,
2025-08-30T14:16:12.2068779Z                 _cli_hide_none_type=_cli_hide_none_type,
2025-08-30T14:16:12.2069036Z                 _cli_avoid_json=_cli_avoid_json,
2025-08-30T14:16:12.2069313Z                 _cli_enforce_required=_cli_enforce_required,
2025-08-30T14:16:12.2069645Z                 _cli_use_class_docs_for_groups=_cli_use_class_docs_for_groups,
2025-08-30T14:16:12.2069968Z                 _cli_exit_on_error=_cli_exit_on_error,
2025-08-30T14:16:12.2070223Z                 _cli_prefix=_cli_prefix,
2025-08-30T14:16:12.2070486Z                 _cli_flag_prefix_char=_cli_flag_prefix_char,
2025-08-30T14:16:12.2070774Z                 _cli_implicit_flags=_cli_implicit_flags,
2025-08-30T14:16:12.2071068Z                 _cli_ignore_unknown_args=_cli_ignore_unknown_args,
2025-08-30T14:16:12.2071366Z                 _cli_kebab_case=_cli_kebab_case,
2025-08-30T14:16:12.2071620Z                 _secrets_dir=_secrets_dir,
2025-08-30T14:16:12.2072136Z             )
2025-08-30T14:16:12.2072417Z         )
2025-08-30T14:16:12.2072770Z E       pydantic_core._pydantic_core.ValidationError: 3 validation errors for Settings
2025-08-30T14:16:12.2073136Z E       app_name
2025-08-30T14:16:12.2073463Z E         Extra inputs are not permitted [type=extra_forbidden, input_value='test', input_type=str]
2025-08-30T14:16:12.2074001Z E           For further information visit https://errors.pydantic.dev/2.10/v/extra_forbidden
2025-08-30T14:16:12.2074383Z E       dynamodb_table_name
2025-08-30T14:16:12.2074762Z E         Extra inputs are not permitted [type=extra_forbidden, input_value='test-table', input_type=str]
2025-08-30T14:16:12.2075296Z E           For further information visit https://errors.pydantic.dev/2.10/v/extra_forbidden
2025-08-30T14:16:12.2075670Z E       cors_origins_str
2025-08-30T14:16:12.2076029Z E         Extra inputs are not permitted [type=extra_forbidden, input_value=None, input_type=NoneType]
2025-08-30T14:16:12.2076692Z E           For further information visit https://errors.pydantic.dev/2.10/v/extra_forbidden
2025-08-30T14:16:12.2076992Z 
2025-08-30T14:16:12.2077330Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/pydantic_settings/main.py:171: ValidationError
2025-08-30T14:16:12.2077966Z ___ TestAbsoluteFinalCoverage.test_dependencies_get_authenticated_user_none ____
2025-08-30T14:16:12.2078271Z 
2025-08-30T14:16:12.2078540Z self = <tests.unit.test_absolute_final_coverage.TestAbsoluteFinalCoverage object at 0x7fdf3697da90>
2025-08-30T14:16:12.2078892Z 
2025-08-30T14:16:12.2079026Z     def test_dependencies_get_authenticated_user_none(self):
2025-08-30T14:16:12.2079367Z         """Test get_authenticated_user with None - Line 25."""
2025-08-30T14:16:12.2079718Z >       from app.core.dependencies import get_authenticated_user
2025-08-30T14:16:12.2080459Z E       ImportError: cannot import name 'get_authenticated_user' from 'app.core.dependencies' (/home/runner/work/lifestyle-spaces/lifestyle-spaces/backend/app/core/dependencies.py)
2025-08-30T14:16:12.2081164Z 
2025-08-30T14:16:12.2081312Z tests/unit/test_absolute_final_coverage.py:206: ImportError
2025-08-30T14:16:12.2081745Z _________ TestAbsoluteFinalCoverage.test_space_get_space_client_error __________
2025-08-30T14:16:12.2082220Z 
2025-08-30T14:16:12.2082498Z self = <tests.unit.test_absolute_final_coverage.TestAbsoluteFinalCoverage object at 0x7fdf3697e750>
2025-08-30T14:16:12.2082847Z 
2025-08-30T14:16:12.2082958Z     def test_space_get_space_client_error(self):
2025-08-30T14:16:12.2083249Z         """Test space get_space ClientError - Line 394."""
2025-08-30T14:16:12.2083553Z         from app.services.space import SpaceService
2025-08-30T14:16:12.2083879Z         from app.services.exceptions import SpaceNotFoundError
2025-08-30T14:16:12.2084162Z     
2025-08-30T14:16:12.2084411Z         with patch('app.services.space.boto3.resource') as mock_resource:
2025-08-30T14:16:12.2084753Z             mock_table = Mock()
2025-08-30T14:16:12.2085040Z             mock_resource.return_value.Table.return_value = mock_table
2025-08-30T14:16:12.2085350Z             service = SpaceService()
2025-08-30T14:16:12.2085592Z             service.table = mock_table
2025-08-30T14:16:12.2085846Z     
2025-08-30T14:16:12.2086183Z             mock_table.get_item.side_effect = ClientError(
2025-08-30T14:16:12.2086582Z                 error_response={'Error': {'Code': 'Error'}},
2025-08-30T14:16:12.2086856Z                 operation_name='GetItem'
2025-08-30T14:16:12.2087080Z             )
2025-08-30T14:16:12.2087235Z     
2025-08-30T14:16:12.2087426Z             with pytest.raises(SpaceNotFoundError):
2025-08-30T14:16:12.2087715Z >               service.get_space("space123", "user123")
2025-08-30T14:16:12.2087896Z 
2025-08-30T14:16:12.2088008Z tests/unit/test_absolute_final_coverage.py:238: 
2025-08-30T14:16:12.2088305Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T14:16:12.2088604Z app/services/space.py:148: in get_space
2025-08-30T14:16:12.2088861Z     response = self.table.get_item(
2025-08-30T14:16:12.2089246Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1124: in __call__
2025-08-30T14:16:12.2089660Z     return self._mock_call(*args, **kwargs)
2025-08-30T14:16:12.2090066Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1128: in _mock_call
2025-08-30T14:16:12.2090488Z     return self._execute_mock_call(*args, **kwargs)
2025-08-30T14:16:12.2090783Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T14:16:12.2090977Z 
2025-08-30T14:16:12.2091152Z self = <Mock name='resource().Table().get_item' id='140596678585680'>, args = ()
2025-08-30T14:16:12.2091537Z kwargs = {'Key': {'PK': 'SPACE#space123', 'SK': 'METADATA'}}
2025-08-30T14:16:12.2091978Z effect = ClientError('An error occurred (Error) when calling the GetItem operation: Unknown')
2025-08-30T14:16:12.2092557Z 
2025-08-30T14:16:12.2092670Z     def _execute_mock_call(self, /, *args, **kwargs):
2025-08-30T14:16:12.2093022Z         # separate from _increment_mock_call so that awaited functions are
2025-08-30T14:16:12.2093443Z         # executed separately from their call, also AsyncMock overrides this method
2025-08-30T14:16:12.2093780Z     
2025-08-30T14:16:12.2093949Z         effect = self.side_effect
2025-08-30T14:16:12.2094181Z         if effect is not None:
2025-08-30T14:16:12.2094401Z             if _is_exception(effect):
2025-08-30T14:16:12.2094633Z >               raise effect
2025-08-30T14:16:12.2095055Z E               botocore.exceptions.ClientError: An error occurred (Error) when calling the GetItem operation: Unknown
2025-08-30T14:16:12.2095428Z 
2025-08-30T14:16:12.2095661Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1183: ClientError
2025-08-30T14:16:12.2096183Z ___________ TestAbsoluteFinalCoverage.test_space_get_user_role_error ___________
2025-08-30T14:16:12.2096595Z 
2025-08-30T14:16:12.2096861Z self = <tests.unit.test_absolute_final_coverage.TestAbsoluteFinalCoverage object at 0x7fdf3697ef50>
2025-08-30T14:16:12.2097212Z 
2025-08-30T14:16:12.2097316Z     def test_space_get_user_role_error(self):
2025-08-30T14:16:12.2097608Z         """Test space get_user_role error - Lines 453-454."""
2025-08-30T14:16:12.2097919Z         from app.services.space import SpaceService
2025-08-30T14:16:12.2098172Z     
2025-08-30T14:16:12.2098426Z         with patch('app.services.space.boto3.resource') as mock_resource:
2025-08-30T14:16:12.2098898Z             mock_table = Mock()
2025-08-30T14:16:12.2099337Z             mock_resource.return_value.Table.return_value = mock_table
2025-08-30T14:16:12.2099655Z             service = SpaceService()
2025-08-30T14:16:12.2099891Z             service.table = mock_table
2025-08-30T14:16:12.2100107Z     
2025-08-30T14:16:12.2100307Z             mock_table.get_item.side_effect = ClientError(
2025-08-30T14:16:12.2100612Z                 error_response={'Error': {'Code': 'Error'}},
2025-08-30T14:16:12.2100889Z                 operation_name='GetItem'
2025-08-30T14:16:12.2101113Z             )
2025-08-30T14:16:12.2101275Z     
2025-08-30T14:16:12.2101479Z >           result = service.get_user_role("space123", "user123")
2025-08-30T14:16:12.2101872Z E           AttributeError: 'SpaceService' object has no attribute 'get_user_role'
2025-08-30T14:16:12.2102349Z 
2025-08-30T14:16:12.2102514Z tests/unit/test_absolute_final_coverage.py:256: AttributeError
2025-08-30T14:16:12.2102941Z ___________ TestAbsoluteFinalCoverage.test_space_join_success_return ___________
2025-08-30T14:16:12.2103231Z 
2025-08-30T14:16:12.2103390Z self = <app.services.space.SpaceService object at 0x7fdf3831bed0>
2025-08-30T14:16:12.2103766Z invite_code = 'CODE', user_id = 'user123', username = 'user'
2025-08-30T14:16:12.2104056Z email = 'user@test.com'
2025-08-30T14:16:12.2104178Z 
2025-08-30T14:16:12.2104341Z     def join_space_with_invite_code(self, invite_code: str, user_id: str,
2025-08-30T14:16:12.2104738Z                                    username: str = "", email: str = "") -> Dict[str, Any]:
2025-08-30T14:16:12.2105055Z         """Join a space using invite code."""
2025-08-30T14:16:12.2105300Z         # Look up invite code
2025-08-30T14:16:12.2105508Z         try:
2025-08-30T14:16:12.2105699Z             response = self.table.get_item(
2025-08-30T14:16:12.2106018Z                 Key={'PK': f'INVITE#{invite_code}', 'SK': f'SPACE#{invite_code}'}
2025-08-30T14:16:12.2106307Z             )
2025-08-30T14:16:12.2106467Z     
2025-08-30T14:16:12.2106635Z             if 'Item' not in response:
2025-08-30T14:16:12.2106881Z                 # Try with proper SK pattern
2025-08-30T14:16:12.2107148Z                 invite_response = self.table.query(
2025-08-30T14:16:12.2107489Z                     KeyConditionExpression=Key('PK').eq(f'INVITE#{invite_code}')
2025-08-30T14:16:12.2107796Z                 )
2025-08-30T14:16:12.2107963Z     
2025-08-30T14:16:12.2108155Z                 if not invite_response.get('Items'):
2025-08-30T14:16:12.2108604Z                     raise InvalidInviteCodeError("Invalid invite code")
2025-08-30T14:16:12.2108884Z     
2025-08-30T14:16:12.2109096Z                 space_id = invite_response['Items'][0].get('space_id')
2025-08-30T14:16:12.2109373Z             else:
2025-08-30T14:16:12.2109579Z                 space_id = response['Item'].get('space_id')
2025-08-30T14:16:12.2109933Z     
2025-08-30T14:16:12.2110212Z             if not space_id:
2025-08-30T14:16:12.2110568Z                 raise InvalidInviteCodeError("Invalid invite code")
2025-08-30T14:16:12.2110849Z     
2025-08-30T14:16:12.2111017Z             # Check if already a member
2025-08-30T14:16:12.2111266Z             member_check = self.table.get_item(
2025-08-30T14:16:12.2111574Z                 Key={'PK': f'SPACE#{space_id}', 'SK': f'MEMBER#{user_id}'}
2025-08-30T14:16:12.2111850Z             )
2025-08-30T14:16:12.2112011Z     
2025-08-30T14:16:12.2112276Z             if 'Item' in member_check:
2025-08-30T14:16:12.2112747Z                 raise AlreadyMemberError("You are already a member of this space")
2025-08-30T14:16:12.2113069Z     
2025-08-30T14:16:12.2113219Z             # Add as member
2025-08-30T14:16:12.2113459Z             now = datetime.now(timezone.utc).isoformat()
2025-08-30T14:16:12.2113722Z             member_item = {
2025-08-30T14:16:12.2113930Z                 'PK': f'SPACE#{space_id}',
2025-08-30T14:16:12.2114178Z                 'SK': f'MEMBER#{user_id}',
2025-08-30T14:16:12.2114422Z                 'GSI1PK': f'USER#{user_id}',
2025-08-30T14:16:12.2114668Z                 'GSI1SK': f'SPACE#{space_id}',
2025-08-30T14:16:12.2114917Z                 'user_id': user_id,
2025-08-30T14:16:12.2115148Z                 'username': username,
2025-08-30T14:16:12.2115375Z                 'email': email,
2025-08-30T14:16:12.2115581Z                 'role': 'member',
2025-08-30T14:16:12.2115800Z                 'joined_at': now
2025-08-30T14:16:12.2116004Z             }
2025-08-30T14:16:12.2116166Z     
2025-08-30T14:16:12.2116349Z             self.table.put_item(Item=member_item)
2025-08-30T14:16:12.2116590Z     
2025-08-30T14:16:12.2116744Z             # Get space details
2025-08-30T14:16:12.2116982Z >           space = self.get_space(space_id, user_id)
2025-08-30T14:16:12.2117165Z 
2025-08-30T14:16:12.2117254Z app/services/space.py:506: 
2025-08-30T14:16:12.2117493Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T14:16:12.2117779Z app/services/space.py:158: in get_space
2025-08-30T14:16:12.2118038Z     member_response = self.table.get_item(
2025-08-30T14:16:12.2118446Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1124: in __call__
2025-08-30T14:16:12.2118886Z     return self._mock_call(*args, **kwargs)
2025-08-30T14:16:12.2119577Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1128: in _mock_call
2025-08-30T14:16:12.2120016Z     return self._execute_mock_call(*args, **kwargs)
2025-08-30T14:16:12.2120321Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T14:16:12.2120522Z 
2025-08-30T14:16:12.2120698Z self = <Mock name='resource().Table().get_item' id='140596673013584'>, args = ()
2025-08-30T14:16:12.2121224Z kwargs = {'Key': {'PK': 'SPACE#space123', 'SK': 'MEMBER#user123'}}
2025-08-30T14:16:12.2121645Z effect = <list_iterator object at 0x7fdf2fd33b20>
2025-08-30T14:16:12.2121866Z 
2025-08-30T14:16:12.2122320Z     def _execute_mock_call(self, /, *args, **kwargs):
2025-08-30T14:16:12.2122882Z         # separate from _increment_mock_call so that awaited functions are
2025-08-30T14:16:12.2123382Z         # executed separately from their call, also AsyncMock overrides this method
2025-08-30T14:16:12.2123864Z     
2025-08-30T14:16:12.2124148Z         effect = self.side_effect
2025-08-30T14:16:12.2124475Z         if effect is not None:
2025-08-30T14:16:12.2124794Z             if _is_exception(effect):
2025-08-30T14:16:12.2137720Z                 raise effect
2025-08-30T14:16:12.2138385Z             elif not _callable(effect):
2025-08-30T14:16:12.2138663Z >               result = next(effect)
2025-08-30T14:16:12.2138920Z E               StopIteration
2025-08-30T14:16:12.2139066Z 
2025-08-30T14:16:12.2139326Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1185: StopIteration
2025-08-30T14:16:12.2139685Z 
2025-08-30T14:16:12.2139865Z During handling of the above exception, another exception occurred:
2025-08-30T14:16:12.2140124Z 
2025-08-30T14:16:12.2140409Z self = <tests.unit.test_absolute_final_coverage.TestAbsoluteFinalCoverage object at 0x7fdf3697e1d0>
2025-08-30T14:16:12.2140768Z 
2025-08-30T14:16:12.2140881Z     def test_space_join_success_return(self):
2025-08-30T14:16:12.2141173Z         """Test space join success return - Line 508."""
2025-08-30T14:16:12.2141485Z         from app.services.space import SpaceService
2025-08-30T14:16:12.2141742Z     
2025-08-30T14:16:12.2141999Z         with patch('app.services.space.boto3.resource') as mock_resource:
2025-08-30T14:16:12.2142763Z             mock_table = Mock()
2025-08-30T14:16:12.2143071Z             mock_resource.return_value.Table.return_value = mock_table
2025-08-30T14:16:12.2143394Z             service = SpaceService()
2025-08-30T14:16:12.2143636Z             service.table = mock_table
2025-08-30T14:16:12.2143856Z     
2025-08-30T14:16:12.2144023Z             # Mock successful flow
2025-08-30T14:16:12.2144263Z             mock_table.get_item.side_effect = [
2025-08-30T14:16:12.2144559Z                 {'Item': {'space_id': 'space123'}},  # Invite lookup
2025-08-30T14:16:12.2144847Z                 {},  # Member check (not member)
2025-08-30T14:16:12.2145194Z                 {'Item': {'space_id': 'space123', 'name': 'Test', 'is_public': True}}  # Space data
2025-08-30T14:16:12.2145524Z             ]
2025-08-30T14:16:12.2145738Z             mock_table.query.return_value = {'Items': []}
2025-08-30T14:16:12.2146033Z             mock_table.put_item.return_value = {}
2025-08-30T14:16:12.2146281Z     
2025-08-30T14:16:12.2146584Z >           result = service.join_space_with_invite_code("CODE", "user123", "user", "user@test.com")
2025-08-30T14:16:12.2146888Z 
2025-08-30T14:16:12.2147008Z tests/unit/test_absolute_final_coverage.py:279: 
2025-08-30T14:16:12.2147299Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T14:16:12.2147505Z 
2025-08-30T14:16:12.2147669Z self = <app.services.space.SpaceService object at 0x7fdf3831bed0>
2025-08-30T14:16:12.2148043Z invite_code = 'CODE', user_id = 'user123', username = 'user'
2025-08-30T14:16:12.2148335Z email = 'user@test.com'
2025-08-30T14:16:12.2148459Z 
2025-08-30T14:16:12.2148624Z     def join_space_with_invite_code(self, invite_code: str, user_id: str,
2025-08-30T14:16:12.2149135Z                                    username: str = "", email: str = "") -> Dict[str, Any]:
2025-08-30T14:16:12.2149667Z         """Join a space using invite code."""
2025-08-30T14:16:12.2150081Z         # Look up invite code
2025-08-30T14:16:12.2150317Z         try:
2025-08-30T14:16:12.2150510Z             response = self.table.get_item(
2025-08-30T14:16:12.2150828Z                 Key={'PK': f'INVITE#{invite_code}', 'SK': f'SPACE#{invite_code}'}
2025-08-30T14:16:12.2151115Z             )
2025-08-30T14:16:12.2151276Z     
2025-08-30T14:16:12.2151450Z             if 'Item' not in response:
2025-08-30T14:16:12.2151695Z                 # Try with proper SK pattern
2025-08-30T14:16:12.2151966Z                 invite_response = self.table.query(
2025-08-30T14:16:12.2152486Z                     KeyConditionExpression=Key('PK').eq(f'INVITE#{invite_code}')
2025-08-30T14:16:12.2152796Z                 )
2025-08-30T14:16:12.2152966Z     
2025-08-30T14:16:12.2153159Z                 if not invite_response.get('Items'):
2025-08-30T14:16:12.2153466Z                     raise InvalidInviteCodeError("Invalid invite code")
2025-08-30T14:16:12.2153747Z     
2025-08-30T14:16:12.2153959Z                 space_id = invite_response['Items'][0].get('space_id')
2025-08-30T14:16:12.2154373Z             else:
2025-08-30T14:16:12.2154575Z                 space_id = response['Item'].get('space_id')
2025-08-30T14:16:12.2154830Z     
2025-08-30T14:16:12.2154992Z             if not space_id:
2025-08-30T14:16:12.2155254Z                 raise InvalidInviteCodeError("Invalid invite code")
2025-08-30T14:16:12.2155527Z     
2025-08-30T14:16:12.2155694Z             # Check if already a member
2025-08-30T14:16:12.2155944Z             member_check = self.table.get_item(
2025-08-30T14:16:12.2156246Z                 Key={'PK': f'SPACE#{space_id}', 'SK': f'MEMBER#{user_id}'}
2025-08-30T14:16:12.2156518Z             )
2025-08-30T14:16:12.2156677Z     
2025-08-30T14:16:12.2156836Z             if 'Item' in member_check:
2025-08-30T14:16:12.2157165Z                 raise AlreadyMemberError("You are already a member of this space")
2025-08-30T14:16:12.2157484Z     
2025-08-30T14:16:12.2157638Z             # Add as member
2025-08-30T14:16:12.2157881Z             now = datetime.now(timezone.utc).isoformat()
2025-08-30T14:16:12.2158265Z             member_item = {
2025-08-30T14:16:12.2158475Z                 'PK': f'SPACE#{space_id}',
2025-08-30T14:16:12.2158721Z                 'SK': f'MEMBER#{user_id}',
2025-08-30T14:16:12.2158967Z                 'GSI1PK': f'USER#{user_id}',
2025-08-30T14:16:12.2159212Z                 'GSI1SK': f'SPACE#{space_id}',
2025-08-30T14:16:12.2159455Z                 'user_id': user_id,
2025-08-30T14:16:12.2159683Z                 'username': username,
2025-08-30T14:16:12.2159946Z                 'email': email,
2025-08-30T14:16:12.2160155Z                 'role': 'member',
2025-08-30T14:16:12.2160374Z                 'joined_at': now
2025-08-30T14:16:12.2160675Z             }
2025-08-30T14:16:12.2160928Z     
2025-08-30T14:16:12.2161226Z             self.table.put_item(Item=member_item)
2025-08-30T14:16:12.2161624Z     
2025-08-30T14:16:12.2161831Z             # Get space details
2025-08-30T14:16:12.2162243Z             space = self.get_space(space_id, user_id)
2025-08-30T14:16:12.2162518Z     
2025-08-30T14:16:12.2162666Z             return {
2025-08-30T14:16:12.2162860Z                 'space_id': space_id,
2025-08-30T14:16:12.2163091Z                 'name': space['name'],
2025-08-30T14:16:12.2163316Z                 'role': 'member',
2025-08-30T14:16:12.2163528Z                 'joined_at': now
2025-08-30T14:16:12.2163728Z             }
2025-08-30T14:16:12.2163890Z     
2025-08-30T14:16:12.2164063Z         except InvalidInviteCodeError:
2025-08-30T14:16:12.2164291Z             raise
2025-08-30T14:16:12.2164485Z         except AlreadyMemberError:
2025-08-30T14:16:12.2164702Z             raise
2025-08-30T14:16:12.2164889Z         except Exception as e:
2025-08-30T14:16:12.2165157Z >           raise InvalidInviteCodeError("Invalid invite code")
2025-08-30T14:16:12.2165558Z E           app.services.exceptions.InvalidInviteCodeError: Invalid invite code
2025-08-30T14:16:12.2165838Z 
2025-08-30T14:16:12.2165957Z app/services/space.py:520: InvalidInviteCodeError
2025-08-30T14:16:12.2166345Z ____________ TestConfig100Coverage.test_parse_cors_json_array_valid ____________
2025-08-30T14:16:12.2166621Z 
2025-08-30T14:16:12.2166816Z self = <tests.unit.test_config_100.TestConfig100Coverage object at 0x7fdf369fe2d0>
2025-08-30T14:16:12.2167100Z 
2025-08-30T14:16:12.2167208Z     def test_parse_cors_json_array_valid(self):
2025-08-30T14:16:12.2167515Z         """Test parse_cors with valid JSON array - Lines 31-34."""
2025-08-30T14:16:12.2167917Z         json_string = '["http://localhost:3000", "http://example.com"]'
2025-08-30T14:16:12.2168257Z         result = parse_cors(json_string)
2025-08-30T14:16:12.2168578Z         assert result == ["http://localhost:3000", "http://example.com"]
2025-08-30T14:16:12.2168885Z     
2025-08-30T14:16:12.2169062Z         # Test with single value JSON
2025-08-30T14:16:12.2169319Z         json_string = '"http://localhost:3000"'
2025-08-30T14:16:12.2169574Z         result = parse_cors(json_string)
2025-08-30T14:16:12.2169840Z >       assert result == ["http://localhost:3000"]
2025-08-30T14:16:12.2170334Z E       assert ['"http://localhost:3000"'] == ['http://localhost:3000']
2025-08-30T14:16:12.2170732Z E         At index 0 diff: '"http://localhost:3000"' != 'http://localhost:3000'
2025-08-30T14:16:12.2171092Z E         Full diff:
2025-08-30T14:16:12.2171443Z E         - ['http://localhost:3000']
2025-08-30T14:16:12.2171855Z E         + ['"http://localhost:3000"']
2025-08-30T14:16:12.2172378Z E         ?   +                     +
2025-08-30T14:16:12.2172537Z 
2025-08-30T14:16:12.2172648Z tests/unit/test_config_100.py:38: AssertionError
2025-08-30T14:16:12.2173035Z ________ TestConfig100Coverage.test_settings_cors_origins_property_none ________
2025-08-30T14:16:12.2173318Z 
2025-08-30T14:16:12.2173513Z self = <tests.unit.test_config_100.TestConfig100Coverage object at 0x7fdf369ff650>
2025-08-30T14:16:12.2173798Z 
2025-08-30T14:16:12.2173918Z     def test_settings_cors_origins_property_none(self):
2025-08-30T14:16:12.2174342Z         """Test Settings.cors_origins property when cors_origins_str is None - Lines 106-109."""
2025-08-30T14:16:12.2174900Z         with patch.dict(os.environ, {}, clear=True):
2025-08-30T14:16:12.2175208Z             # Remove PYTEST_CURRENT_TEST to get non-test defaults
2025-08-30T14:16:12.2175513Z             if 'PYTEST_CURRENT_TEST' in os.environ:
2025-08-30T14:16:12.2175789Z                 del os.environ['PYTEST_CURRENT_TEST']
2025-08-30T14:16:12.2176023Z     
2025-08-30T14:16:12.2176189Z >           settings = Settings(
2025-08-30T14:16:12.2176408Z                 app_name="test",
2025-08-30T14:16:12.2176623Z                 environment="dev",
2025-08-30T14:16:12.2176863Z                 dynamodb_table_name="test-table",
2025-08-30T14:16:12.2177116Z                 cors_origins_str=None
2025-08-30T14:16:12.2177331Z             )
2025-08-30T14:16:12.2177429Z 
2025-08-30T14:16:12.2177514Z tests/unit/test_config_100.py:90: 
2025-08-30T14:16:12.2177772Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T14:16:12.2177973Z 
2025-08-30T14:16:12.2178101Z __pydantic_self__ = Settings(), _case_sensitive = None
2025-08-30T14:16:12.2178443Z _nested_model_default_partial_update = None, _env_prefix = None
2025-08-30T14:16:12.2178852Z _env_file = PosixPath('.'), _env_file_encoding = None, _env_ignore_empty = None
2025-08-30T14:16:12.2179234Z _env_nested_delimiter = None, _env_parse_none_str = None
2025-08-30T14:16:12.2179593Z _env_parse_enums = None, _cli_prog_name = None, _cli_parse_args = None
2025-08-30T14:16:12.2179953Z _cli_settings_source = None, _cli_parse_none_str = None
2025-08-30T14:16:12.2180332Z _cli_hide_none_type = None, _cli_avoid_json = None, _cli_enforce_required = None
2025-08-30T14:16:12.2180732Z _cli_use_class_docs_for_groups = None, _cli_exit_on_error = None
2025-08-30T14:16:12.2181117Z _cli_prefix = None, _cli_flag_prefix_char = None, _cli_implicit_flags = None
2025-08-30T14:16:12.2181537Z _cli_ignore_unknown_args = None, _cli_kebab_case = None, _secrets_dir = None
2025-08-30T14:16:12.2182253Z values = {'app_name': 'test', 'cors_origins_str': None, 'dynamodb_table_name': 'test-table', 'environment': 'dev'}
2025-08-30T14:16:12.2182611Z 
2025-08-30T14:16:12.2182686Z     def __init__(
2025-08-30T14:16:12.2182866Z         __pydantic_self__,
2025-08-30T14:16:12.2183090Z         _case_sensitive: bool | None = None,
2025-08-30T14:16:12.2183390Z         _nested_model_default_partial_update: bool | None = None,
2025-08-30T14:16:12.2183692Z         _env_prefix: str | None = None,
2025-08-30T14:16:12.2183962Z         _env_file: DotenvType | None = ENV_FILE_SENTINEL,
2025-08-30T14:16:12.2184236Z         _env_file_encoding: str | None = None,
2025-08-30T14:16:12.2184487Z         _env_ignore_empty: bool | None = None,
2025-08-30T14:16:12.2184741Z         _env_nested_delimiter: str | None = None,
2025-08-30T14:16:12.2185009Z         _env_parse_none_str: str | None = None,
2025-08-30T14:16:12.2185372Z         _env_parse_enums: bool | None = None,
2025-08-30T14:16:12.2185795Z         _cli_prog_name: str | None = None,
2025-08-30T14:16:12.2186423Z         _cli_parse_args: bool | list[str] | tuple[str, ...] | None = None,
2025-08-30T14:16:12.2186790Z         _cli_settings_source: CliSettingsSource[Any] | None = None,
2025-08-30T14:16:12.2187100Z         _cli_parse_none_str: str | None = None,
2025-08-30T14:16:12.2187359Z         _cli_hide_none_type: bool | None = None,
2025-08-30T14:16:12.2187611Z         _cli_avoid_json: bool | None = None,
2025-08-30T14:16:12.2187863Z         _cli_enforce_required: bool | None = None,
2025-08-30T14:16:12.2188152Z         _cli_use_class_docs_for_groups: bool | None = None,
2025-08-30T14:16:12.2188432Z         _cli_exit_on_error: bool | None = None,
2025-08-30T14:16:12.2188673Z         _cli_prefix: str | None = None,
2025-08-30T14:16:12.2188921Z         _cli_flag_prefix_char: str | None = None,
2025-08-30T14:16:12.2189186Z         _cli_implicit_flags: bool | None = None,
2025-08-30T14:16:12.2189453Z         _cli_ignore_unknown_args: bool | None = None,
2025-08-30T14:16:12.2189837Z         _cli_kebab_case: bool | None = None,
2025-08-30T14:16:12.2190093Z         _secrets_dir: PathType | None = None,
2025-08-30T14:16:12.2190323Z         **values: Any,
2025-08-30T14:16:12.2190506Z     ) -> None:
2025-08-30T14:16:12.2190812Z         # Uses something other than `self` the first arg to allow "self" as a settable attribute
2025-08-30T14:16:12.2191180Z >       super().__init__(
2025-08-30T14:16:12.2191398Z             **__pydantic_self__._settings_build_values(
2025-08-30T14:16:12.2191641Z                 values,
2025-08-30T14:16:12.2191841Z                 _case_sensitive=_case_sensitive,
2025-08-30T14:16:12.2192370Z                 _nested_model_default_partial_update=_nested_model_default_partial_update,
2025-08-30T14:16:12.2192728Z                 _env_prefix=_env_prefix,
2025-08-30T14:16:12.2192966Z                 _env_file=_env_file,
2025-08-30T14:16:12.2193204Z                 _env_file_encoding=_env_file_encoding,
2025-08-30T14:16:12.2193469Z                 _env_ignore_empty=_env_ignore_empty,
2025-08-30T14:16:12.2193757Z                 _env_nested_delimiter=_env_nested_delimiter,
2025-08-30T14:16:12.2194037Z                 _env_parse_none_str=_env_parse_none_str,
2025-08-30T14:16:12.2194303Z                 _env_parse_enums=_env_parse_enums,
2025-08-30T14:16:12.2194557Z                 _cli_prog_name=_cli_prog_name,
2025-08-30T14:16:12.2194805Z                 _cli_parse_args=_cli_parse_args,
2025-08-30T14:16:12.2195071Z                 _cli_settings_source=_cli_settings_source,
2025-08-30T14:16:12.2195346Z                 _cli_parse_none_str=_cli_parse_none_str,
2025-08-30T14:16:12.2195614Z                 _cli_hide_none_type=_cli_hide_none_type,
2025-08-30T14:16:12.2195877Z                 _cli_avoid_json=_cli_avoid_json,
2025-08-30T14:16:12.2196141Z                 _cli_enforce_required=_cli_enforce_required,
2025-08-30T14:16:12.2196462Z                 _cli_use_class_docs_for_groups=_cli_use_class_docs_for_groups,
2025-08-30T14:16:12.2196784Z                 _cli_exit_on_error=_cli_exit_on_error,
2025-08-30T14:16:12.2197039Z                 _cli_prefix=_cli_prefix,
2025-08-30T14:16:12.2197323Z                 _cli_flag_prefix_char=_cli_flag_prefix_char,
2025-08-30T14:16:12.2197809Z                 _cli_implicit_flags=_cli_implicit_flags,
2025-08-30T14:16:12.2198305Z                 _cli_ignore_unknown_args=_cli_ignore_unknown_args,
2025-08-30T14:16:12.2198663Z                 _cli_kebab_case=_cli_kebab_case,
2025-08-30T14:16:12.2198910Z                 _secrets_dir=_secrets_dir,
2025-08-30T14:16:12.2199127Z             )
2025-08-30T14:16:12.2199280Z         )
2025-08-30T14:16:12.2199569Z E       pydantic_core._pydantic_core.ValidationError: 3 validation errors for Settings
2025-08-30T14:16:12.2199930Z E       app_name
2025-08-30T14:16:12.2200252Z E         Extra inputs are not permitted [type=extra_forbidden, input_value='test', input_type=str]
2025-08-30T14:16:12.2200784Z E           For further information visit https://errors.pydantic.dev/2.10/v/extra_forbidden
2025-08-30T14:16:12.2201290Z E       dynamodb_table_name
2025-08-30T14:16:12.2201665Z E         Extra inputs are not permitted [type=extra_forbidden, input_value='test-table', input_type=str]
2025-08-30T14:16:12.2202399Z E           For further information visit https://errors.pydantic.dev/2.10/v/extra_forbidden
2025-08-30T14:16:12.2202768Z E       cors_origins_str
2025-08-30T14:16:12.2203117Z E         Extra inputs are not permitted [type=extra_forbidden, input_value=None, input_type=NoneType]
2025-08-30T14:16:12.2203631Z E           For further information visit https://errors.pydantic.dev/2.10/v/extra_forbidden
2025-08-30T14:16:12.2203925Z 
2025-08-30T14:16:12.2204260Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/pydantic_settings/main.py:171: ValidationError
2025-08-30T14:16:12.2204878Z ____ TestConfig100Coverage.test_settings_cors_origins_property_with_pytest _____
2025-08-30T14:16:12.2205166Z 
2025-08-30T14:16:12.2205364Z self = <tests.unit.test_config_100.TestConfig100Coverage object at 0x7fdf369fcc50>
2025-08-30T14:16:12.2205776Z 
2025-08-30T14:16:12.2205919Z     def test_settings_cors_origins_property_with_pytest(self):
2025-08-30T14:16:12.2206320Z         """Test Settings.cors_origins property in test environment - Lines 106-107."""
2025-08-30T14:16:12.2206924Z         with patch.dict(os.environ, {'PYTEST_CURRENT_TEST': 'test_file.py::test_method'}, clear=False):
2025-08-30T14:16:12.2207319Z >           settings = Settings(
2025-08-30T14:16:12.2207535Z                 app_name="test",
2025-08-30T14:16:12.2207748Z                 environment="test",
2025-08-30T14:16:12.2207989Z                 dynamodb_table_name="test-table",
2025-08-30T14:16:12.2208239Z                 cors_origins_str=None
2025-08-30T14:16:12.2208447Z             )
2025-08-30T14:16:12.2208545Z 
2025-08-30T14:16:12.2208629Z tests/unit/test_config_100.py:107: 
2025-08-30T14:16:12.2208986Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T14:16:12.2209180Z 
2025-08-30T14:16:12.2209608Z __pydantic_self__ = Settings(), _case_sensitive = None
2025-08-30T14:16:12.2209957Z _nested_model_default_partial_update = None, _env_prefix = None
2025-08-30T14:16:12.2210360Z _env_file = PosixPath('.'), _env_file_encoding = None, _env_ignore_empty = None
2025-08-30T14:16:12.2210737Z _env_nested_delimiter = None, _env_parse_none_str = None
2025-08-30T14:16:12.2211085Z _env_parse_enums = None, _cli_prog_name = None, _cli_parse_args = None
2025-08-30T14:16:12.2211435Z _cli_settings_source = None, _cli_parse_none_str = None
2025-08-30T14:16:12.2211803Z _cli_hide_none_type = None, _cli_avoid_json = None, _cli_enforce_required = None
2025-08-30T14:16:12.2212408Z _cli_use_class_docs_for_groups = None, _cli_exit_on_error = None
2025-08-30T14:16:12.2212796Z _cli_prefix = None, _cli_flag_prefix_char = None, _cli_implicit_flags = None
2025-08-30T14:16:12.2213208Z _cli_ignore_unknown_args = None, _cli_kebab_case = None, _secrets_dir = None
2025-08-30T14:16:12.2213957Z values = {'app_name': 'test', 'cors_origins_str': None, 'dynamodb_table_name': 'test-table', 'environment': 'test'}
2025-08-30T14:16:12.2214581Z 
2025-08-30T14:16:12.2214702Z     def __init__(
2025-08-30T14:16:12.2215009Z         __pydantic_self__,
2025-08-30T14:16:12.2215369Z         _case_sensitive: bool | None = None,
2025-08-30T14:16:12.2215813Z         _nested_model_default_partial_update: bool | None = None,
2025-08-30T14:16:12.2216113Z         _env_prefix: str | None = None,
2025-08-30T14:16:12.2216380Z         _env_file: DotenvType | None = ENV_FILE_SENTINEL,
2025-08-30T14:16:12.2216662Z         _env_file_encoding: str | None = None,
2025-08-30T14:16:12.2216913Z         _env_ignore_empty: bool | None = None,
2025-08-30T14:16:12.2217170Z         _env_nested_delimiter: str | None = None,
2025-08-30T14:16:12.2217436Z         _env_parse_none_str: str | None = None,
2025-08-30T14:16:12.2217686Z         _env_parse_enums: bool | None = None,
2025-08-30T14:16:12.2217931Z         _cli_prog_name: str | None = None,
2025-08-30T14:16:12.2218229Z         _cli_parse_args: bool | list[str] | tuple[str, ...] | None = None,
2025-08-30T14:16:12.2218738Z         _cli_settings_source: CliSettingsSource[Any] | None = None,
2025-08-30T14:16:12.2219046Z         _cli_parse_none_str: str | None = None,
2025-08-30T14:16:12.2219353Z         _cli_hide_none_type: bool | None = None,
2025-08-30T14:16:12.2219808Z         _cli_avoid_json: bool | None = None,
2025-08-30T14:16:12.2220259Z         _cli_enforce_required: bool | None = None,
2025-08-30T14:16:12.2220592Z         _cli_use_class_docs_for_groups: bool | None = None,
2025-08-30T14:16:12.2220872Z         _cli_exit_on_error: bool | None = None,
2025-08-30T14:16:12.2221114Z         _cli_prefix: str | None = None,
2025-08-30T14:16:12.2221361Z         _cli_flag_prefix_char: str | None = None,
2025-08-30T14:16:12.2221624Z         _cli_implicit_flags: bool | None = None,
2025-08-30T14:16:12.2221984Z         _cli_ignore_unknown_args: bool | None = None,
2025-08-30T14:16:12.2222502Z         _cli_kebab_case: bool | None = None,
2025-08-30T14:16:12.2222916Z         _secrets_dir: PathType | None = None,
2025-08-30T14:16:12.2223152Z         **values: Any,
2025-08-30T14:16:12.2223327Z     ) -> None:
2025-08-30T14:16:12.2223636Z         # Uses something other than `self` the first arg to allow "self" as a settable attribute
2025-08-30T14:16:12.2224135Z >       super().__init__(
2025-08-30T14:16:12.2224355Z             **__pydantic_self__._settings_build_values(
2025-08-30T14:16:12.2224609Z                 values,
2025-08-30T14:16:12.2224807Z                 _case_sensitive=_case_sensitive,
2025-08-30T14:16:12.2225159Z                 _nested_model_default_partial_update=_nested_model_default_partial_update,
2025-08-30T14:16:12.2225509Z                 _env_prefix=_env_prefix,
2025-08-30T14:16:12.2225744Z                 _env_file=_env_file,
2025-08-30T14:16:12.2225986Z                 _env_file_encoding=_env_file_encoding,
2025-08-30T14:16:12.2226253Z                 _env_ignore_empty=_env_ignore_empty,
2025-08-30T14:16:12.2226531Z                 _env_nested_delimiter=_env_nested_delimiter,
2025-08-30T14:16:12.2226828Z                 _env_parse_none_str=_env_parse_none_str,
2025-08-30T14:16:12.2227097Z                 _env_parse_enums=_env_parse_enums,
2025-08-30T14:16:12.2227348Z                 _cli_prog_name=_cli_prog_name,
2025-08-30T14:16:12.2227598Z                 _cli_parse_args=_cli_parse_args,
2025-08-30T14:16:12.2227870Z                 _cli_settings_source=_cli_settings_source,
2025-08-30T14:16:12.2228144Z                 _cli_parse_none_str=_cli_parse_none_str,
2025-08-30T14:16:12.2228408Z                 _cli_hide_none_type=_cli_hide_none_type,
2025-08-30T14:16:12.2228665Z                 _cli_avoid_json=_cli_avoid_json,
2025-08-30T14:16:12.2228928Z                 _cli_enforce_required=_cli_enforce_required,
2025-08-30T14:16:12.2229253Z                 _cli_use_class_docs_for_groups=_cli_use_class_docs_for_groups,
2025-08-30T14:16:12.2229580Z                 _cli_exit_on_error=_cli_exit_on_error,
2025-08-30T14:16:12.2229833Z                 _cli_prefix=_cli_prefix,
2025-08-30T14:16:12.2230094Z                 _cli_flag_prefix_char=_cli_flag_prefix_char,
2025-08-30T14:16:12.2230368Z                 _cli_implicit_flags=_cli_implicit_flags,
2025-08-30T14:16:12.2230659Z                 _cli_ignore_unknown_args=_cli_ignore_unknown_args,
2025-08-30T14:16:12.2230939Z                 _cli_kebab_case=_cli_kebab_case,
2025-08-30T14:16:12.2231189Z                 _secrets_dir=_secrets_dir,
2025-08-30T14:16:12.2231413Z             )
2025-08-30T14:16:12.2231570Z         )
2025-08-30T14:16:12.2231860Z E       pydantic_core._pydantic_core.ValidationError: 3 validation errors for Settings
2025-08-30T14:16:12.2232341Z E       app_name
2025-08-30T14:16:12.2232668Z E         Extra inputs are not permitted [type=extra_forbidden, input_value='test', input_type=str]
2025-08-30T14:16:12.2233190Z E           For further information visit https://errors.pydantic.dev/2.10/v/extra_forbidden
2025-08-30T14:16:12.2233563Z E       dynamodb_table_name
2025-08-30T14:16:12.2234072Z E         Extra inputs are not permitted [type=extra_forbidden, input_value='test-table', input_type=str]
2025-08-30T14:16:12.2234606Z E           For further information visit https://errors.pydantic.dev/2.10/v/extra_forbidden
2025-08-30T14:16:12.2234975Z E       cors_origins_str
2025-08-30T14:16:12.2235331Z E         Extra inputs are not permitted [type=extra_forbidden, input_value=None, input_type=NoneType]
2025-08-30T14:16:12.2235864Z E           For further information visit https://errors.pydantic.dev/2.10/v/extra_forbidden
2025-08-30T14:16:12.2236162Z 
2025-08-30T14:16:12.2236504Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/pydantic_settings/main.py:171: ValidationError
2025-08-30T14:16:12.2237118Z ___________ TestConfig100Coverage.test_settings_cors_origins_cached ____________
2025-08-30T14:16:12.2237403Z 
2025-08-30T14:16:12.2237600Z self = <tests.unit.test_config_100.TestConfig100Coverage object at 0x7fdf369fc650>
2025-08-30T14:16:12.2237885Z 
2025-08-30T14:16:12.2238113Z     def test_settings_cors_origins_cached(self):
2025-08-30T14:16:12.2238417Z         """Test Settings.cors_origins property uses cache."""
2025-08-30T14:16:12.2238702Z >       settings = Settings(
2025-08-30T14:16:12.2238915Z             app_name="test",
2025-08-30T14:16:12.2239116Z             environment="dev",
2025-08-30T14:16:12.2239344Z             dynamodb_table_name="test-table",
2025-08-30T14:16:12.2239619Z             cors_origins_str="http://custom.com"
2025-08-30T14:16:12.2239862Z         )
2025-08-30T14:16:12.2239954Z 
2025-08-30T14:16:12.2240042Z tests/unit/test_config_100.py:120: 
2025-08-30T14:16:12.2240305Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T14:16:12.2240496Z 
2025-08-30T14:16:12.2240625Z __pydantic_self__ = Settings(), _case_sensitive = None
2025-08-30T14:16:12.2240971Z _nested_model_default_partial_update = None, _env_prefix = None
2025-08-30T14:16:12.2241377Z _env_file = PosixPath('.'), _env_file_encoding = None, _env_ignore_empty = None
2025-08-30T14:16:12.2241769Z _env_nested_delimiter = None, _env_parse_none_str = None
2025-08-30T14:16:12.2242238Z _env_parse_enums = None, _cli_prog_name = None, _cli_parse_args = None
2025-08-30T14:16:12.2242592Z _cli_settings_source = None, _cli_parse_none_str = None
2025-08-30T14:16:12.2242964Z _cli_hide_none_type = None, _cli_avoid_json = None, _cli_enforce_required = None
2025-08-30T14:16:12.2243359Z _cli_use_class_docs_for_groups = None, _cli_exit_on_error = None
2025-08-30T14:16:12.2243744Z _cli_prefix = None, _cli_flag_prefix_char = None, _cli_implicit_flags = None
2025-08-30T14:16:12.2244165Z _cli_ignore_unknown_args = None, _cli_kebab_case = None, _secrets_dir = None
2025-08-30T14:16:12.2244731Z values = {'app_name': 'test', 'cors_origins_str': 'http://custom.com', 'dynamodb_table_name': 'test-table', 'environment': 'dev'}
2025-08-30T14:16:12.2245119Z 
2025-08-30T14:16:12.2245198Z     def __init__(
2025-08-30T14:16:12.2245378Z         __pydantic_self__,
2025-08-30T14:16:12.2245600Z         _case_sensitive: bool | None = None,
2025-08-30T14:16:12.2245912Z         _nested_model_default_partial_update: bool | None = None,
2025-08-30T14:16:12.2246216Z         _env_prefix: str | None = None,
2025-08-30T14:16:12.2246486Z         _env_file: DotenvType | None = ENV_FILE_SENTINEL,
2025-08-30T14:16:12.2246772Z         _env_file_encoding: str | None = None,
2025-08-30T14:16:12.2247036Z         _env_ignore_empty: bool | None = None,
2025-08-30T14:16:12.2247296Z         _env_nested_delimiter: str | None = None,
2025-08-30T14:16:12.2247568Z         _env_parse_none_str: str | None = None,
2025-08-30T14:16:12.2247832Z         _env_parse_enums: bool | None = None,
2025-08-30T14:16:12.2248087Z         _cli_prog_name: str | None = None,
2025-08-30T14:16:12.2248394Z         _cli_parse_args: bool | list[str] | tuple[str, ...] | None = None,
2025-08-30T14:16:12.2248770Z         _cli_settings_source: CliSettingsSource[Any] | None = None,
2025-08-30T14:16:12.2249086Z         _cli_parse_none_str: str | None = None,
2025-08-30T14:16:12.2249505Z         _cli_hide_none_type: bool | None = None,
2025-08-30T14:16:12.2249764Z         _cli_avoid_json: bool | None = None,
2025-08-30T14:16:12.2250022Z         _cli_enforce_required: bool | None = None,
2025-08-30T14:16:12.2250306Z         _cli_use_class_docs_for_groups: bool | None = None,
2025-08-30T14:16:12.2250590Z         _cli_exit_on_error: bool | None = None,
2025-08-30T14:16:12.2250840Z         _cli_prefix: str | None = None,
2025-08-30T14:16:12.2251086Z         _cli_flag_prefix_char: str | None = None,
2025-08-30T14:16:12.2251353Z         _cli_implicit_flags: bool | None = None,
2025-08-30T14:16:12.2251627Z         _cli_ignore_unknown_args: bool | None = None,
2025-08-30T14:16:12.2251897Z         _cli_kebab_case: bool | None = None,
2025-08-30T14:16:12.2252247Z         _secrets_dir: PathType | None = None,
2025-08-30T14:16:12.2252484Z         **values: Any,
2025-08-30T14:16:12.2252668Z     ) -> None:
2025-08-30T14:16:12.2252975Z         # Uses something other than `self` the first arg to allow "self" as a settable attribute
2025-08-30T14:16:12.2253474Z >       super().__init__(
2025-08-30T14:16:12.2253703Z             **__pydantic_self__._settings_build_values(
2025-08-30T14:16:12.2253949Z                 values,
2025-08-30T14:16:12.2254156Z                 _case_sensitive=_case_sensitive,
2025-08-30T14:16:12.2254517Z                 _nested_model_default_partial_update=_nested_model_default_partial_update,
2025-08-30T14:16:12.2254879Z                 _env_prefix=_env_prefix,
2025-08-30T14:16:12.2255112Z                 _env_file=_env_file,
2025-08-30T14:16:12.2255360Z                 _env_file_encoding=_env_file_encoding,
2025-08-30T14:16:12.2255630Z                 _env_ignore_empty=_env_ignore_empty,
2025-08-30T14:16:12.2255904Z                 _env_nested_delimiter=_env_nested_delimiter,
2025-08-30T14:16:12.2256201Z                 _env_parse_none_str=_env_parse_none_str,
2025-08-30T14:16:12.2256479Z                 _env_parse_enums=_env_parse_enums,
2025-08-30T14:16:12.2256750Z                 _cli_prog_name=_cli_prog_name,
2025-08-30T14:16:12.2257000Z                 _cli_parse_args=_cli_parse_args,
2025-08-30T14:16:12.2257275Z                 _cli_settings_source=_cli_settings_source,
2025-08-30T14:16:12.2257557Z                 _cli_parse_none_str=_cli_parse_none_str,
2025-08-30T14:16:12.2257828Z                 _cli_hide_none_type=_cli_hide_none_type,
2025-08-30T14:16:12.2258092Z                 _cli_avoid_json=_cli_avoid_json,
2025-08-30T14:16:12.2258370Z                 _cli_enforce_required=_cli_enforce_required,
2025-08-30T14:16:12.2258696Z                 _cli_use_class_docs_for_groups=_cli_use_class_docs_for_groups,
2025-08-30T14:16:12.2259025Z                 _cli_exit_on_error=_cli_exit_on_error,
2025-08-30T14:16:12.2259293Z                 _cli_prefix=_cli_prefix,
2025-08-30T14:16:12.2259563Z                 _cli_flag_prefix_char=_cli_flag_prefix_char,
2025-08-30T14:16:12.2259841Z                 _cli_implicit_flags=_cli_implicit_flags,
2025-08-30T14:16:12.2260179Z                 _cli_ignore_unknown_args=_cli_ignore_unknown_args,
2025-08-30T14:16:12.2260475Z                 _cli_kebab_case=_cli_kebab_case,
2025-08-30T14:16:12.2260721Z                 _secrets_dir=_secrets_dir,
2025-08-30T14:16:12.2260948Z             )
2025-08-30T14:16:12.2261113Z         )
2025-08-30T14:16:12.2261407Z E       pydantic_core._pydantic_core.ValidationError: 3 validation errors for Settings
2025-08-30T14:16:12.2261773Z E       app_name
2025-08-30T14:16:12.2262328Z E         Extra inputs are not permitted [type=extra_forbidden, input_value='test', input_type=str]
2025-08-30T14:16:12.2262877Z E           For further information visit https://errors.pydantic.dev/2.10/v/extra_forbidden
2025-08-30T14:16:12.2263250Z E       dynamodb_table_name
2025-08-30T14:16:12.2263632Z E         Extra inputs are not permitted [type=extra_forbidden, input_value='test-table', input_type=str]
2025-08-30T14:16:12.2264171Z E           For further information visit https://errors.pydantic.dev/2.10/v/extra_forbidden
2025-08-30T14:16:12.2264678Z E       cors_origins_str
2025-08-30T14:16:12.2265068Z E         Extra inputs are not permitted [type=extra_forbidden, input_value='http://custom.com', input_type=str]
2025-08-30T14:16:12.2265627Z E           For further information visit https://errors.pydantic.dev/2.10/v/extra_forbidden
2025-08-30T14:16:12.2265918Z 
2025-08-30T14:16:12.2266263Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/pydantic_settings/main.py:171: ValidationError
2025-08-30T14:16:12.2266844Z __________________ test_create_space_validation_error_line_53 __________________
2025-08-30T14:16:12.2267096Z 
2025-08-30T14:16:12.2267178Z     @pytest.mark.asyncio
2025-08-30T14:16:12.2267436Z     async def test_create_space_validation_error_line_53():
2025-08-30T14:16:12.2267830Z         """Test ValidationError handling in create_space endpoint (line 53)."""
2025-08-30T14:16:12.2268207Z         from app.api.routes.spaces import create_space
2025-08-30T14:16:12.2268507Z         from app.models.space import SpaceCreate
2025-08-30T14:16:12.2268932Z         from app.services.exceptions import ValidationError
2025-08-30T14:16:12.2269197Z     
2025-08-30T14:16:12.2269457Z         with patch('app.api.routes.spaces.SpaceService') as mock_service:
2025-08-30T14:16:12.2269814Z             # Make the service raise a ValidationError
2025-08-30T14:16:12.2270113Z             mock_service_instance = mock_service.return_value
2025-08-30T14:16:12.2270533Z             mock_service_instance.create_space.side_effect = ValidationError("Invalid space data")
2025-08-30T14:16:12.2270908Z     
2025-08-30T14:16:12.2271136Z             request = SpaceCreate(name="Test Space", description="Test")
2025-08-30T14:16:12.2271496Z             current_user = {"sub": "user123", "username": "testuser"}
2025-08-30T14:16:12.2271774Z     
2025-08-30T14:16:12.2271977Z             with pytest.raises(HTTPException) as exc_info:
2025-08-30T14:16:12.2272505Z >               await create_space(request, current_user, "user123")
2025-08-30T14:16:12.2272930Z E               TypeError: create_space() takes from 1 to 2 positional arguments but 3 were given
2025-08-30T14:16:12.2273231Z 
2025-08-30T14:16:12.2273368Z tests/unit/test_coverage_final_24_lines.py:42: TypeError
2025-08-30T14:16:12.2273742Z ________________ test_create_space_unknown_client_error_line_63 ________________
2025-08-30T14:16:12.2273992Z 
2025-08-30T14:16:12.2274074Z     @pytest.mark.asyncio
2025-08-30T14:16:12.2274334Z     async def test_create_space_unknown_client_error_line_63():
2025-08-30T14:16:12.2274713Z         """Test unknown ClientError handling in create_space (line 63)."""
2025-08-30T14:16:12.2275072Z         from app.api.routes.spaces import create_space
2025-08-30T14:16:12.2275364Z         from app.models.space import SpaceCreate
2025-08-30T14:16:12.2275607Z     
2025-08-30T14:16:12.2275863Z         with patch('app.api.routes.spaces.SpaceService') as mock_service:
2025-08-30T14:16:12.2276224Z             # Create a ClientError with an unknown error code
2025-08-30T14:16:12.2276541Z             mock_service_instance = mock_service.return_value
2025-08-30T14:16:12.2276938Z             error_response = {'Error': {'Code': 'UnknownError', 'Message': 'Something went wrong'}}
2025-08-30T14:16:12.2277460Z             mock_service_instance.create_space.side_effect = ClientError(error_response, 'PutItem')
2025-08-30T14:16:12.2277827Z     
2025-08-30T14:16:12.2278063Z             request = SpaceCreate(name="Test Space", description="Test")
2025-08-30T14:16:12.2278431Z             current_user = {"sub": "user123", "username": "testuser"}
2025-08-30T14:16:12.2278700Z     
2025-08-30T14:16:12.2278903Z             with pytest.raises(HTTPException) as exc_info:
2025-08-30T14:16:12.2279220Z >               await create_space(request, current_user, "user123")
2025-08-30T14:16:12.2279628Z E               TypeError: create_space() takes from 1 to 2 positional arguments but 3 were given
2025-08-30T14:16:12.2279919Z 
2025-08-30T14:16:12.2280050Z tests/unit/test_coverage_final_24_lines.py:65: TypeError
2025-08-30T14:16:12.2280553Z ___________________ test_update_user_profile_with_image_url ____________________
2025-08-30T14:16:12.2280795Z 
2025-08-30T14:16:12.2281442Z profile_update = UserProfileUpdate(full_name=None, preferred_name=None, bio='New Bio', avatar_url=None, phone_number=None, location=None, timezone=None, language=None, notification_preferences=None, privacy_settings=None, email=None)
2025-08-30T14:16:12.2282433Z current_user = {'email': 'test@example.com', 'username': 'testuser'}
2025-08-30T14:16:12.2282730Z user_id = 'user123'
2025-08-30T14:16:12.2282843Z 
2025-08-30T14:16:12.2282995Z     @router.put("/profile", response_model=UserProfileResponse)
2025-08-30T14:16:12.2283311Z     async def update_user_profile(
2025-08-30T14:16:12.2283559Z         profile_update: UserProfileUpdate,
2025-08-30T14:16:12.2283864Z         current_user: Dict[str, Any] = Depends(get_current_user),
2025-08-30T14:16:12.2284178Z         user_id: str = Depends(get_current_user_id)
2025-08-30T14:16:12.2284567Z     ) -> UserProfileResponse:
2025-08-30T14:16:12.2284778Z         """
2025-08-30T14:16:12.2284964Z         Update the current user's profile.
2025-08-30T14:16:12.2285193Z     
2025-08-30T14:16:12.2285338Z         Args:
2025-08-30T14:16:12.2285532Z             profile_update: Profile fields to update
2025-08-30T14:16:12.2285812Z             current_user: Current authenticated user
2025-08-30T14:16:12.2286070Z             user_id: Current user's ID
2025-08-30T14:16:12.2286291Z     
2025-08-30T14:16:12.2286439Z         Returns:
2025-08-30T14:16:12.2286647Z             UserProfileResponse: Updated user profile
2025-08-30T14:16:12.2286915Z     
2025-08-30T14:16:12.2287071Z         Raises:
2025-08-30T14:16:12.2287301Z             HTTPException: If update fails or validation error
2025-08-30T14:16:12.2287569Z         """
2025-08-30T14:16:12.2287801Z         # Get update data (including None values if explicitly set)
2025-08-30T14:16:12.2288162Z         update_data = profile_update.model_dump(exclude_unset=True)
2025-08-30T14:16:12.2288469Z         if not update_data:
2025-08-30T14:16:12.2288688Z             raise HTTPException(
2025-08-30T14:16:12.2288937Z                 status_code=status.HTTP_400_BAD_REQUEST,
2025-08-30T14:16:12.2289202Z                 detail="No fields to update"
2025-08-30T14:16:12.2289435Z             )
2025-08-30T14:16:12.2289594Z     
2025-08-30T14:16:12.2289737Z         try:
2025-08-30T14:16:12.2289977Z             # Sync certain fields with Cognito if they're being updated
2025-08-30T14:16:12.2290304Z             cognito_fields = ['phone_number', 'email']
2025-08-30T14:16:12.2290668Z             cognito_updates = {k: v for k, v in update_data.items() if k in cognito_fields}
2025-08-30T14:16:12.2290992Z     
2025-08-30T14:16:12.2291160Z             if cognito_updates:
2025-08-30T14:16:12.2291369Z                 try:
2025-08-30T14:16:12.2291571Z                     cognito_service = CognitoService()
2025-08-30T14:16:12.2291921Z                     cognito_service.update_user_attributes(user_id, cognito_updates)
2025-08-30T14:16:12.2292372Z                 except ClientError as e:
2025-08-30T14:16:12.2292673Z                     if e.response['Error']['Code'] == 'UserNotFoundException':
2025-08-30T14:16:12.2292988Z                         raise HTTPException(
2025-08-30T14:16:12.2293272Z                             status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
2025-08-30T14:16:12.2293609Z                             detail="Failed to sync with authentication provider"
2025-08-30T14:16:12.2293890Z                         )
2025-08-30T14:16:12.2294081Z                     raise
2025-08-30T14:16:12.2294260Z     
2025-08-30T14:16:12.2294423Z             # Update profile in DynamoDB
2025-08-30T14:16:12.2294676Z             service = UserProfileService()
2025-08-30T14:16:12.2294908Z     
2025-08-30T14:16:12.2295079Z             # Merge current user data with updates
2025-08-30T14:16:12.2295330Z             merged_data = {
2025-08-30T14:16:12.2295558Z                 "email": current_user.get("email", ""),
2025-08-30T14:16:12.2295971Z                 "username": current_user.get("username", ""),
2025-08-30T14:16:12.2296234Z                 **update_data
2025-08-30T14:16:12.2296429Z             }
2025-08-30T14:16:12.2296586Z     
2025-08-30T14:16:12.2296836Z             updated_profile = service.update_user_profile(user_id, merged_data)
2025-08-30T14:16:12.2297152Z     
2025-08-30T14:16:12.2297349Z >           return UserProfileResponse(**updated_profile)
2025-08-30T14:16:12.2297781Z E           pydantic_core._pydantic_core.ValidationError: 1 validation error for UserProfileResponse
2025-08-30T14:16:12.2298177Z E           id
2025-08-30T14:16:12.2298551Z E             Field required [type=missing, input_value={'user_id': 'user123', 'e... '2024-01-01T00:00:00Z'}, input_type=dict]
2025-08-30T14:16:12.2299105Z E               For further information visit https://errors.pydantic.dev/2.10/v/missing
2025-08-30T14:16:12.2299388Z 
2025-08-30T14:16:12.2299509Z app/api/routes/user_profile.py:146: ValidationError
2025-08-30T14:16:12.2299833Z 
2025-08-30T14:16:12.2299997Z During handling of the above exception, another exception occurred:
2025-08-30T14:16:12.2300248Z 
2025-08-30T14:16:12.2300330Z     @pytest.mark.asyncio
2025-08-30T14:16:12.2300578Z     async def test_update_user_profile_with_image_url():
2025-08-30T14:16:12.2300927Z         """Test update_user_profile with profile_image_url (line 132)."""
2025-08-30T14:16:12.2301309Z         from app.api.routes.user_profile import update_user_profile
2025-08-30T14:16:12.2301668Z         from app.models.user_profile import UserProfileUpdate
2025-08-30T14:16:12.2301939Z     
2025-08-30T14:16:12.2302445Z         with patch('app.api.routes.user_profile.UserProfileService') as mock_service:
2025-08-30T14:16:12.2302852Z             mock_service_instance = mock_service.return_value
2025-08-30T14:16:12.2303196Z             mock_service_instance.update_user_profile.return_value = {
2025-08-30T14:16:12.2303501Z                 "user_id": "user123",
2025-08-30T14:16:12.2303750Z                 "email": "test@example.com",
2025-08-30T14:16:12.2304006Z                 "username": "testuser",
2025-08-30T14:16:12.2304246Z                 "display_name": "New Name",
2025-08-30T14:16:12.2304487Z                 "bio": "New Bio",
2025-08-30T14:16:12.2304767Z                 "profile_image_url": "https://example.com/image.jpg",
2025-08-30T14:16:12.2305059Z                 "is_onboarded": True,
2025-08-30T14:16:12.2305145Z                 "is_verified": True,
2025-08-30T14:16:12.2305237Z                 "created_at": "2024-01-01T00:00:00Z",
2025-08-30T14:16:12.2305334Z                 "updated_at": "2024-01-01T00:00:00Z"
2025-08-30T14:16:12.2305399Z             }
2025-08-30T14:16:12.2305463Z     
2025-08-30T14:16:12.2305591Z             # Update with profile_image_url to trigger line 132
2025-08-30T14:16:12.2305693Z             profile_update = UserProfileUpdate(
2025-08-30T14:16:12.2305779Z                 display_name="New Name",
2025-08-30T14:16:12.2305863Z                 bio="New Bio",
2025-08-30T14:16:12.2305997Z                 profile_image_url="https://example.com/image.jpg"
2025-08-30T14:16:12.2306061Z             )
2025-08-30T14:16:12.2306224Z             current_user = {"email": "test@example.com", "username": "testuser"}
2025-08-30T14:16:12.2306286Z     
2025-08-30T14:16:12.2306477Z >           result = await update_user_profile(profile_update, current_user, "user123")
2025-08-30T14:16:12.2306482Z 
2025-08-30T14:16:12.2306592Z tests/unit/test_coverage_final_24_lines.py:119: 
2025-08-30T14:16:12.2306700Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T14:16:12.2306705Z 
2025-08-30T14:16:12.2307455Z profile_update = UserProfileUpdate(full_name=None, preferred_name=None, bio='New Bio', avatar_url=None, phone_number=None, location=None, timezone=None, language=None, notification_preferences=None, privacy_settings=None, email=None)
2025-08-30T14:16:12.2307611Z current_user = {'email': 'test@example.com', 'username': 'testuser'}
2025-08-30T14:16:12.2307822Z user_id = 'user123'
2025-08-30T14:16:12.2307828Z 
2025-08-30T14:16:12.2307975Z     @router.put("/profile", response_model=UserProfileResponse)
2025-08-30T14:16:12.2308065Z     async def update_user_profile(
2025-08-30T14:16:12.2308163Z         profile_update: UserProfileUpdate,
2025-08-30T14:16:12.2308294Z         current_user: Dict[str, Any] = Depends(get_current_user),
2025-08-30T14:16:12.2308400Z         user_id: str = Depends(get_current_user_id)
2025-08-30T14:16:12.2308486Z     ) -> UserProfileResponse:
2025-08-30T14:16:12.2308549Z         """
2025-08-30T14:16:12.2308643Z         Update the current user's profile.
2025-08-30T14:16:12.2308705Z     
2025-08-30T14:16:12.2308769Z         Args:
2025-08-30T14:16:12.2308876Z             profile_update: Profile fields to update
2025-08-30T14:16:12.2308972Z             current_user: Current authenticated user
2025-08-30T14:16:12.2309056Z             user_id: Current user's ID
2025-08-30T14:16:12.2309124Z     
2025-08-30T14:16:12.2309189Z         Returns:
2025-08-30T14:16:12.2309408Z             UserProfileResponse: Updated user profile
2025-08-30T14:16:12.2309477Z     
2025-08-30T14:16:12.2309542Z         Raises:
2025-08-30T14:16:12.2309676Z             HTTPException: If update fails or validation error
2025-08-30T14:16:12.2309739Z         """
2025-08-30T14:16:12.2309879Z         # Get update data (including None values if explicitly set)
2025-08-30T14:16:12.2310026Z         update_data = profile_update.model_dump(exclude_unset=True)
2025-08-30T14:16:12.2310103Z         if not update_data:
2025-08-30T14:16:12.2310186Z             raise HTTPException(
2025-08-30T14:16:12.2310297Z                 status_code=status.HTTP_400_BAD_REQUEST,
2025-08-30T14:16:12.2310387Z                 detail="No fields to update"
2025-08-30T14:16:12.2310449Z             )
2025-08-30T14:16:12.2310516Z     
2025-08-30T14:16:12.2310580Z         try:
2025-08-30T14:16:12.2310725Z             # Sync certain fields with Cognito if they're being updated
2025-08-30T14:16:12.2310830Z             cognito_fields = ['phone_number', 'email']
2025-08-30T14:16:12.2311019Z             cognito_updates = {k: v for k, v in update_data.items() if k in cognito_fields}
2025-08-30T14:16:12.2311089Z     
2025-08-30T14:16:12.2311168Z             if cognito_updates:
2025-08-30T14:16:12.2311234Z                 try:
2025-08-30T14:16:12.2311337Z                     cognito_service = CognitoService()
2025-08-30T14:16:12.2311506Z                     cognito_service.update_user_attributes(user_id, cognito_updates)
2025-08-30T14:16:12.2311594Z                 except ClientError as e:
2025-08-30T14:16:12.2311743Z                     if e.response['Error']['Code'] == 'UserNotFoundException':
2025-08-30T14:16:12.2311832Z                         raise HTTPException(
2025-08-30T14:16:12.2311960Z                             status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
2025-08-30T14:16:12.2312296Z                             detail="Failed to sync with authentication provider"
2025-08-30T14:16:12.2312371Z                         )
2025-08-30T14:16:12.2312457Z                     raise
2025-08-30T14:16:12.2312519Z     
2025-08-30T14:16:12.2312604Z             # Update profile in DynamoDB
2025-08-30T14:16:12.2312702Z             service = UserProfileService()
2025-08-30T14:16:12.2312765Z     
2025-08-30T14:16:12.2312867Z             # Merge current user data with updates
2025-08-30T14:16:12.2312942Z             merged_data = {
2025-08-30T14:16:12.2313041Z                 "email": current_user.get("email", ""),
2025-08-30T14:16:12.2313155Z                 "username": current_user.get("username", ""),
2025-08-30T14:16:12.2313230Z                 **update_data
2025-08-30T14:16:12.2313294Z             }
2025-08-30T14:16:12.2313362Z     
2025-08-30T14:16:12.2313532Z             updated_profile = service.update_user_profile(user_id, merged_data)
2025-08-30T14:16:12.2313592Z     
2025-08-30T14:16:12.2313711Z             return UserProfileResponse(**updated_profile)
2025-08-30T14:16:12.2313773Z     
2025-08-30T14:16:12.2313862Z         except ValueError as e:
2025-08-30T14:16:12.2314069Z >           raise HTTPException(
2025-08-30T14:16:12.2314170Z                 status_code=status.HTTP_400_BAD_REQUEST,
2025-08-30T14:16:12.2314250Z                 detail=str(e)
2025-08-30T14:16:12.2314311Z             )
2025-08-30T14:16:12.2314545Z E           fastapi.exceptions.HTTPException: 400: 1 validation error for UserProfileResponse
2025-08-30T14:16:12.2314618Z E           id
2025-08-30T14:16:12.2314892Z E             Field required [type=missing, input_value={'user_id': 'user123', 'e... '2024-01-01T00:00:00Z'}, input_type=dict]
2025-08-30T14:16:12.2315087Z E               For further information visit https://errors.pydantic.dev/2.10/v/missing
2025-08-30T14:16:12.2315099Z 
2025-08-30T14:16:12.2315215Z app/api/routes/user_profile.py:149: HTTPException
2025-08-30T14:16:12.2315452Z _____________________ test_update_user_profile_retry_logic _____________________
2025-08-30T14:16:12.2315459Z 
2025-08-30T14:16:12.2315546Z     @pytest.mark.asyncio
2025-08-30T14:16:12.2315779Z     async def test_update_user_profile_retry_logic():
2025-08-30T14:16:12.2315965Z         """Test update retry logic after conditional check failure (lines 171-173)."""
2025-08-30T14:16:12.2316123Z         from app.api.routes.user_profile import update_user_profile
2025-08-30T14:16:12.2316254Z         from app.models.user_profile import UserProfileUpdate
2025-08-30T14:16:12.2316323Z     
2025-08-30T14:16:12.2316519Z         with patch('app.api.routes.user_profile.UserProfileService') as mock_service:
2025-08-30T14:16:12.2316637Z             mock_service_instance = mock_service.return_value
2025-08-30T14:16:12.2316706Z     
2025-08-30T14:16:12.2316881Z             # First call raises ConditionalCheckFailedException, second succeeds
2025-08-30T14:16:12.2317059Z             error_response = {'Error': {'Code': 'ConditionalCheckFailedException'}}
2025-08-30T14:16:12.2317208Z             mock_service_instance.update_user_profile.side_effect = [
2025-08-30T14:16:12.2317318Z                 ClientError(error_response, 'UpdateItem'),
2025-08-30T14:16:12.2317398Z                 {
2025-08-30T14:16:12.2317485Z                     "user_id": "user123",
2025-08-30T14:16:12.2317577Z                     "email": "test@example.com",
2025-08-30T14:16:12.2317667Z                     "username": "testuser",
2025-08-30T14:16:12.2317756Z                     "display_name": "Retry Name",
2025-08-30T14:16:12.2317830Z                     "bio": None,
2025-08-30T14:16:12.2317925Z                     "profile_image_url": None,
2025-08-30T14:16:12.2318006Z                     "is_onboarded": True,
2025-08-30T14:16:12.2318086Z                     "is_verified": True,
2025-08-30T14:16:12.2318184Z                     "created_at": "2024-01-01T00:00:00Z",
2025-08-30T14:16:12.2318277Z                     "updated_at": "2024-01-01T00:00:00Z"
2025-08-30T14:16:12.2318346Z                 }
2025-08-30T14:16:12.2318408Z             ]
2025-08-30T14:16:12.2318468Z     
2025-08-30T14:16:12.2318705Z             profile_update = UserProfileUpdate(display_name="Retry Name")
2025-08-30T14:16:12.2318950Z             current_user = {"email": "test@example.com", "username": "testuser"}
2025-08-30T14:16:12.2319013Z     
2025-08-30T14:16:12.2319206Z >           result = await update_user_profile(profile_update, current_user, "user123")
2025-08-30T14:16:12.2319211Z 
2025-08-30T14:16:12.2319323Z tests/unit/test_coverage_final_24_lines.py:155: 
2025-08-30T14:16:12.2319434Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T14:16:12.2319440Z 
2025-08-30T14:16:12.2320073Z profile_update = UserProfileUpdate(full_name=None, preferred_name=None, bio=None, avatar_url=None, phone_number=None, location=None, timezone=None, language=None, notification_preferences=None, privacy_settings=None, email=None)
2025-08-30T14:16:12.2320225Z current_user = {'email': 'test@example.com', 'username': 'testuser'}
2025-08-30T14:16:12.2320298Z user_id = 'user123'
2025-08-30T14:16:12.2320303Z 
2025-08-30T14:16:12.2320458Z     @router.put("/profile", response_model=UserProfileResponse)
2025-08-30T14:16:12.2320640Z     async def update_user_profile(
2025-08-30T14:16:12.2320734Z         profile_update: UserProfileUpdate,
2025-08-30T14:16:12.2320869Z         current_user: Dict[str, Any] = Depends(get_current_user),
2025-08-30T14:16:12.2320977Z         user_id: str = Depends(get_current_user_id)
2025-08-30T14:16:12.2321060Z     ) -> UserProfileResponse:
2025-08-30T14:16:12.2321124Z         """
2025-08-30T14:16:12.2321220Z         Update the current user's profile.
2025-08-30T14:16:12.2321281Z     
2025-08-30T14:16:12.2321350Z         Args:
2025-08-30T14:16:12.2321453Z             profile_update: Profile fields to update
2025-08-30T14:16:12.2321556Z             current_user: Current authenticated user
2025-08-30T14:16:12.2321648Z             user_id: Current user's ID
2025-08-30T14:16:12.2321709Z     
2025-08-30T14:16:12.2321775Z         Returns:
2025-08-30T14:16:12.2321888Z             UserProfileResponse: Updated user profile
2025-08-30T14:16:12.2322139Z     
2025-08-30T14:16:12.2322208Z         Raises:
2025-08-30T14:16:12.2322342Z             HTTPException: If update fails or validation error
2025-08-30T14:16:12.2322405Z         """
2025-08-30T14:16:12.2322543Z         # Get update data (including None values if explicitly set)
2025-08-30T14:16:12.2322688Z         update_data = profile_update.model_dump(exclude_unset=True)
2025-08-30T14:16:12.2322765Z         if not update_data:
2025-08-30T14:16:12.2322852Z >           raise HTTPException(
2025-08-30T14:16:12.2322957Z                 status_code=status.HTTP_400_BAD_REQUEST,
2025-08-30T14:16:12.2323048Z                 detail="No fields to update"
2025-08-30T14:16:12.2323118Z             )
2025-08-30T14:16:12.2323277Z E           fastapi.exceptions.HTTPException: 400: No fields to update
2025-08-30T14:16:12.2323282Z 
2025-08-30T14:16:12.2323395Z app/api/routes/user_profile.py:112: HTTPException
2025-08-30T14:16:12.2323564Z __________________ test_update_user_profile_generic_exception __________________
2025-08-30T14:16:12.2323579Z 
2025-08-30T14:16:12.2323657Z     @pytest.mark.asyncio
2025-08-30T14:16:12.2323792Z     async def test_update_user_profile_generic_exception():
2025-08-30T14:16:12.2323912Z         """Test generic exception handling (lines 179-181)."""
2025-08-30T14:16:12.2324062Z         from app.api.routes.user_profile import update_user_profile
2025-08-30T14:16:12.2324206Z         from app.models.user_profile import UserProfileUpdate
2025-08-30T14:16:12.2324267Z     
2025-08-30T14:16:12.2324472Z         with patch('app.api.routes.user_profile.UserProfileService') as mock_service:
2025-08-30T14:16:12.2324596Z             mock_service_instance = mock_service.return_value
2025-08-30T14:16:12.2324749Z             # Raise a generic exception (not HTTPException or ClientError)
2025-08-30T14:16:12.2324983Z             mock_service_instance.update_user_profile.side_effect = Exception("Unexpected error")
2025-08-30T14:16:12.2325047Z     
2025-08-30T14:16:12.2325183Z             profile_update = UserProfileUpdate(display_name="Test")
2025-08-30T14:16:12.2325348Z             current_user = {"email": "test@example.com", "username": "testuser"}
2025-08-30T14:16:12.2325411Z     
2025-08-30T14:16:12.2325524Z             with pytest.raises(HTTPException) as exc_info:
2025-08-30T14:16:12.2325698Z                 await update_user_profile(profile_update, current_user, "user123")
2025-08-30T14:16:12.2325763Z     
2025-08-30T14:16:12.2325871Z >           assert exc_info.value.status_code == 500
2025-08-30T14:16:12.2325967Z E           AssertionError: assert 400 == 500
2025-08-30T14:16:12.2326184Z E            +  where 400 = HTTPException(status_code=400, detail='No fields to update').status_code
2025-08-30T14:16:12.2326625Z E            +    where HTTPException(status_code=400, detail='No fields to update') = <ExceptionInfo HTTPException(status_code=400, detail='No fields to update') tblen=2>.value
2025-08-30T14:16:12.2326631Z 
2025-08-30T14:16:12.2326782Z tests/unit/test_coverage_final_24_lines.py:180: AssertionError
2025-08-30T14:16:12.2327062Z ___________________________ test_settings_validators ___________________________
2025-08-30T14:16:12.2327067Z 
2025-08-30T14:16:12.2327154Z     def test_settings_validators():
2025-08-30T14:16:12.2327271Z         """Test Settings validator methods (lines 106-109)."""
2025-08-30T14:16:12.2327373Z         from app.core.config import Settings
2025-08-30T14:16:12.2327436Z     
2025-08-30T14:16:12.2327527Z         # Test with environment variables
2025-08-30T14:16:12.2327622Z         with patch.dict(os.environ, {
2025-08-30T14:16:12.2327786Z             'CORS_ORIGINS': '["http://localhost:3000", "http://example.com"]',
2025-08-30T14:16:12.2327908Z             'COGNITO_DOMAIN': 'https://auth.example.com',
2025-08-30T14:16:12.2328052Z             'COGNITO_REDIRECT_URI': 'http://localhost:3000/callback'
2025-08-30T14:16:12.2328117Z         }):
2025-08-30T14:16:12.2328207Z             settings = Settings()
2025-08-30T14:16:12.2328415Z             assert settings.cors_origins == ["http://localhost:3000", "http://example.com"]
2025-08-30T14:16:12.2328726Z >           assert settings.cognito_domain == 'https://auth.example.com'
2025-08-30T14:16:12.2328737Z 
2025-08-30T14:16:12.2328850Z tests/unit/test_coverage_final_24_lines.py:272: 
2025-08-30T14:16:12.2328956Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T14:16:12.2328961Z 
2025-08-30T14:16:12.2329640Z self = Settings(environment='test', debug=True, aws_region='us-east-1', dynamodb_table='lifestyle-spaces-test', api_v1_prefix...calhost:3000", "http://example.com"]', cors_allow_credentials=True, cors_allow_methods=['*'], cors_allow_headers=['*'])
2025-08-30T14:16:12.2329721Z item = 'cognito_domain'
2025-08-30T14:16:12.2329726Z 
2025-08-30T14:16:12.2329828Z     def __getattr__(self, item: str) -> Any:
2025-08-30T14:16:12.2330021Z         private_attributes = object.__getattribute__(self, '__private_attributes__')
2025-08-30T14:16:12.2330113Z         if item in private_attributes:
2025-08-30T14:16:12.2330224Z             attribute = private_attributes[item]
2025-08-30T14:16:12.2330314Z             if hasattr(attribute, '__get__'):
2025-08-30T14:16:12.2330456Z                 return attribute.__get__(self, type(self))  # type: ignore
2025-08-30T14:16:12.2330525Z     
2025-08-30T14:16:12.2330590Z             try:
2025-08-30T14:16:12.2330809Z                 # Note: self.__pydantic_private__ cannot be None if self.__private_attributes__ has items
2025-08-30T14:16:12.2330945Z                 return self.__pydantic_private__[item]  # type: ignore
2025-08-30T14:16:12.2331026Z             except KeyError as exc:
2025-08-30T14:16:12.2331256Z                 raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc
2025-08-30T14:16:12.2331322Z         else:
2025-08-30T14:16:12.2331516Z             # `__pydantic_extra__` can fail to be set if the model is not yet fully initialized.
2025-08-30T14:16:12.2331632Z             # See `BaseModel.__repr_args__` for more details
2025-08-30T14:16:12.2331703Z             try:
2025-08-30T14:16:12.2331868Z                 pydantic_extra = object.__getattribute__(self, '__pydantic_extra__')
2025-08-30T14:16:12.2331957Z             except AttributeError:
2025-08-30T14:16:12.2332135Z                 pydantic_extra = None
2025-08-30T14:16:12.2332204Z     
2025-08-30T14:16:12.2332284Z             if pydantic_extra:
2025-08-30T14:16:12.2332351Z                 try:
2025-08-30T14:16:12.2332447Z                     return pydantic_extra[item]
2025-08-30T14:16:12.2332529Z                 except KeyError as exc:
2025-08-30T14:16:12.2332754Z                     raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc
2025-08-30T14:16:12.2332828Z             else:
2025-08-30T14:16:12.2332917Z                 if hasattr(self.__class__, item):
2025-08-30T14:16:12.2333121Z                     return super().__getattribute__(item)  # Raises AttributeError if appropriate
2025-08-30T14:16:12.2333189Z                 else:
2025-08-30T14:16:12.2333400Z                     # this is the current error
2025-08-30T14:16:12.2333608Z >                   raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
2025-08-30T14:16:12.2333785Z E                   AttributeError: 'Settings' object has no attribute 'cognito_domain'
2025-08-30T14:16:12.2333791Z 
2025-08-30T14:16:12.2334091Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/pydantic/main.py:891: AttributeError
2025-08-30T14:16:12.2334252Z _____________________ test_get_current_user_no_auth_header _____________________
2025-08-30T14:16:12.2334257Z 
2025-08-30T14:16:12.2334334Z     @pytest.mark.asyncio
2025-08-30T14:16:12.2334452Z     async def test_get_current_user_no_auth_header():
2025-08-30T14:16:12.2334608Z         """Test get_current_user with no authorization header (line 25)."""
2025-08-30T14:16:12.2334734Z         from app.core.dependencies import get_current_user
2025-08-30T14:16:12.2334803Z     
2025-08-30T14:16:12.2335026Z         # Create mock request with no authorization header
2025-08-30T14:16:12.2335116Z         mock_request = MagicMock()
2025-08-30T14:16:12.2335241Z         mock_request.headers = {}  # No authorization header
2025-08-30T14:16:12.2335304Z     
2025-08-30T14:16:12.2335423Z         with pytest.raises(HTTPException) as exc_info:
2025-08-30T14:16:12.2335514Z >           await get_current_user(mock_request)
2025-08-30T14:16:12.2335675Z E           TypeError: object MagicMock can't be used in 'await' expression
2025-08-30T14:16:12.2335681Z 
2025-08-30T14:16:12.2335826Z tests/unit/test_coverage_final_24_lines.py:287: TypeError
2025-08-30T14:16:12.2335967Z _________________________ test_leave_space_not_member __________________________
2025-08-30T14:16:12.2335973Z 
2025-08-30T14:16:12.2336062Z     def test_leave_space_not_member():
2025-08-30T14:16:12.2336196Z         """Test leave_space when user is not a member (line 394)."""
2025-08-30T14:16:12.2336303Z         from app.services.space import SpaceService
2025-08-30T14:16:12.2336450Z         from app.services.exceptions import UnauthorizedError
2025-08-30T14:16:12.2336512Z     
2025-08-30T14:16:12.2336668Z         with patch('app.services.space.boto3.resource') as mock_boto:
2025-08-30T14:16:12.2336761Z             mock_dynamodb = MagicMock()
2025-08-30T14:16:12.2336843Z             mock_table = MagicMock()
2025-08-30T14:16:12.2336910Z     
2025-08-30T14:16:12.2337006Z             mock_boto.return_value = mock_dynamodb
2025-08-30T14:16:12.2337115Z             mock_dynamodb.Table.return_value = mock_table
2025-08-30T14:16:12.2337181Z     
2025-08-30T14:16:12.2337293Z             # Mock get_item to return None (user not a member)
2025-08-30T14:16:12.2337387Z             mock_table.get_item.return_value = {}
2025-08-30T14:16:12.2337456Z     
2025-08-30T14:16:12.2337539Z             service = SpaceService()
2025-08-30T14:16:12.2337624Z             service.table = mock_table
2025-08-30T14:16:12.2337693Z     
2025-08-30T14:16:12.2337814Z             with pytest.raises(UnauthorizedError) as exc_info:
2025-08-30T14:16:12.2337932Z >               service.leave_space("space123", "user123")
2025-08-30T14:16:12.2338112Z E               AttributeError: 'SpaceService' object has no attribute 'leave_space'
2025-08-30T14:16:12.2338117Z 
2025-08-30T14:16:12.2338267Z tests/unit/test_coverage_final_24_lines.py:314: AttributeError
2025-08-30T14:16:12.2338425Z _____________________ test_get_space_invitations_no_items ______________________
2025-08-30T14:16:12.2338430Z 
2025-08-30T14:16:12.2338528Z     def test_get_space_invitations_no_items():
2025-08-30T14:16:12.2338669Z         """Test get_space_invitations with no items (lines 453-454)."""
2025-08-30T14:16:12.2338782Z         from app.services.space import SpaceService
2025-08-30T14:16:12.2338845Z     
2025-08-30T14:16:12.2339004Z         with patch('app.services.space.boto3.resource') as mock_boto:
2025-08-30T14:16:12.2339092Z             mock_dynamodb = MagicMock()
2025-08-30T14:16:12.2339172Z             mock_table = MagicMock()
2025-08-30T14:16:12.2339329Z     
2025-08-30T14:16:12.2339425Z             mock_boto.return_value = mock_dynamodb
2025-08-30T14:16:12.2339536Z             mock_dynamodb.Table.return_value = mock_table
2025-08-30T14:16:12.2339604Z     
2025-08-30T14:16:12.2339690Z             # Mock query to return no items
2025-08-30T14:16:12.2339822Z             mock_table.query.return_value = {}  # No 'Items' key
2025-08-30T14:16:12.2339884Z     
2025-08-30T14:16:12.2339966Z             service = SpaceService()
2025-08-30T14:16:12.2340055Z             service.table = mock_table
2025-08-30T14:16:12.2340117Z     
2025-08-30T14:16:12.2340233Z >           result = service.get_space_invitations("space123")
2025-08-30T14:16:12.2340450Z E           AttributeError: 'SpaceService' object has no attribute 'get_space_invitations'
2025-08-30T14:16:12.2340456Z 
2025-08-30T14:16:12.2340601Z tests/unit/test_coverage_final_24_lines.py:337: AttributeError
2025-08-30T14:16:12.2340764Z _______________ test_join_space_with_invite_invalid_code_format ________________
2025-08-30T14:16:12.2340856Z 
2025-08-30T14:16:12.2340979Z     def test_join_space_with_invite_invalid_code_format():
2025-08-30T14:16:12.2341135Z         """Test join_space_with_invite_code with invalid code (line 508)."""
2025-08-30T14:16:12.2341248Z         from app.services.space import SpaceService
2025-08-30T14:16:12.2341404Z         from app.services.exceptions import InvalidInviteCodeError
2025-08-30T14:16:12.2341468Z     
2025-08-30T14:16:12.2341627Z         with patch('app.services.space.boto3.resource') as mock_boto:
2025-08-30T14:16:12.2341711Z             mock_dynamodb = MagicMock()
2025-08-30T14:16:12.2341793Z             mock_table = MagicMock()
2025-08-30T14:16:12.2341855Z     
2025-08-30T14:16:12.2341946Z             mock_boto.return_value = mock_dynamodb
2025-08-30T14:16:12.2342155Z             mock_dynamodb.Table.return_value = mock_table
2025-08-30T14:16:12.2342218Z     
2025-08-30T14:16:12.2342337Z             # Mock query to return no items (invalid invite code)
2025-08-30T14:16:12.2342459Z             mock_table.query.return_value = {'Items': []}
2025-08-30T14:16:12.2342519Z     
2025-08-30T14:16:12.2342600Z             service = SpaceService()
2025-08-30T14:16:12.2342688Z             service.table = mock_table
2025-08-30T14:16:12.2342748Z     
2025-08-30T14:16:12.2342896Z             with pytest.raises(InvalidInviteCodeError) as exc_info:
2025-08-30T14:16:12.2343047Z                 service.join_space_with_invite_code("user123", "invalid_code")
2025-08-30T14:16:12.2343107Z     
2025-08-30T14:16:12.2343259Z >           assert str(exc_info.value) == "Invalid or expired invite code"
2025-08-30T14:16:12.2343455Z E           AssertionError: assert 'Invalid invite code' == 'Invalid or e...d invite code'
2025-08-30T14:16:12.2343551Z E             - Invalid or expired invite code
2025-08-30T14:16:12.2343641Z E             ?         -----------
2025-08-30T14:16:12.2343718Z E             + Invalid invite code
2025-08-30T14:16:12.2343722Z 
2025-08-30T14:16:12.2343879Z tests/unit/test_coverage_final_24_lines.py:364: AssertionError
2025-08-30T14:16:12.2344035Z ______________________ test_create_space_validation_error ______________________
2025-08-30T14:16:12.2344040Z 
2025-08-30T14:16:12.2344118Z     @pytest.mark.asyncio
2025-08-30T14:16:12.2344231Z     async def test_create_space_validation_error():
2025-08-30T14:16:12.2344376Z         """Test validation error handling in create_space (line 53)."""
2025-08-30T14:16:12.2344479Z         from app.api.routes.spaces import router
2025-08-30T14:16:12.2344546Z     
2025-08-30T14:16:12.2344713Z         with patch('app.api.routes.spaces.SpaceService') as mock_service:
2025-08-30T14:16:12.2344823Z             # Mock the service to raise a ValidationError
2025-08-30T14:16:12.2344939Z             mock_service_instance = mock_service.return_value
2025-08-30T14:16:12.2345165Z             mock_service_instance.create_space.side_effect = ValidationError.from_exception_data(
2025-08-30T14:16:12.2345248Z                 "validation_error",
2025-08-30T14:16:12.2345436Z                 [
2025-08-30T14:16:12.2345504Z                     {
2025-08-30T14:16:12.2345594Z                         "type": "value_error",
2025-08-30T14:16:12.2345674Z                         "loc": ("field",),
2025-08-30T14:16:12.2345764Z                         "msg": "Invalid value",
2025-08-30T14:16:12.2345847Z                         "input": "bad_value",
2025-08-30T14:16:12.2345937Z                         "ctx": {"error": "test error"}
2025-08-30T14:16:12.2346011Z                     }
2025-08-30T14:16:12.2346074Z                 ]
2025-08-30T14:16:12.2346137Z             )
2025-08-30T14:16:12.2346203Z     
2025-08-30T14:16:12.2346319Z             from app.api.routes.spaces import create_space
2025-08-30T14:16:12.2346422Z             from app.models.space import SpaceCreate
2025-08-30T14:16:12.2346490Z     
2025-08-30T14:16:12.2346640Z             request = SpaceCreate(name="Test Space", description="Test")
2025-08-30T14:16:12.2346771Z             current_user = {"sub": "user123", "username": "testuser"}
2025-08-30T14:16:12.2346959Z     
2025-08-30T14:16:12.2347072Z             with pytest.raises(HTTPException) as exc_info:
2025-08-30T14:16:12.2347204Z >               await create_space(request, current_user, "user123")
2025-08-30T14:16:12.2347412Z E               TypeError: create_space() takes from 1 to 2 positional arguments but 3 were given
2025-08-30T14:16:12.2347418Z 
2025-08-30T14:16:12.2347550Z tests/unit/test_coverage_final_29_lines.py:55: TypeError
2025-08-30T14:16:12.2347711Z ____________________ test_create_space_generic_client_error ____________________
2025-08-30T14:16:12.2347715Z 
2025-08-30T14:16:12.2347793Z     @pytest.mark.asyncio
2025-08-30T14:16:12.2347915Z     async def test_create_space_generic_client_error():
2025-08-30T14:16:12.2348070Z         """Test generic ClientError handling in create_space (line 63)."""
2025-08-30T14:16:12.2348182Z         from app.api.routes.spaces import create_space
2025-08-30T14:16:12.2348291Z         from app.models.space import SpaceCreate
2025-08-30T14:16:12.2348362Z     
2025-08-30T14:16:12.2348529Z         with patch('app.api.routes.spaces.SpaceService') as mock_service:
2025-08-30T14:16:12.2348647Z             # Mock the service to raise a generic ClientError
2025-08-30T14:16:12.2348759Z             mock_service_instance = mock_service.return_value
2025-08-30T14:16:12.2348843Z             error_response = {
2025-08-30T14:16:12.2348916Z                 'Error': {
2025-08-30T14:16:12.2349037Z                     'Code': 'SomeOtherError',  # Not ServiceUnavailable
2025-08-30T14:16:12.2349135Z                     'Message': 'Some error occurred'
2025-08-30T14:16:12.2349199Z                 }
2025-08-30T14:16:12.2349261Z             }
2025-08-30T14:16:12.2349420Z             mock_service_instance.create_space.side_effect = ClientError(
2025-08-30T14:16:12.2349501Z                 error_response,
2025-08-30T14:16:12.2349579Z                 'PutItem'
2025-08-30T14:16:12.2349647Z             )
2025-08-30T14:16:12.2349708Z     
2025-08-30T14:16:12.2349868Z             request = SpaceCreate(name="Test Space", description="Test")
2025-08-30T14:16:12.2349995Z             current_user = {"sub": "user123", "username": "testuser"}
2025-08-30T14:16:12.2350059Z     
2025-08-30T14:16:12.2350176Z             with pytest.raises(HTTPException) as exc_info:
2025-08-30T14:16:12.2350303Z >               await create_space(request, current_user, "user123")
2025-08-30T14:16:12.2350507Z E               TypeError: create_space() takes from 1 to 2 positional arguments but 3 were given
2025-08-30T14:16:12.2350519Z 
2025-08-30T14:16:12.2350655Z tests/unit/test_coverage_final_29_lines.py:84: TypeError
2025-08-30T14:16:12.2350810Z __________________ test_get_user_profile_cognito_sync_failure __________________
2025-08-30T14:16:12.2350815Z 
2025-08-30T14:16:12.2350939Z current_user = {'sub': 'user123'}, user_id = 'user123'
2025-08-30T14:16:12.2350944Z 
2025-08-30T14:16:12.2351094Z     @router.get("/profile", response_model=UserProfileResponse)
2025-08-30T14:16:12.2351271Z     async def get_user_profile(
2025-08-30T14:16:12.2351411Z         current_user: Dict[str, Any] = Depends(get_current_user),
2025-08-30T14:16:12.2351511Z         user_id: str = Depends(get_current_user_id)
2025-08-30T14:16:12.2351605Z     ) -> UserProfileResponse:
2025-08-30T14:16:12.2351666Z         """
2025-08-30T14:16:12.2351818Z         Get the current user's profile.
2025-08-30T14:16:12.2351953Z     
2025-08-30T14:16:12.2352183Z         Args:
2025-08-30T14:16:12.2352376Z             current_user: Current authenticated user
2025-08-30T14:16:12.2352498Z             user_id: Current user's ID
2025-08-30T14:16:12.2352799Z     
2025-08-30T14:16:12.2352934Z         Returns:
2025-08-30T14:16:12.2353069Z             UserProfileResponse: User profile data
2025-08-30T14:16:12.2353200Z     
2025-08-30T14:16:12.2353297Z         Raises:
2025-08-30T14:16:12.2353533Z             HTTPException: If profile not found or database error
2025-08-30T14:16:12.2353645Z         """
2025-08-30T14:16:12.2353881Z         try:
2025-08-30T14:16:12.2354050Z             service = UserProfileService()
2025-08-30T14:16:12.2354195Z             profile = service.get_user_profile(user_id)
2025-08-30T14:16:12.2354288Z     
2025-08-30T14:16:12.2354470Z             if profile is None:
2025-08-30T14:16:12.2354744Z                 # Check if we should return 404 (test scenario where profile truly doesn't exist)
2025-08-30T14:16:12.2354938Z                 # In tests, when the mock returns None, it means the user doesn't exist
2025-08-30T14:16:12.2355090Z                 raise HTTPException(
2025-08-30T14:16:12.2355222Z                     status_code=status.HTTP_404_NOT_FOUND,
2025-08-30T14:16:12.2355370Z                     detail="User profile not found"
2025-08-30T14:16:12.2355518Z                 )
2025-08-30T14:16:12.2355627Z     
2025-08-30T14:16:12.2355783Z             # Sync with Cognito if needed
2025-08-30T14:16:12.2355880Z             try:
2025-08-30T14:16:12.2356009Z                 cognito_service = CognitoService()
2025-08-30T14:16:12.2356232Z                 cognito_attrs = cognito_service.get_user_attributes(user_id)
2025-08-30T14:16:12.2356445Z                 # Update profile with Cognito attributes
2025-08-30T14:16:12.2356621Z                 if cognito_attrs.get("email"):
2025-08-30T14:16:12.2356759Z                     profile["email"] = cognito_attrs["email"]
2025-08-30T14:16:12.2356916Z                 if cognito_attrs.get("email_verified") is not None:
2025-08-30T14:16:12.2357119Z                     profile["is_verified"] = cognito_attrs["email_verified"]
2025-08-30T14:16:12.2357216Z             except Exception:
2025-08-30T14:16:12.2357388Z                 # Don't fail if Cognito sync fails
2025-08-30T14:16:12.2357544Z                 pass
2025-08-30T14:16:12.2357638Z     
2025-08-30T14:16:12.2357810Z >           return UserProfileResponse(**profile)
2025-08-30T14:16:12.2358092Z E           pydantic_core._pydantic_core.ValidationError: 2 validation errors for UserProfileResponse
2025-08-30T14:16:12.2358181Z E           id
2025-08-30T14:16:12.2358622Z E             Field required [type=missing, input_value={'user_id': 'user123', 'e... '2024-01-01T00:00:00Z'}, input_type=dict]
2025-08-30T14:16:12.2409741Z E               For further information visit https://errors.pydantic.dev/2.10/v/missing
2025-08-30T14:16:12.2409930Z E           username
2025-08-30T14:16:12.2410359Z E             Field required [type=missing, input_value={'user_id': 'user123', 'e... '2024-01-01T00:00:00Z'}, input_type=dict]
2025-08-30T14:16:12.2410685Z E               For further information visit https://errors.pydantic.dev/2.10/v/missing
2025-08-30T14:16:12.2410694Z 
2025-08-30T14:16:12.2410876Z app/api/routes/user_profile.py:67: ValidationError
2025-08-30T14:16:12.2410885Z 
2025-08-30T14:16:12.2411164Z During handling of the above exception, another exception occurred:
2025-08-30T14:16:12.2411176Z 
2025-08-30T14:16:12.2411269Z     @pytest.mark.asyncio
2025-08-30T14:16:12.2411404Z     async def test_get_user_profile_cognito_sync_failure():
2025-08-30T14:16:12.2411769Z         """Test Cognito sync failure handling (lines 64-66)."""
2025-08-30T14:16:12.2411913Z         from app.api.routes.user_profile import get_user_profile
2025-08-30T14:16:12.2411975Z     
2025-08-30T14:16:12.2412493Z         with patch('app.api.routes.user_profile.UserProfileService') as mock_profile_service, \
2025-08-30T14:16:12.2412674Z              patch('app.api.routes.user_profile.CognitoService') as mock_cognito:
2025-08-30T14:16:12.2412737Z     
2025-08-30T14:16:12.2412840Z             # Mock profile service to return a profile
2025-08-30T14:16:12.2413000Z             mock_profile_service_instance = mock_profile_service.return_value
2025-08-30T14:16:12.2413157Z             mock_profile_service_instance.get_user_profile.return_value = {
2025-08-30T14:16:12.2413239Z                 "user_id": "user123",
2025-08-30T14:16:12.2413327Z                 "email": "test@example.com",
2025-08-30T14:16:12.2413413Z                 "display_name": "Test User",
2025-08-30T14:16:12.2413617Z                 "bio": "Test bio",
2025-08-30T14:16:12.2413710Z                 "profile_image_url": None,
2025-08-30T14:16:12.2413788Z                 "is_onboarded": True,
2025-08-30T14:16:12.2413863Z                 "is_verified": False,
2025-08-30T14:16:12.2413954Z                 "created_at": "2024-01-01T00:00:00Z",
2025-08-30T14:16:12.2414040Z                 "updated_at": "2024-01-01T00:00:00Z"
2025-08-30T14:16:12.2414102Z             }
2025-08-30T14:16:12.2414167Z     
2025-08-30T14:16:12.2414281Z             # Mock Cognito to raise an exception during sync
2025-08-30T14:16:12.2414398Z             mock_cognito_instance = mock_cognito.return_value
2025-08-30T14:16:12.2414616Z             mock_cognito_instance.get_user_attributes.side_effect = Exception("Cognito error")
2025-08-30T14:16:12.2414675Z     
2025-08-30T14:16:12.2414777Z             # Should not raise, just skip Cognito sync
2025-08-30T14:16:12.2414923Z >           result = await get_user_profile({"sub": "user123"}, "user123")
2025-08-30T14:16:12.2414937Z 
2025-08-30T14:16:12.2415052Z tests/unit/test_coverage_final_29_lines.py:135: 
2025-08-30T14:16:12.2415164Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T14:16:12.2415170Z 
2025-08-30T14:16:12.2415284Z current_user = {'sub': 'user123'}, user_id = 'user123'
2025-08-30T14:16:12.2415289Z 
2025-08-30T14:16:12.2415440Z     @router.get("/profile", response_model=UserProfileResponse)
2025-08-30T14:16:12.2415521Z     async def get_user_profile(
2025-08-30T14:16:12.2415660Z         current_user: Dict[str, Any] = Depends(get_current_user),
2025-08-30T14:16:12.2415762Z         user_id: str = Depends(get_current_user_id)
2025-08-30T14:16:12.2415850Z     ) -> UserProfileResponse:
2025-08-30T14:16:12.2415911Z         """
2025-08-30T14:16:12.2415999Z         Get the current user's profile.
2025-08-30T14:16:12.2416058Z     
2025-08-30T14:16:12.2416120Z         Args:
2025-08-30T14:16:12.2416225Z             current_user: Current authenticated user
2025-08-30T14:16:12.2416315Z             user_id: Current user's ID
2025-08-30T14:16:12.2416377Z     
2025-08-30T14:16:12.2416440Z         Returns:
2025-08-30T14:16:12.2416540Z             UserProfileResponse: User profile data
2025-08-30T14:16:12.2416601Z     
2025-08-30T14:16:12.2416662Z         Raises:
2025-08-30T14:16:12.2416793Z             HTTPException: If profile not found or database error
2025-08-30T14:16:12.2416856Z         """
2025-08-30T14:16:12.2416918Z         try:
2025-08-30T14:16:12.2417008Z             service = UserProfileService()
2025-08-30T14:16:12.2417115Z             profile = service.get_user_profile(user_id)
2025-08-30T14:16:12.2417178Z     
2025-08-30T14:16:12.2417258Z             if profile is None:
2025-08-30T14:16:12.2417455Z                 # Check if we should return 404 (test scenario where profile truly doesn't exist)
2025-08-30T14:16:12.2417619Z                 # In tests, when the mock returns None, it means the user doesn't exist
2025-08-30T14:16:12.2417709Z                 raise HTTPException(
2025-08-30T14:16:12.2417935Z                     status_code=status.HTTP_404_NOT_FOUND,
2025-08-30T14:16:12.2418030Z                     detail="User profile not found"
2025-08-30T14:16:12.2418101Z                 )
2025-08-30T14:16:12.2418163Z     
2025-08-30T14:16:12.2418249Z             # Sync with Cognito if needed
2025-08-30T14:16:12.2418321Z             try:
2025-08-30T14:16:12.2418417Z                 cognito_service = CognitoService()
2025-08-30T14:16:12.2418573Z                 cognito_attrs = cognito_service.get_user_attributes(user_id)
2025-08-30T14:16:12.2418681Z                 # Update profile with Cognito attributes
2025-08-30T14:16:12.2418777Z                 if cognito_attrs.get("email"):
2025-08-30T14:16:12.2418887Z                     profile["email"] = cognito_attrs["email"]
2025-08-30T14:16:12.2419010Z                 if cognito_attrs.get("email_verified") is not None:
2025-08-30T14:16:12.2419147Z                     profile["is_verified"] = cognito_attrs["email_verified"]
2025-08-30T14:16:12.2419328Z             except Exception:
2025-08-30T14:16:12.2419417Z                 # Don't fail if Cognito sync fails
2025-08-30T14:16:12.2419494Z                 pass
2025-08-30T14:16:12.2419558Z     
2025-08-30T14:16:12.2419663Z             return UserProfileResponse(**profile)
2025-08-30T14:16:12.2419734Z     
2025-08-30T14:16:12.2419819Z         except ClientError as e:
2025-08-30T14:16:12.2419975Z             if e.response['Error']['Code'] == 'ResourceNotFoundException':
2025-08-30T14:16:12.2420062Z                 raise HTTPException(
2025-08-30T14:16:12.2420182Z                     status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
2025-08-30T14:16:12.2420291Z                     detail="Failed to retrieve user profile"
2025-08-30T14:16:12.2420367Z                 )
2025-08-30T14:16:12.2420449Z             raise HTTPException(
2025-08-30T14:16:12.2420577Z                 status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
2025-08-30T14:16:12.2420679Z                 detail="Failed to retrieve user profile"
2025-08-30T14:16:12.2420752Z             )
2025-08-30T14:16:12.2420842Z         except HTTPException:
2025-08-30T14:16:12.2420908Z             raise
2025-08-30T14:16:12.2420988Z         except Exception as e:
2025-08-30T14:16:12.2421138Z             logger.error(f"Error retrieving user profile: {str(e)}")
2025-08-30T14:16:12.2421219Z >           raise HTTPException(
2025-08-30T14:16:12.2421337Z                 status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
2025-08-30T14:16:12.2421446Z                 detail="Failed to retrieve user profile"
2025-08-30T14:16:12.2421510Z             )
2025-08-30T14:16:12.2421721Z E           fastapi.exceptions.HTTPException: 500: Failed to retrieve user profile
2025-08-30T14:16:12.2421726Z 
2025-08-30T14:16:12.2421842Z app/api/routes/user_profile.py:83: HTTPException
2025-08-30T14:16:12.2421998Z ------------------------------ Captured log call -------------------------------
2025-08-30T14:16:12.2422533Z ERROR    app.api.routes.user_profile:user_profile.py:82 Error retrieving user profile: 2 validation errors for UserProfileResponse
2025-08-30T14:16:12.2422617Z id
2025-08-30T14:16:12.2422900Z   Field required [type=missing, input_value={'user_id': 'user123', 'e... '2024-01-01T00:00:00Z'}, input_type=dict]
2025-08-30T14:16:12.2423098Z     For further information visit https://errors.pydantic.dev/2.10/v/missing
2025-08-30T14:16:12.2423165Z username
2025-08-30T14:16:12.2423423Z   Field required [type=missing, input_value={'user_id': 'user123', 'e... '2024-01-01T00:00:00Z'}, input_type=dict]
2025-08-30T14:16:12.2423607Z     For further information visit https://errors.pydantic.dev/2.10/v/missing
2025-08-30T14:16:12.2423768Z ____________________ test_update_user_profile_dependencies _____________________
2025-08-30T14:16:12.2423779Z 
2025-08-30T14:16:12.2423886Z     def test_update_user_profile_dependencies():
2025-08-30T14:16:12.2424044Z         """Test update_user_profile dependency injection (lines 91-92)."""
2025-08-30T14:16:12.2424165Z         from app.api.routes.user_profile import router
2025-08-30T14:16:12.2424356Z     
2025-08-30T14:16:12.2424453Z         # Get the update_user_profile endpoint
2025-08-30T14:16:12.2424540Z         update_endpoint = None
2025-08-30T14:16:12.2424624Z         for route in router.routes:
2025-08-30T14:16:12.2424906Z             if hasattr(route, 'path') and route.path == "/profile" and hasattr(route, 'methods') and "PUT" in route.methods:
2025-08-30T14:16:12.2425010Z                 update_endpoint = route.endpoint
2025-08-30T14:16:12.2425079Z                 break
2025-08-30T14:16:12.2425146Z     
2025-08-30T14:16:12.2425237Z >       assert update_endpoint is not None
2025-08-30T14:16:12.2425316Z E       assert None is not None
2025-08-30T14:16:12.2425321Z 
2025-08-30T14:16:12.2425485Z tests/unit/test_coverage_final_29_lines.py:153: AssertionError
2025-08-30T14:16:12.2425644Z _____________________ test_update_user_profile_merged_data _____________________
2025-08-30T14:16:12.2425649Z 
2025-08-30T14:16:12.2426297Z profile_update = UserProfileUpdate(full_name=None, preferred_name=None, bio='New Bio', avatar_url=None, phone_number=None, location=None, timezone=None, language=None, notification_preferences=None, privacy_settings=None, email=None)
2025-08-30T14:16:12.2426579Z current_user = {'email': 'test@example.com', 'username': 'testuser'}
2025-08-30T14:16:12.2426647Z user_id = 'user123'
2025-08-30T14:16:12.2426652Z 
2025-08-30T14:16:12.2426807Z     @router.put("/profile", response_model=UserProfileResponse)
2025-08-30T14:16:12.2426889Z     async def update_user_profile(
2025-08-30T14:16:12.2426985Z         profile_update: UserProfileUpdate,
2025-08-30T14:16:12.2427128Z         current_user: Dict[str, Any] = Depends(get_current_user),
2025-08-30T14:16:12.2427231Z         user_id: str = Depends(get_current_user_id)
2025-08-30T14:16:12.2427328Z     ) -> UserProfileResponse:
2025-08-30T14:16:12.2427392Z         """
2025-08-30T14:16:12.2427479Z         Update the current user's profile.
2025-08-30T14:16:12.2427547Z     
2025-08-30T14:16:12.2427623Z         Args:
2025-08-30T14:16:12.2427728Z             profile_update: Profile fields to update
2025-08-30T14:16:12.2427835Z             current_user: Current authenticated user
2025-08-30T14:16:12.2427920Z             user_id: Current user's ID
2025-08-30T14:16:12.2427981Z     
2025-08-30T14:16:12.2428055Z         Returns:
2025-08-30T14:16:12.2428169Z             UserProfileResponse: Updated user profile
2025-08-30T14:16:12.2428239Z     
2025-08-30T14:16:12.2428304Z         Raises:
2025-08-30T14:16:12.2428431Z             HTTPException: If update fails or validation error
2025-08-30T14:16:12.2428503Z         """
2025-08-30T14:16:12.2428648Z         # Get update data (including None values if explicitly set)
2025-08-30T14:16:12.2428787Z         update_data = profile_update.model_dump(exclude_unset=True)
2025-08-30T14:16:12.2428873Z         if not update_data:
2025-08-30T14:16:12.2428958Z             raise HTTPException(
2025-08-30T14:16:12.2429062Z                 status_code=status.HTTP_400_BAD_REQUEST,
2025-08-30T14:16:12.2429168Z                 detail="No fields to update"
2025-08-30T14:16:12.2429237Z             )
2025-08-30T14:16:12.2429315Z     
2025-08-30T14:16:12.2429384Z         try:
2025-08-30T14:16:12.2429527Z             # Sync certain fields with Cognito if they're being updated
2025-08-30T14:16:12.2429637Z             cognito_fields = ['phone_number', 'email']
2025-08-30T14:16:12.2429824Z             cognito_updates = {k: v for k, v in update_data.items() if k in cognito_fields}
2025-08-30T14:16:12.2429887Z     
2025-08-30T14:16:12.2429975Z             if cognito_updates:
2025-08-30T14:16:12.2430044Z                 try:
2025-08-30T14:16:12.2430142Z                     cognito_service = CognitoService()
2025-08-30T14:16:12.2430324Z                     cognito_service.update_user_attributes(user_id, cognito_updates)
2025-08-30T14:16:12.2430414Z                 except ClientError as e:
2025-08-30T14:16:12.2430563Z                     if e.response['Error']['Code'] == 'UserNotFoundException':
2025-08-30T14:16:12.2430742Z                         raise HTTPException(
2025-08-30T14:16:12.2430868Z                             status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
2025-08-30T14:16:12.2431007Z                             detail="Failed to sync with authentication provider"
2025-08-30T14:16:12.2431080Z                         )
2025-08-30T14:16:12.2431151Z                     raise
2025-08-30T14:16:12.2431224Z     
2025-08-30T14:16:12.2431312Z             # Update profile in DynamoDB
2025-08-30T14:16:12.2431411Z             service = UserProfileService()
2025-08-30T14:16:12.2431474Z     
2025-08-30T14:16:12.2431572Z             # Merge current user data with updates
2025-08-30T14:16:12.2431653Z             merged_data = {
2025-08-30T14:16:12.2431755Z                 "email": current_user.get("email", ""),
2025-08-30T14:16:12.2431866Z                 "username": current_user.get("username", ""),
2025-08-30T14:16:12.2431951Z                 **update_data
2025-08-30T14:16:12.2432171Z             }
2025-08-30T14:16:12.2432409Z     
2025-08-30T14:16:12.2432600Z             updated_profile = service.update_user_profile(user_id, merged_data)
2025-08-30T14:16:12.2432663Z     
2025-08-30T14:16:12.2432787Z >           return UserProfileResponse(**updated_profile)
2025-08-30T14:16:12.2433049Z E           pydantic_core._pydantic_core.ValidationError: 1 validation error for UserProfileResponse
2025-08-30T14:16:12.2433117Z E           id
2025-08-30T14:16:12.2433397Z E             Field required [type=missing, input_value={'user_id': 'user123', 'e... '2024-01-01T00:00:00Z'}, input_type=dict]
2025-08-30T14:16:12.2433599Z E               For further information visit https://errors.pydantic.dev/2.10/v/missing
2025-08-30T14:16:12.2433605Z 
2025-08-30T14:16:12.2433728Z app/api/routes/user_profile.py:146: ValidationError
2025-08-30T14:16:12.2433740Z 
2025-08-30T14:16:12.2433910Z During handling of the above exception, another exception occurred:
2025-08-30T14:16:12.2433916Z 
2025-08-30T14:16:12.2433999Z     @pytest.mark.asyncio
2025-08-30T14:16:12.2434134Z     async def test_update_user_profile_merged_data():
2025-08-30T14:16:12.2434303Z         """Test merged data handling in update_user_profile (lines 138-139)."""
2025-08-30T14:16:12.2434453Z         from app.api.routes.user_profile import update_user_profile
2025-08-30T14:16:12.2434595Z         from app.models.user_profile import UserProfileUpdate
2025-08-30T14:16:12.2434658Z     
2025-08-30T14:16:12.2434866Z         with patch('app.api.routes.user_profile.UserProfileService') as mock_service:
2025-08-30T14:16:12.2434985Z             mock_service_instance = mock_service.return_value
2025-08-30T14:16:12.2435047Z     
2025-08-30T14:16:12.2435161Z             # Mock the update to capture the merged data
2025-08-30T14:16:12.2435251Z             merged_data_captured = None
2025-08-30T14:16:12.2435349Z             def capture_merged_data(user_id, data):
2025-08-30T14:16:12.2435448Z                 nonlocal merged_data_captured
2025-08-30T14:16:12.2435535Z                 merged_data_captured = data
2025-08-30T14:16:12.2435616Z                 return {
2025-08-30T14:16:12.2435700Z                     "user_id": user_id,
2025-08-30T14:16:12.2435788Z                     "email": data.get("email"),
2025-08-30T14:16:12.2435890Z                     "username": data.get("username"),
2025-08-30T14:16:12.2435993Z                     "display_name": data.get("display_name"),
2025-08-30T14:16:12.2436073Z                     "bio": data.get("bio"),
2025-08-30T14:16:12.2436169Z                     "profile_image_url": None,
2025-08-30T14:16:12.2436252Z                     "is_onboarded": True,
2025-08-30T14:16:12.2436332Z                     "is_verified": True,
2025-08-30T14:16:12.2436432Z                     "created_at": "2024-01-01T00:00:00Z",
2025-08-30T14:16:12.2436522Z                     "updated_at": "2024-01-01T00:00:00Z"
2025-08-30T14:16:12.2436591Z                 }
2025-08-30T14:16:12.2436652Z     
2025-08-30T14:16:12.2436847Z             mock_service_instance.update_user_profile.side_effect = capture_merged_data
2025-08-30T14:16:12.2437032Z     
2025-08-30T14:16:12.2437226Z             profile_update = UserProfileUpdate(display_name="New Name", bio="New Bio")
2025-08-30T14:16:12.2437383Z             current_user = {"email": "test@example.com", "username": "testuser"}
2025-08-30T14:16:12.2437451Z     
2025-08-30T14:16:12.2437633Z >           result = await update_user_profile(profile_update, current_user, "user123")
2025-08-30T14:16:12.2437638Z 
2025-08-30T14:16:12.2437755Z tests/unit/test_coverage_final_29_lines.py:197: 
2025-08-30T14:16:12.2437864Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T14:16:12.2437869Z 
2025-08-30T14:16:12.2438516Z profile_update = UserProfileUpdate(full_name=None, preferred_name=None, bio='New Bio', avatar_url=None, phone_number=None, location=None, timezone=None, language=None, notification_preferences=None, privacy_settings=None, email=None)
2025-08-30T14:16:12.2438678Z current_user = {'email': 'test@example.com', 'username': 'testuser'}
2025-08-30T14:16:12.2438834Z user_id = 'user123'
2025-08-30T14:16:12.2438840Z 
2025-08-30T14:16:12.2438999Z     @router.put("/profile", response_model=UserProfileResponse)
2025-08-30T14:16:12.2439087Z     async def update_user_profile(
2025-08-30T14:16:12.2439182Z         profile_update: UserProfileUpdate,
2025-08-30T14:16:12.2439324Z         current_user: Dict[str, Any] = Depends(get_current_user),
2025-08-30T14:16:12.2439426Z         user_id: str = Depends(get_current_user_id)
2025-08-30T14:16:12.2439514Z     ) -> UserProfileResponse:
2025-08-30T14:16:12.2439585Z         """
2025-08-30T14:16:12.2439675Z         Update the current user's profile.
2025-08-30T14:16:12.2439740Z     
2025-08-30T14:16:12.2439811Z         Args:
2025-08-30T14:16:12.2439916Z             profile_update: Profile fields to update
2025-08-30T14:16:12.2440022Z             current_user: Current authenticated user
2025-08-30T14:16:12.2440106Z             user_id: Current user's ID
2025-08-30T14:16:12.2440177Z     
2025-08-30T14:16:12.2440249Z         Returns:
2025-08-30T14:16:12.2440356Z             UserProfileResponse: Updated user profile
2025-08-30T14:16:12.2440421Z     
2025-08-30T14:16:12.2440495Z         Raises:
2025-08-30T14:16:12.2440622Z             HTTPException: If update fails or validation error
2025-08-30T14:16:12.2440686Z         """
2025-08-30T14:16:12.2440833Z         # Get update data (including None values if explicitly set)
2025-08-30T14:16:12.2440973Z         update_data = profile_update.model_dump(exclude_unset=True)
2025-08-30T14:16:12.2441056Z         if not update_data:
2025-08-30T14:16:12.2441141Z             raise HTTPException(
2025-08-30T14:16:12.2441245Z                 status_code=status.HTTP_400_BAD_REQUEST,
2025-08-30T14:16:12.2441342Z                 detail="No fields to update"
2025-08-30T14:16:12.2441405Z             )
2025-08-30T14:16:12.2441467Z     
2025-08-30T14:16:12.2441538Z         try:
2025-08-30T14:16:12.2441684Z             # Sync certain fields with Cognito if they're being updated
2025-08-30T14:16:12.2441795Z             cognito_fields = ['phone_number', 'email']
2025-08-30T14:16:12.2441982Z             cognito_updates = {k: v for k, v in update_data.items() if k in cognito_fields}
2025-08-30T14:16:12.2442225Z     
2025-08-30T14:16:12.2442342Z             if cognito_updates:
2025-08-30T14:16:12.2442416Z                 try:
2025-08-30T14:16:12.2442516Z                     cognito_service = CognitoService()
2025-08-30T14:16:12.2442685Z                     cognito_service.update_user_attributes(user_id, cognito_updates)
2025-08-30T14:16:12.2442779Z                 except ClientError as e:
2025-08-30T14:16:12.2442920Z                     if e.response['Error']['Code'] == 'UserNotFoundException':
2025-08-30T14:16:12.2443008Z                         raise HTTPException(
2025-08-30T14:16:12.2443135Z                             status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
2025-08-30T14:16:12.2443269Z                             detail="Failed to sync with authentication provider"
2025-08-30T14:16:12.2443483Z                         )
2025-08-30T14:16:12.2443554Z                     raise
2025-08-30T14:16:12.2443623Z     
2025-08-30T14:16:12.2443722Z             # Update profile in DynamoDB
2025-08-30T14:16:12.2443822Z             service = UserProfileService()
2025-08-30T14:16:12.2443884Z     
2025-08-30T14:16:12.2443986Z             # Merge current user data with updates
2025-08-30T14:16:12.2444060Z             merged_data = {
2025-08-30T14:16:12.2444159Z                 "email": current_user.get("email", ""),
2025-08-30T14:16:12.2444271Z                 "username": current_user.get("username", ""),
2025-08-30T14:16:12.2444347Z                 **update_data
2025-08-30T14:16:12.2444416Z             }
2025-08-30T14:16:12.2444482Z     
2025-08-30T14:16:12.2444651Z             updated_profile = service.update_user_profile(user_id, merged_data)
2025-08-30T14:16:12.2444719Z     
2025-08-30T14:16:12.2444837Z             return UserProfileResponse(**updated_profile)
2025-08-30T14:16:12.2445013Z     
2025-08-30T14:16:12.2445102Z         except ValueError as e:
2025-08-30T14:16:12.2445185Z >           raise HTTPException(
2025-08-30T14:16:12.2445290Z                 status_code=status.HTTP_400_BAD_REQUEST,
2025-08-30T14:16:12.2445363Z                 detail=str(e)
2025-08-30T14:16:12.2445429Z             )
2025-08-30T14:16:12.2445661Z E           fastapi.exceptions.HTTPException: 400: 1 validation error for UserProfileResponse
2025-08-30T14:16:12.2445729Z E           id
2025-08-30T14:16:12.2446000Z E             Field required [type=missing, input_value={'user_id': 'user123', 'e... '2024-01-01T00:00:00Z'}, input_type=dict]
2025-08-30T14:16:12.2446205Z E               For further information visit https://errors.pydantic.dev/2.10/v/missing
2025-08-30T14:16:12.2446211Z 
2025-08-30T14:16:12.2446328Z app/api/routes/user_profile.py:149: HTTPException
2025-08-30T14:16:12.2446488Z ___________________ test_update_user_profile_generic_failure ___________________
2025-08-30T14:16:12.2446503Z 
2025-08-30T14:16:12.2446586Z     @pytest.mark.asyncio
2025-08-30T14:16:12.2446710Z     async def test_update_user_profile_generic_failure():
2025-08-30T14:16:12.2446871Z         """Test generic failure in update_user_profile (lines 175-176)."""
2025-08-30T14:16:12.2447018Z         from app.api.routes.user_profile import update_user_profile
2025-08-30T14:16:12.2447152Z         from app.models.user_profile import UserProfileUpdate
2025-08-30T14:16:12.2447220Z     
2025-08-30T14:16:12.2447419Z         with patch('app.api.routes.user_profile.UserProfileService') as mock_service:
2025-08-30T14:16:12.2447537Z             mock_service_instance = mock_service.return_value
2025-08-30T14:16:12.2447604Z     
2025-08-30T14:16:12.2447747Z             # Create a ClientError that doesn't match any special cases
2025-08-30T14:16:12.2447881Z             error_response = {'Error': {'Code': 'InternalError'}}
2025-08-30T14:16:12.2448056Z             mock_service_instance.update_user_profile.side_effect = ClientError(
2025-08-30T14:16:12.2448143Z                 error_response,
2025-08-30T14:16:12.2448224Z                 'UpdateItem'
2025-08-30T14:16:12.2448285Z             )
2025-08-30T14:16:12.2448345Z     
2025-08-30T14:16:12.2448497Z             profile_update = UserProfileUpdate(display_name="New Name")
2025-08-30T14:16:12.2448646Z             current_user = {"email": "test@example.com", "username": "testuser"}
2025-08-30T14:16:12.2448712Z     
2025-08-30T14:16:12.2448826Z             with pytest.raises(HTTPException) as exc_info:
2025-08-30T14:16:12.2448902Z                 import asyncio
2025-08-30T14:16:12.2449097Z >               asyncio.run(update_user_profile(profile_update, current_user, "user123"))
2025-08-30T14:16:12.2449103Z 
2025-08-30T14:16:12.2449214Z tests/unit/test_coverage_final_29_lines.py:229: 
2025-08-30T14:16:12.2449320Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T14:16:12.2449325Z 
2025-08-30T14:16:12.2449478Z main = <coroutine object update_user_profile at 0x7fdf375e1a80>
2025-08-30T14:16:12.2449571Z 
2025-08-30T14:16:12.2449655Z     def run(main, *, debug=None):
2025-08-30T14:16:12.2449768Z         """Execute the coroutine and return the result.
2025-08-30T14:16:12.2449829Z     
2025-08-30T14:16:12.2449958Z         This function runs the passed coroutine, taking care of
2025-08-30T14:16:12.2450110Z         managing the asyncio event loop and finalizing asynchronous
2025-08-30T14:16:12.2450178Z         generators.
2025-08-30T14:16:12.2450238Z     
2025-08-30T14:16:12.2450403Z         This function cannot be called when another asyncio event loop is
2025-08-30T14:16:12.2450485Z         running in the same thread.
2025-08-30T14:16:12.2450554Z     
2025-08-30T14:16:12.2450683Z         If debug is True, the event loop will be run in debug mode.
2025-08-30T14:16:12.2450744Z     
2025-08-30T14:16:12.2450922Z         This function always creates a new event loop and closes it at the end.
2025-08-30T14:16:12.2451081Z         It should be used as a main entry point for asyncio programs, and should
2025-08-30T14:16:12.2451248Z         ideally only be called once.
2025-08-30T14:16:12.2451315Z     
2025-08-30T14:16:12.2451380Z         Example:
2025-08-30T14:16:12.2451441Z     
2025-08-30T14:16:12.2451523Z             async def main():
2025-08-30T14:16:12.2451608Z                 await asyncio.sleep(1)
2025-08-30T14:16:12.2451689Z                 print('hello')
2025-08-30T14:16:12.2451750Z     
2025-08-30T14:16:12.2451827Z             asyncio.run(main())
2025-08-30T14:16:12.2451895Z         """
2025-08-30T14:16:12.2451994Z         if events._get_running_loop() is not None:
2025-08-30T14:16:12.2452316Z             # fail fast with short traceback
2025-08-30T14:16:12.2452405Z >           raise RuntimeError(
2025-08-30T14:16:12.2452548Z                 "asyncio.run() cannot be called from a running event loop")
2025-08-30T14:16:12.2452728Z E           RuntimeError: asyncio.run() cannot be called from a running event loop
2025-08-30T14:16:12.2452740Z 
2025-08-30T14:16:12.2453001Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/asyncio/runners.py:186: RuntimeError
2025-08-30T14:16:12.2453165Z ____________________ test_complete_onboarding_with_metadata ____________________
2025-08-30T14:16:12.2453170Z 
2025-08-30T14:16:12.2453493Z request = OnboardingCompleteRequest(completion_source=None, time_to_complete=None, skipped_optional_steps=None)
2025-08-30T14:16:12.2453644Z current_user = {'email': 'test@example.com'}, user_id = 'user123'
2025-08-30T14:16:12.2453649Z 
2025-08-30T14:16:12.2453839Z     @router.post("/onboarding/complete", response_model=UserProfileResponse)
2025-08-30T14:16:12.2453933Z     async def complete_onboarding(
2025-08-30T14:16:12.2454070Z         request: Optional[OnboardingCompleteRequest] = None,
2025-08-30T14:16:12.2454211Z         current_user: Dict[str, Any] = Depends(get_current_user),
2025-08-30T14:16:12.2454311Z         user_id: str = Depends(get_current_user_id)
2025-08-30T14:16:12.2454400Z     ) -> UserProfileResponse:
2025-08-30T14:16:12.2454469Z         """
2025-08-30T14:16:12.2454570Z         Mark user onboarding as completed.
2025-08-30T14:16:12.2454632Z     
2025-08-30T14:16:12.2454702Z         Args:
2025-08-30T14:16:12.2454819Z             request: Optional onboarding completion metadata
2025-08-30T14:16:12.2454931Z             current_user: Current authenticated user
2025-08-30T14:16:12.2455017Z             user_id: Current user's ID
2025-08-30T14:16:12.2455083Z     
2025-08-30T14:16:12.2455148Z         Returns:
2025-08-30T14:16:12.2455329Z             UserProfileResponse: Updated user profile with onboarding completed
2025-08-30T14:16:12.2455395Z     
2025-08-30T14:16:12.2455459Z         Raises:
2025-08-30T14:16:12.2455574Z             HTTPException: If onboarding completion fails
2025-08-30T14:16:12.2455637Z         """
2025-08-30T14:16:12.2455701Z         try:
2025-08-30T14:16:12.2455802Z             service = UserProfileService()
2025-08-30T14:16:12.2455862Z     
2025-08-30T14:16:12.2455949Z             # Prepare metadata if provided
2025-08-30T14:16:12.2456159Z             metadata = None
2025-08-30T14:16:12.2456230Z             if request:
2025-08-30T14:16:12.2456349Z                 metadata = request.model_dump(exclude_none=True)
2025-08-30T14:16:12.2456415Z     
2025-08-30T14:16:12.2456577Z             updated_profile = service.complete_onboarding(user_id, metadata)
2025-08-30T14:16:12.2456643Z     
2025-08-30T14:16:12.2456728Z             if updated_profile is None:
2025-08-30T14:16:12.2456811Z                 raise HTTPException(
2025-08-30T14:16:12.2456918Z                     status_code=status.HTTP_404_NOT_FOUND,
2025-08-30T14:16:12.2457004Z                     detail="User not found"
2025-08-30T14:16:12.2457067Z                 )
2025-08-30T14:16:12.2457134Z     
2025-08-30T14:16:12.2457229Z             # Send welcome email (non-blocking)
2025-08-30T14:16:12.2457294Z             try:
2025-08-30T14:16:12.2457391Z                 email_service = EmailService()
2025-08-30T14:16:12.2457555Z                 user_email = updated_profile.get("email", current_user.get("email"))
2025-08-30T14:16:12.2457783Z                 if user_email:
2025-08-30T14:16:12.2457916Z                     email_service.send_welcome_email(user_email, user_id)
2025-08-30T14:16:12.2457998Z             except Exception as e:
2025-08-30T14:16:12.2458102Z                 # Log error but don't block the response
2025-08-30T14:16:12.2458236Z                 logger.error(f"Failed to send welcome email: {str(e)}")
2025-08-30T14:16:12.2458299Z     
2025-08-30T14:16:12.2458416Z >           return UserProfileResponse(**updated_profile)
2025-08-30T14:16:12.2458666Z E           pydantic_core._pydantic_core.ValidationError: 2 validation errors for UserProfileResponse
2025-08-30T14:16:12.2458733Z E           id
2025-08-30T14:16:12.2459011Z E             Field required [type=missing, input_value={'user_id': 'user123', 'e... '2024-01-01T00:00:00Z'}, input_type=dict]
2025-08-30T14:16:12.2459210Z E               For further information visit https://errors.pydantic.dev/2.10/v/missing
2025-08-30T14:16:12.2459293Z E           username
2025-08-30T14:16:12.2459556Z E             Field required [type=missing, input_value={'user_id': 'user123', 'e... '2024-01-01T00:00:00Z'}, input_type=dict]
2025-08-30T14:16:12.2459746Z E               For further information visit https://errors.pydantic.dev/2.10/v/missing
2025-08-30T14:16:12.2459752Z 
2025-08-30T14:16:12.2459877Z app/api/routes/user_profile.py:233: ValidationError
2025-08-30T14:16:12.2459921Z 
2025-08-30T14:16:12.2460088Z During handling of the above exception, another exception occurred:
2025-08-30T14:16:12.2460094Z 
2025-08-30T14:16:12.2460179Z     @pytest.mark.asyncio
2025-08-30T14:16:12.2460298Z     async def test_complete_onboarding_with_metadata():
2025-08-30T14:16:12.2460438Z         """Test complete_onboarding with metadata (lines 213-214)."""
2025-08-30T14:16:12.2460589Z         from app.api.routes.user_profile import complete_onboarding
2025-08-30T14:16:12.2460741Z         from app.models.user_profile import OnboardingCompleteRequest
2025-08-30T14:16:12.2460819Z     
2025-08-30T14:16:12.2461027Z         with patch('app.api.routes.user_profile.UserProfileService') as mock_service, \
2025-08-30T14:16:12.2461190Z              patch('app.api.routes.user_profile.EmailService') as mock_email:
2025-08-30T14:16:12.2461256Z     
2025-08-30T14:16:12.2461374Z             mock_service_instance = mock_service.return_value
2025-08-30T14:16:12.2461435Z     
2025-08-30T14:16:12.2461544Z             # Capture the metadata passed to the service
2025-08-30T14:16:12.2461625Z             metadata_captured = None
2025-08-30T14:16:12.2461726Z             def capture_metadata(user_id, metadata):
2025-08-30T14:16:12.2461820Z                 nonlocal metadata_captured
2025-08-30T14:16:12.2461907Z                 metadata_captured = metadata
2025-08-30T14:16:12.2461983Z                 return {
2025-08-30T14:16:12.2462226Z                     "user_id": user_id,
2025-08-30T14:16:12.2462323Z                     "email": "test@example.com",
2025-08-30T14:16:12.2462420Z                     "display_name": "Test User",
2025-08-30T14:16:12.2462629Z                     "bio": None,
2025-08-30T14:16:12.2462717Z                     "profile_image_url": None,
2025-08-30T14:16:12.2462804Z                     "is_onboarded": True,
2025-08-30T14:16:12.2462884Z                     "is_verified": True,
2025-08-30T14:16:12.2462975Z                     "created_at": "2024-01-01T00:00:00Z",
2025-08-30T14:16:12.2463070Z                     "updated_at": "2024-01-01T00:00:00Z"
2025-08-30T14:16:12.2463134Z                 }
2025-08-30T14:16:12.2463205Z     
2025-08-30T14:16:12.2463395Z             mock_service_instance.complete_onboarding.side_effect = capture_metadata
2025-08-30T14:16:12.2463456Z     
2025-08-30T14:16:12.2463550Z             # Provide request with metadata
2025-08-30T14:16:12.2463651Z             request = OnboardingCompleteRequest(
2025-08-30T14:16:12.2463742Z                 referral_source="social_media",
2025-08-30T14:16:12.2463842Z                 interests=["fitness", "nutrition"]
2025-08-30T14:16:12.2464019Z             )
2025-08-30T14:16:12.2464131Z             current_user = {"email": "test@example.com"}
2025-08-30T14:16:12.2464191Z     
2025-08-30T14:16:12.2464358Z >           result = await complete_onboarding(request, current_user, "user123")
2025-08-30T14:16:12.2464363Z 
2025-08-30T14:16:12.2464473Z tests/unit/test_coverage_final_29_lines.py:273: 
2025-08-30T14:16:12.2464579Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T14:16:12.2464584Z 
2025-08-30T14:16:12.2464903Z request = OnboardingCompleteRequest(completion_source=None, time_to_complete=None, skipped_optional_steps=None)
2025-08-30T14:16:12.2465054Z current_user = {'email': 'test@example.com'}, user_id = 'user123'
2025-08-30T14:16:12.2465059Z 
2025-08-30T14:16:12.2465245Z     @router.post("/onboarding/complete", response_model=UserProfileResponse)
2025-08-30T14:16:12.2465342Z     async def complete_onboarding(
2025-08-30T14:16:12.2465474Z         request: Optional[OnboardingCompleteRequest] = None,
2025-08-30T14:16:12.2465619Z         current_user: Dict[str, Any] = Depends(get_current_user),
2025-08-30T14:16:12.2465722Z         user_id: str = Depends(get_current_user_id)
2025-08-30T14:16:12.2465808Z     ) -> UserProfileResponse:
2025-08-30T14:16:12.2465878Z         """
2025-08-30T14:16:12.2465969Z         Mark user onboarding as completed.
2025-08-30T14:16:12.2466031Z     
2025-08-30T14:16:12.2466099Z         Args:
2025-08-30T14:16:12.2466216Z             request: Optional onboarding completion metadata
2025-08-30T14:16:12.2466317Z             current_user: Current authenticated user
2025-08-30T14:16:12.2466407Z             user_id: Current user's ID
2025-08-30T14:16:12.2466468Z     
2025-08-30T14:16:12.2466533Z         Returns:
2025-08-30T14:16:12.2466722Z             UserProfileResponse: Updated user profile with onboarding completed
2025-08-30T14:16:12.2466784Z     
2025-08-30T14:16:12.2466849Z         Raises:
2025-08-30T14:16:12.2466965Z             HTTPException: If onboarding completion fails
2025-08-30T14:16:12.2467037Z         """
2025-08-30T14:16:12.2467106Z         try:
2025-08-30T14:16:12.2467198Z             service = UserProfileService()
2025-08-30T14:16:12.2467260Z     
2025-08-30T14:16:12.2467350Z             # Prepare metadata if provided
2025-08-30T14:16:12.2467424Z             metadata = None
2025-08-30T14:16:12.2467495Z             if request:
2025-08-30T14:16:12.2467619Z                 metadata = request.model_dump(exclude_none=True)
2025-08-30T14:16:12.2467680Z     
2025-08-30T14:16:12.2467842Z             updated_profile = service.complete_onboarding(user_id, metadata)
2025-08-30T14:16:12.2467909Z     
2025-08-30T14:16:12.2467992Z             if updated_profile is None:
2025-08-30T14:16:12.2468079Z                 raise HTTPException(
2025-08-30T14:16:12.2468180Z                     status_code=status.HTTP_404_NOT_FOUND,
2025-08-30T14:16:12.2468265Z                     detail="User not found"
2025-08-30T14:16:12.2468332Z                 )
2025-08-30T14:16:12.2468485Z     
2025-08-30T14:16:12.2468579Z             # Send welcome email (non-blocking)
2025-08-30T14:16:12.2468647Z             try:
2025-08-30T14:16:12.2468738Z                 email_service = EmailService()
2025-08-30T14:16:12.2468902Z                 user_email = updated_profile.get("email", current_user.get("email"))
2025-08-30T14:16:12.2468980Z                 if user_email:
2025-08-30T14:16:12.2469112Z                     email_service.send_welcome_email(user_email, user_id)
2025-08-30T14:16:12.2469200Z             except Exception as e:
2025-08-30T14:16:12.2469297Z                 # Log error but don't block the response
2025-08-30T14:16:12.2469432Z                 logger.error(f"Failed to send welcome email: {str(e)}")
2025-08-30T14:16:12.2469498Z     
2025-08-30T14:16:12.2469609Z             return UserProfileResponse(**updated_profile)
2025-08-30T14:16:12.2469669Z     
2025-08-30T14:16:12.2469755Z         except ValueError as e:
2025-08-30T14:16:12.2469836Z >           raise HTTPException(
2025-08-30T14:16:12.2470019Z                 status_code=status.HTTP_400_BAD_REQUEST,
2025-08-30T14:16:12.2470098Z                 detail=str(e)
2025-08-30T14:16:12.2470160Z             )
2025-08-30T14:16:12.2470399Z E           fastapi.exceptions.HTTPException: 400: 2 validation errors for UserProfileResponse
2025-08-30T14:16:12.2470463Z E           id
2025-08-30T14:16:12.2470736Z E             Field required [type=missing, input_value={'user_id': 'user123', 'e... '2024-01-01T00:00:00Z'}, input_type=dict]
2025-08-30T14:16:12.2470936Z E               For further information visit https://errors.pydantic.dev/2.10/v/missing
2025-08-30T14:16:12.2471004Z E           username
2025-08-30T14:16:12.2471265Z E             Field required [type=missing, input_value={'user_id': 'user123', 'e... '2024-01-01T00:00:00Z'}, input_type=dict]
2025-08-30T14:16:12.2471458Z E               For further information visit https://errors.pydantic.dev/2.10/v/missing
2025-08-30T14:16:12.2471464Z 
2025-08-30T14:16:12.2471580Z app/api/routes/user_profile.py:236: HTTPException
2025-08-30T14:16:12.2471745Z ______________________ test_get_current_user_return_value ______________________
2025-08-30T14:16:12.2471750Z 
2025-08-30T14:16:12.2471827Z     @pytest.mark.asyncio
2025-08-30T14:16:12.2471933Z     async def test_get_current_user_return_value():
2025-08-30T14:16:12.2472231Z         """Test get_current_user return value (line 31)."""
2025-08-30T14:16:12.2472391Z         from app.core.dependencies import get_current_user
2025-08-30T14:16:12.2472488Z         from unittest.mock import AsyncMock
2025-08-30T14:16:12.2472551Z     
2025-08-30T14:16:12.2472660Z         # Create a mock request with valid authorization
2025-08-30T14:16:12.2472746Z         mock_request = MagicMock()
2025-08-30T14:16:12.2473394Z         mock_request.headers = {"authorization": "***"}
2025-08-30T14:16:12.2473465Z     
2025-08-30T14:16:12.2473631Z >       with patch('app.core.dependencies.verify_token') as mock_verify:
2025-08-30T14:16:12.2473637Z 
2025-08-30T14:16:12.2473764Z tests/unit/test_coverage_final_29_lines.py:392: 
2025-08-30T14:16:12.2473879Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T14:16:12.2474123Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1446: in __enter__
2025-08-30T14:16:12.2474216Z     original, local = self.get_original()
2025-08-30T14:16:12.2474324Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T14:16:12.2474329Z 
2025-08-30T14:16:12.2474454Z self = <unittest.mock._patch object at 0x7fdf2f99ad10>
2025-08-30T14:16:12.2474459Z 
2025-08-30T14:16:12.2474546Z     def get_original(self):
2025-08-30T14:16:12.2474626Z         target = self.getter()
2025-08-30T14:16:12.2474704Z         name = self.attribute
2025-08-30T14:16:12.2474773Z     
2025-08-30T14:16:12.2474850Z         original = DEFAULT
2025-08-30T14:16:12.2474920Z         local = False
2025-08-30T14:16:12.2474988Z     
2025-08-30T14:16:12.2475053Z         try:
2025-08-30T14:16:12.2475291Z             original = target.__dict__[name]
2025-08-30T14:16:12.2475385Z         except (AttributeError, KeyError):
2025-08-30T14:16:12.2475490Z             original = getattr(target, name, DEFAULT)
2025-08-30T14:16:12.2475562Z         else:
2025-08-30T14:16:12.2475633Z             local = True
2025-08-30T14:16:12.2475695Z     
2025-08-30T14:16:12.2475847Z         if name in _builtins and isinstance(target, ModuleType):
2025-08-30T14:16:12.2475925Z             self.create = True
2025-08-30T14:16:12.2475987Z     
2025-08-30T14:16:12.2476100Z         if not self.create and original is DEFAULT:
2025-08-30T14:16:12.2476187Z >           raise AttributeError(
2025-08-30T14:16:12.2476322Z                 "%s does not have the attribute %r" % (target, name)
2025-08-30T14:16:12.2476389Z             )
2025-08-30T14:16:12.2476983Z E           AttributeError: <module 'app.core.dependencies' from '/home/runner/work/lifestyle-spaces/lifestyle-spaces/backend/app/core/dependencies.py'> does not have the attribute 'verify_token'
2025-08-30T14:16:12.2477098Z 
2025-08-30T14:16:12.2477364Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1419: AttributeError
2025-08-30T14:16:12.2477534Z _________________ test_space_service_create_space_batch_writer _________________
2025-08-30T14:16:12.2477540Z 
2025-08-30T14:16:12.2477667Z     def test_space_service_create_space_batch_writer():
2025-08-30T14:16:12.2477801Z         """Test create_space batch writer execution (line 126)."""
2025-08-30T14:16:12.2477911Z         from app.services.space import SpaceService
2025-08-30T14:16:12.2478007Z         from unittest.mock import MagicMock
2025-08-30T14:16:12.2478071Z     
2025-08-30T14:16:12.2478227Z         with patch('app.services.space.boto3.resource') as mock_boto:
2025-08-30T14:16:12.2478314Z             # Setup mock DynamoDB
2025-08-30T14:16:12.2478403Z             mock_dynamodb = MagicMock()
2025-08-30T14:16:12.2478492Z             mock_table = MagicMock()
2025-08-30T14:16:12.2478577Z             mock_batch_writer = MagicMock()
2025-08-30T14:16:12.2478649Z     
2025-08-30T14:16:12.2478752Z             mock_boto.return_value = mock_dynamodb
2025-08-30T14:16:12.2478871Z             mock_dynamodb.Table.return_value = mock_table
2025-08-30T14:16:12.2478934Z     
2025-08-30T14:16:12.2479026Z             # Track batch writer calls
2025-08-30T14:16:12.2479105Z             batch_items = []
2025-08-30T14:16:12.2479169Z     
2025-08-30T14:16:12.2479260Z             class MockBatchWriter:
2025-08-30T14:16:12.2479339Z                 def __enter__(self):
2025-08-30T14:16:12.2479416Z                     return self
2025-08-30T14:16:12.2479486Z     
2025-08-30T14:16:12.2479597Z                 def __exit__(self, exc_type, exc_val, exc_tb):
2025-08-30T14:16:12.2479674Z                     pass
2025-08-30T14:16:12.2479735Z     
2025-08-30T14:16:12.2479821Z                 def put_item(self, Item):
2025-08-30T14:16:12.2479917Z                     batch_items.append(Item)
2025-08-30T14:16:12.2479980Z     
2025-08-30T14:16:12.2480130Z             mock_table.batch_writer.return_value = MockBatchWriter()
2025-08-30T14:16:12.2480196Z     
2025-08-30T14:16:12.2480277Z             service = SpaceService()
2025-08-30T14:16:12.2480361Z             service.table = mock_table
2025-08-30T14:16:12.2480429Z     
2025-08-30T14:16:12.2480505Z             # Create a space
2025-08-30T14:16:12.2480700Z >           result = service.create_space("user123", "Test Space", "Description", True)
2025-08-30T14:16:12.2480705Z 
2025-08-30T14:16:12.2480815Z tests/unit/test_coverage_final_29_lines.py:440: 
2025-08-30T14:16:12.2480924Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T14:16:12.2480929Z 
2025-08-30T14:16:12.2481098Z self = <app.services.space.SpaceService object at 0x7fdf344b6950>
2025-08-30T14:16:12.2481260Z space = 'user123', owner_id = 'Test Space', owner_email = 'Description'
2025-08-30T14:16:12.2481336Z owner_username = True
2025-08-30T14:16:12.2481346Z 
2025-08-30T14:16:12.2481486Z     def create_space(self, space: SpaceCreate, owner_id: str,
2025-08-30T14:16:12.2481737Z                     owner_email: str = "", owner_username: str = "") -> Dict[str, Any]:
2025-08-30T14:16:12.2481862Z         """Create a new space with invite code generation."""
2025-08-30T14:16:12.2481938Z         # Validate input
2025-08-30T14:16:12.2482220Z >       if not space.name or not space.name.strip():
2025-08-30T14:16:12.2482397Z E       AttributeError: 'str' object has no attribute 'name'
2025-08-30T14:16:12.2482403Z 
2025-08-30T14:16:12.2482501Z app/services/space.py:83: AttributeError
2025-08-30T14:16:12.2482667Z __________________ test_space_service_get_space_member_query ___________________
2025-08-30T14:16:12.2482672Z 
2025-08-30T14:16:12.2482780Z     def test_space_service_get_space_member_query():
2025-08-30T14:16:12.2482904Z         """Test get_space member count query (lines 171-172)."""
2025-08-30T14:16:12.2483019Z         from app.services.space import SpaceService
2025-08-30T14:16:12.2483111Z         from unittest.mock import MagicMock
2025-08-30T14:16:12.2483304Z     
2025-08-30T14:16:12.2483468Z         with patch('app.services.space.boto3.resource') as mock_boto:
2025-08-30T14:16:12.2483552Z             mock_dynamodb = MagicMock()
2025-08-30T14:16:12.2483638Z             mock_table = MagicMock()
2025-08-30T14:16:12.2483700Z     
2025-08-30T14:16:12.2483796Z             mock_boto.return_value = mock_dynamodb
2025-08-30T14:16:12.2483916Z             mock_dynamodb.Table.return_value = mock_table
2025-08-30T14:16:12.2483978Z     
2025-08-30T14:16:12.2484061Z             # Mock get_item for space
2025-08-30T14:16:12.2484160Z             mock_table.get_item.return_value = {
2025-08-30T14:16:12.2484232Z                 'Item': {
2025-08-30T14:16:12.2484317Z                     'PK': 'SPACE#space123',
2025-08-30T14:16:12.2484404Z                     'SK': 'SPACE#space123',
2025-08-30T14:16:12.2484483Z                     'entity_type': 'SPACE',
2025-08-30T14:16:12.2484567Z                     'space_id': 'space123',
2025-08-30T14:16:12.2484657Z                     'name': 'Test Space',
2025-08-30T14:16:12.2484756Z                     'description': 'Test Description',
2025-08-30T14:16:12.2484845Z                     'owner_id': 'user123',
2025-08-30T14:16:12.2484925Z                     'is_public': True,
2025-08-30T14:16:12.2485017Z                     'created_at': '2024-01-01T00:00:00Z',
2025-08-30T14:16:12.2485115Z                     'updated_at': '2024-01-01T00:00:00Z'
2025-08-30T14:16:12.2485181Z                 }
2025-08-30T14:16:12.2485245Z             }
2025-08-30T14:16:12.2485314Z     
2025-08-30T14:16:12.2485434Z             # Mock query for members - this covers lines 171-172
2025-08-30T14:16:12.2485533Z             mock_table.query.return_value = {
2025-08-30T14:16:12.2485607Z                 'Items': [
2025-08-30T14:16:12.2485719Z                     {'PK': 'SPACE#space123', 'SK': 'MEMBER#user123'},
2025-08-30T14:16:12.2485831Z                     {'PK': 'SPACE#space123', 'SK': 'MEMBER#user456'}
2025-08-30T14:16:12.2485904Z                 ]
2025-08-30T14:16:12.2485967Z             }
2025-08-30T14:16:12.2486035Z     
2025-08-30T14:16:12.2486116Z             service = SpaceService()
2025-08-30T14:16:12.2486200Z             service.table = mock_table
2025-08-30T14:16:12.2486268Z     
2025-08-30T14:16:12.2486382Z >           result = service.get_space('space123', 'user123')
2025-08-30T14:16:12.2486387Z 
2025-08-30T14:16:12.2486502Z tests/unit/test_coverage_final_29_lines.py:489: 
2025-08-30T14:16:12.2486611Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T14:16:12.2486616Z 
2025-08-30T14:16:12.2486780Z self = <app.services.space.SpaceService object at 0x7fdf344b6a50>
2025-08-30T14:16:12.2486880Z space_id = 'space123', user_id = 'user123'
2025-08-30T14:16:12.2486885Z 
2025-08-30T14:16:12.2487043Z     def get_space(self, space_id: str, user_id: str) -> Dict[str, Any]:
2025-08-30T14:16:12.2487171Z         """Get space by ID (check membership or public)."""
2025-08-30T14:16:12.2487367Z         # Get space metadata
2025-08-30T14:16:12.2487456Z         response = self.table.get_item(
2025-08-30T14:16:12.2487574Z             Key={'PK': f'SPACE#{space_id}', 'SK': 'METADATA'}
2025-08-30T14:16:12.2487638Z         )
2025-08-30T14:16:12.2487700Z     
2025-08-30T14:16:12.2487787Z         if 'Item' not in response:
2025-08-30T14:16:12.2487930Z             raise SpaceNotFoundError(f"Space {space_id} not found")
2025-08-30T14:16:12.2487999Z     
2025-08-30T14:16:12.2488083Z         space = response['Item']
2025-08-30T14:16:12.2488145Z     
2025-08-30T14:16:12.2488235Z         # Check if user is a member
2025-08-30T14:16:12.2488333Z         member_response = self.table.get_item(
2025-08-30T14:16:12.2488457Z             Key={'PK': f'SPACE#{space_id}', 'SK': f'MEMBER#{user_id}'}
2025-08-30T14:16:12.2488527Z         )
2025-08-30T14:16:12.2488619Z         is_member = 'Item' in member_response
2025-08-30T14:16:12.2488679Z     
2025-08-30T14:16:12.2488807Z         # If not a member and space is not public, deny access
2025-08-30T14:16:12.2489018Z         if not is_member and not space.get('is_public', False):
2025-08-30T14:16:12.2489176Z             raise UnauthorizedError("You are not a member of this space")
2025-08-30T14:16:12.2489245Z     
2025-08-30T14:16:12.2489326Z         # Check if user is owner
2025-08-30T14:16:12.2489427Z         is_owner = space['owner_id'] == user_id
2025-08-30T14:16:12.2489488Z     
2025-08-30T14:16:12.2489563Z         # Get member count
2025-08-30T14:16:12.2489663Z         members_response = self.table.query(
2025-08-30T14:16:12.2489898Z             KeyConditionExpression=Key('PK').eq(f'SPACE#{space_id}') & Key('SK').begins_with('MEMBER#')
2025-08-30T14:16:12.2489962Z         )
2025-08-30T14:16:12.2490091Z         member_count = len(members_response.get('Items', []))
2025-08-30T14:16:12.2490153Z     
2025-08-30T14:16:12.2490218Z         return {
2025-08-30T14:16:12.2490301Z >           'id': space['id'],
2025-08-30T14:16:12.2490380Z             'name': space['name'],
2025-08-30T14:16:12.2490499Z             'description': space.get('description'),
2025-08-30T14:16:12.2490593Z             'type': space.get('type', 'workspace'),
2025-08-30T14:16:12.2490695Z             'is_public': space.get('is_public', False),
2025-08-30T14:16:12.2490784Z             'owner_id': space['owner_id'],
2025-08-30T14:16:12.2490873Z             'created_at': space['created_at'],
2025-08-30T14:16:12.2490961Z             'updated_at': space['updated_at'],
2025-08-30T14:16:12.2491053Z             'member_count': member_count,
2025-08-30T14:16:12.2491128Z             'is_owner': is_owner
2025-08-30T14:16:12.2491195Z         }
2025-08-30T14:16:12.2491268Z E       KeyError: 'id'
2025-08-30T14:16:12.2491273Z 
2025-08-30T14:16:12.2491359Z app/services/space.py:177: KeyError
2025-08-30T14:16:12.2491537Z ______________ test_space_service_join_space_already_member_error ______________
2025-08-30T14:16:12.2491543Z 
2025-08-30T14:16:12.2491705Z self = <app.services.space.SpaceService object at 0x7fdf2f920ed0>
2025-08-30T14:16:12.2491871Z invite_code = 'user123', user_id = 'code123', username = '', email = ''
2025-08-30T14:16:12.2491881Z 
2025-08-30T14:16:12.2492237Z     def join_space_with_invite_code(self, invite_code: str, user_id: str,
2025-08-30T14:16:12.2492395Z                                    username: str = "", email: str = "") -> Dict[str, Any]:
2025-08-30T14:16:12.2492495Z         """Join a space using invite code."""
2025-08-30T14:16:12.2492574Z         # Look up invite code
2025-08-30T14:16:12.2492639Z         try:
2025-08-30T14:16:12.2492734Z             response = self.table.get_item(
2025-08-30T14:16:12.2492877Z                 Key={'PK': f'INVITE#{invite_code}', 'SK': f'SPACE#{invite_code}'}
2025-08-30T14:16:12.2492942Z             )
2025-08-30T14:16:12.2493010Z     
2025-08-30T14:16:12.2493094Z             if 'Item' not in response:
2025-08-30T14:16:12.2493191Z                 # Try with proper SK pattern
2025-08-30T14:16:12.2493287Z                 invite_response = self.table.query(
2025-08-30T14:16:12.2493582Z                     KeyConditionExpression=Key('PK').eq(f'INVITE#{invite_code}')
2025-08-30T14:16:12.2493652Z                 )
2025-08-30T14:16:12.2493714Z     
2025-08-30T14:16:12.2493812Z                 if not invite_response.get('Items'):
2025-08-30T14:16:12.2493946Z                     raise InvalidInviteCodeError("Invalid invite code")
2025-08-30T14:16:12.2494010Z     
2025-08-30T14:16:12.2494136Z                 space_id = invite_response['Items'][0].get('space_id')
2025-08-30T14:16:12.2494208Z             else:
2025-08-30T14:16:12.2494310Z >               space_id = response['Item'].get('space_id')
2025-08-30T14:16:12.2494460Z E               AttributeError: 'NoneType' object has no attribute 'get'
2025-08-30T14:16:12.2494466Z 
2025-08-30T14:16:12.2494562Z app/services/space.py:476: AttributeError
2025-08-30T14:16:12.2494567Z 
2025-08-30T14:16:12.2494734Z During handling of the above exception, another exception occurred:
2025-08-30T14:16:12.2494740Z 
2025-08-30T14:16:12.2494876Z     def test_space_service_join_space_already_member_error():
2025-08-30T14:16:12.2495133Z         """Test join_space AlreadyMemberError re-raise (line 517)."""
2025-08-30T14:16:12.2495246Z         from app.services.space import SpaceService
2025-08-30T14:16:12.2495382Z         from app.services.exceptions import AlreadyMemberError
2025-08-30T14:16:12.2495443Z     
2025-08-30T14:16:12.2495600Z         with patch('app.services.space.boto3.resource') as mock_boto:
2025-08-30T14:16:12.2495685Z             mock_dynamodb = MagicMock()
2025-08-30T14:16:12.2495767Z             mock_table = MagicMock()
2025-08-30T14:16:12.2495835Z     
2025-08-30T14:16:12.2495931Z             mock_boto.return_value = mock_dynamodb
2025-08-30T14:16:12.2496050Z             mock_dynamodb.Table.return_value = mock_table
2025-08-30T14:16:12.2496111Z     
2025-08-30T14:16:12.2496202Z             # Mock query to return valid invite
2025-08-30T14:16:12.2496300Z             mock_table.query.return_value = {
2025-08-30T14:16:12.2496373Z                 'Items': [{
2025-08-30T14:16:12.2496466Z                     'PK': 'INVITE#code123',
2025-08-30T14:16:12.2496554Z                     'SK': 'INVITE#code123',
2025-08-30T14:16:12.2496638Z                     'space_id': 'space123',
2025-08-30T14:16:12.2496721Z                     'created_by': 'owner123',
2025-08-30T14:16:12.2496821Z                     'expires_at': '2099-01-01T00:00:00Z',
2025-08-30T14:16:12.2496901Z                     'max_uses': 10,
2025-08-30T14:16:12.2496979Z                     'uses': 0
2025-08-30T14:16:12.2497045Z                 }]
2025-08-30T14:16:12.2497108Z             }
2025-08-30T14:16:12.2497174Z     
2025-08-30T14:16:12.2497332Z             # Mock get_item to check membership - simulate AlreadyMemberError
2025-08-30T14:16:12.2497412Z             def mock_get_item(Key):
2025-08-30T14:16:12.2497507Z                 if Key['SK'] == 'MEMBER#user123':
2025-08-30T14:16:12.2497605Z                     # Simulate user is already a member
2025-08-30T14:16:12.2497784Z                     raise AlreadyMemberError("User is already a member of this space")
2025-08-30T14:16:12.2497881Z                 return {'Item': None}
2025-08-30T14:16:12.2497944Z     
2025-08-30T14:16:12.2498062Z             mock_table.get_item.side_effect = mock_get_item
2025-08-30T14:16:12.2498123Z     
2025-08-30T14:16:12.2498208Z             service = SpaceService()
2025-08-30T14:16:12.2498298Z             service.table = mock_table
2025-08-30T14:16:12.2498359Z     
2025-08-30T14:16:12.2498471Z             # Should re-raise AlreadyMemberError (line 517)
2025-08-30T14:16:12.2498610Z             with pytest.raises(AlreadyMemberError) as exc_info:
2025-08-30T14:16:12.2498750Z >               service.join_space_with_invite_code('user123', 'code123')
2025-08-30T14:16:12.2498756Z 
2025-08-30T14:16:12.2498872Z tests/unit/test_coverage_final_29_lines.py:542: 
2025-08-30T14:16:12.2498980Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T14:16:12.2498985Z 
2025-08-30T14:16:12.2499246Z self = <app.services.space.SpaceService object at 0x7fdf2f920ed0>
2025-08-30T14:16:12.2499406Z invite_code = 'user123', user_id = 'code123', username = '', email = ''
2025-08-30T14:16:12.2499412Z 
2025-08-30T14:16:12.2499571Z     def join_space_with_invite_code(self, invite_code: str, user_id: str,
2025-08-30T14:16:12.2499712Z                                    username: str = "", email: str = "") -> Dict[str, Any]:
2025-08-30T14:16:12.2499802Z         """Join a space using invite code."""
2025-08-30T14:16:12.2499879Z         # Look up invite code
2025-08-30T14:16:12.2499948Z         try:
2025-08-30T14:16:12.2500036Z             response = self.table.get_item(
2025-08-30T14:16:12.2500177Z                 Key={'PK': f'INVITE#{invite_code}', 'SK': f'SPACE#{invite_code}'}
2025-08-30T14:16:12.2500247Z             )
2025-08-30T14:16:12.2500308Z     
2025-08-30T14:16:12.2500392Z             if 'Item' not in response:
2025-08-30T14:16:12.2500486Z                 # Try with proper SK pattern
2025-08-30T14:16:12.2500669Z                 invite_response = self.table.query(
2025-08-30T14:16:12.2500840Z                     KeyConditionExpression=Key('PK').eq(f'INVITE#{invite_code}')
2025-08-30T14:16:12.2500904Z                 )
2025-08-30T14:16:12.2500967Z     
2025-08-30T14:16:12.2501071Z                 if not invite_response.get('Items'):
2025-08-30T14:16:12.2501201Z                     raise InvalidInviteCodeError("Invalid invite code")
2025-08-30T14:16:12.2501262Z     
2025-08-30T14:16:12.2501393Z                 space_id = invite_response['Items'][0].get('space_id')
2025-08-30T14:16:12.2501458Z             else:
2025-08-30T14:16:12.2501557Z                 space_id = response['Item'].get('space_id')
2025-08-30T14:16:12.2501624Z     
2025-08-30T14:16:12.2501700Z             if not space_id:
2025-08-30T14:16:12.2501833Z                 raise InvalidInviteCodeError("Invalid invite code")
2025-08-30T14:16:12.2501896Z     
2025-08-30T14:16:12.2501981Z             # Check if already a member
2025-08-30T14:16:12.2502189Z             member_check = self.table.get_item(
2025-08-30T14:16:12.2502319Z                 Key={'PK': f'SPACE#{space_id}', 'SK': f'MEMBER#{user_id}'}
2025-08-30T14:16:12.2502383Z             )
2025-08-30T14:16:12.2502451Z     
2025-08-30T14:16:12.2502531Z             if 'Item' in member_check:
2025-08-30T14:16:12.2502704Z                 raise AlreadyMemberError("You are already a member of this space")
2025-08-30T14:16:12.2502772Z     
2025-08-30T14:16:12.2502846Z             # Add as member
2025-08-30T14:16:12.2502964Z             now = datetime.now(timezone.utc).isoformat()
2025-08-30T14:16:12.2503038Z             member_item = {
2025-08-30T14:16:12.2503125Z                 'PK': f'SPACE#{space_id}',
2025-08-30T14:16:12.2503215Z                 'SK': f'MEMBER#{user_id}',
2025-08-30T14:16:12.2503305Z                 'GSI1PK': f'USER#{user_id}',
2025-08-30T14:16:12.2503398Z                 'GSI1SK': f'SPACE#{space_id}',
2025-08-30T14:16:12.2503482Z                 'user_id': user_id,
2025-08-30T14:16:12.2503574Z                 'username': username,
2025-08-30T14:16:12.2503650Z                 'email': email,
2025-08-30T14:16:12.2503732Z                 'role': 'member',
2025-08-30T14:16:12.2503807Z                 'joined_at': now
2025-08-30T14:16:12.2503878Z             }
2025-08-30T14:16:12.2503940Z     
2025-08-30T14:16:12.2504040Z             self.table.put_item(Item=member_item)
2025-08-30T14:16:12.2504109Z     
2025-08-30T14:16:12.2504184Z             # Get space details
2025-08-30T14:16:12.2504289Z             space = self.get_space(space_id, user_id)
2025-08-30T14:16:12.2504356Z     
2025-08-30T14:16:12.2504425Z             return {
2025-08-30T14:16:12.2504508Z                 'space_id': space_id,
2025-08-30T14:16:12.2504591Z                 'name': space['name'],
2025-08-30T14:16:12.2504666Z                 'role': 'member',
2025-08-30T14:16:12.2504749Z                 'joined_at': now
2025-08-30T14:16:12.2504812Z             }
2025-08-30T14:16:12.2504875Z     
2025-08-30T14:16:12.2504972Z         except InvalidInviteCodeError:
2025-08-30T14:16:12.2505197Z             raise
2025-08-30T14:16:12.2505284Z         except AlreadyMemberError:
2025-08-30T14:16:12.2505354Z             raise
2025-08-30T14:16:12.2505435Z         except Exception as e:
2025-08-30T14:16:12.2505570Z >           raise InvalidInviteCodeError("Invalid invite code")
2025-08-30T14:16:12.2505773Z E           app.services.exceptions.InvalidInviteCodeError: Invalid invite code
2025-08-30T14:16:12.2505779Z 
2025-08-30T14:16:12.2505898Z app/services/space.py:520: InvalidInviteCodeError
2025-08-30T14:16:12.2506108Z _____ TestFinal100Coverage.test_create_space_validation_error_from_service _____
2025-08-30T14:16:12.2506113Z 
2025-08-30T14:16:12.2506339Z self = <tests.unit.test_final_100_coverage.TestFinal100Coverage object at 0x7fdf37257890>
2025-08-30T14:16:12.2506511Z client = <starlette.testclient.TestClient object at 0x7fdf2f0e7d10>
2025-08-30T14:16:12.2506756Z mock_current_user = {'email': 'test@example.com', 'user_id': 'test-user-123', 'username': 'testuser'}
2025-08-30T14:16:12.2506874Z 
2025-08-30T14:16:12.2507088Z     def test_create_space_validation_error_from_service(self, client, mock_current_user):
2025-08-30T14:16:12.2507273Z         """Test POST /spaces handles ValidationError from service - Line 53."""
2025-08-30T14:16:12.2507347Z         space_data = {
2025-08-30T14:16:12.2507428Z             "name": "Test Space",
2025-08-30T14:16:12.2507531Z             "description": "Test description"
2025-08-30T14:16:12.2507595Z         }
2025-08-30T14:16:12.2507658Z     
2025-08-30T14:16:12.2507882Z         with patch('app.api.routes.spaces.get_current_user', return_value=mock_current_user):
2025-08-30T14:16:12.2508049Z             with patch('app.api.routes.spaces.SpaceService') as mock_service:
2025-08-30T14:16:12.2508187Z                 from app.services.exceptions import ValidationError
2025-08-30T14:16:12.2508287Z                 # Mock service to raise ValidationError
2025-08-30T14:16:12.2508530Z                 mock_service.return_value.create_space.side_effect = ValidationError("Invalid space data")
2025-08-30T14:16:12.2508609Z     
2025-08-30T14:16:12.2508746Z                 response = client.post("/api/spaces", json=space_data)
2025-08-30T14:16:12.2508844Z >               assert response.status_code == 422
2025-08-30T14:16:12.2508927Z E               assert 401 == 422
2025-08-30T14:16:12.2509055Z E                +  where 401 = <Response [401 Unauthorized]>.status_code
2025-08-30T14:16:12.2509060Z 
2025-08-30T14:16:12.2509203Z tests/unit/test_final_100_coverage.py:46: AssertionError
2025-08-30T14:16:12.2509353Z ------------------------------ Captured log call -------------------------------
2025-08-30T14:16:12.2509624Z INFO     httpx:_client.py:1013 HTTP Request: POST http://testserver/api/spaces "HTTP/1.1 401 Unauthorized"
2025-08-30T14:16:12.2509836Z _____ TestFinal100Coverage.test_create_space_generic_client_error_fallback _____
2025-08-30T14:16:12.2509841Z 
2025-08-30T14:16:12.2510062Z self = <tests.unit.test_final_100_coverage.TestFinal100Coverage object at 0x7fdf3722d610>
2025-08-30T14:16:12.2510244Z client = <starlette.testclient.TestClient object at 0x7fdf3449db90>
2025-08-30T14:16:12.2510484Z mock_current_user = {'email': 'test@example.com', 'user_id': 'test-user-123', 'username': 'testuser'}
2025-08-30T14:16:12.2510490Z 
2025-08-30T14:16:12.2510697Z     def test_create_space_generic_client_error_fallback(self, client, mock_current_user):
2025-08-30T14:16:12.2510902Z         """Test POST /spaces handles non-ServiceUnavailable ClientError - Line 63."""
2025-08-30T14:16:12.2510977Z         space_data = {
2025-08-30T14:16:12.2511055Z             "name": "Test Space",
2025-08-30T14:16:12.2511156Z             "description": "Test description"
2025-08-30T14:16:12.2511220Z         }
2025-08-30T14:16:12.2511288Z     
2025-08-30T14:16:12.2511507Z         with patch('app.api.routes.spaces.get_current_user', return_value=mock_current_user):
2025-08-30T14:16:12.2511673Z             with patch('app.api.routes.spaces.SpaceService') as mock_service:
2025-08-30T14:16:12.2511933Z                 # Mock service to raise ClientError with different code
2025-08-30T14:16:12.2512125Z                 error = ClientError(
2025-08-30T14:16:12.2512327Z                     error_response={'Error': {'Code': 'UnknownError'}},
2025-08-30T14:16:12.2512424Z                     operation_name='PutItem'
2025-08-30T14:16:12.2512490Z                 )
2025-08-30T14:16:12.2512642Z                 mock_service.return_value.create_space.side_effect = error
2025-08-30T14:16:12.2512704Z     
2025-08-30T14:16:12.2512837Z                 response = client.post("/api/spaces", json=space_data)
2025-08-30T14:16:12.2512939Z >               assert response.status_code == 500
2025-08-30T14:16:12.2513015Z E               assert 401 == 500
2025-08-30T14:16:12.2513141Z E                +  where 401 = <Response [401 Unauthorized]>.status_code
2025-08-30T14:16:12.2513146Z 
2025-08-30T14:16:12.2513287Z tests/unit/test_final_100_coverage.py:67: AssertionError
2025-08-30T14:16:12.2513561Z ------------------------------ Captured log call -------------------------------
2025-08-30T14:16:12.2513834Z INFO     httpx:_client.py:1013 HTTP Request: POST http://testserver/api/spaces "HTTP/1.1 401 Unauthorized"
2025-08-30T14:16:12.2514038Z ____ TestFinal100Coverage.test_get_user_spaces_non_throughput_client_error _____
2025-08-30T14:16:12.2514044Z 
2025-08-30T14:16:12.2514263Z self = <tests.unit.test_final_100_coverage.TestFinal100Coverage object at 0x7fdf3722f850>
2025-08-30T14:16:12.2514437Z client = <starlette.testclient.TestClient object at 0x7fdf3449e3d0>
2025-08-30T14:16:12.2514740Z mock_current_user = {'email': 'test@example.com', 'user_id': 'test-user-123', 'username': 'testuser'}
2025-08-30T14:16:12.2514748Z 
2025-08-30T14:16:12.2515110Z     def test_get_user_spaces_non_throughput_client_error(self, client, mock_current_user):
2025-08-30T14:16:12.2515974Z         """Test GET /users/me/spaces handles non-throughput ClientError - Line 110."""
2025-08-30T14:16:12.2516764Z         with patch('app.api.routes.users.get_current_user', return_value=mock_current_user):
2025-08-30T14:16:12.2517531Z             with patch('app.api.routes.users.SpaceService') as mock_service:
2025-08-30T14:16:12.2518164Z                 # Mock service to raise ClientError with non-throughput code
2025-08-30T14:16:12.2518734Z                 error = ClientError(
2025-08-30T14:16:12.2519562Z                     error_response={'Error': {'Code': 'AccessDeniedException'}},
2025-08-30T14:16:12.2520327Z                     operation_name='Query'
2025-08-30T14:16:12.2520755Z                 )
2025-08-30T14:16:12.2521318Z                 mock_service.return_value.list_user_spaces.side_effect = error
2025-08-30T14:16:12.2521879Z     
2025-08-30T14:16:12.2522425Z                 response = client.get("/api/users/me/spaces")
2025-08-30T14:16:12.2522969Z >               assert response.status_code == 500
2025-08-30T14:16:12.2523430Z E               assert 404 == 500
2025-08-30T14:16:12.2523913Z E                +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.2524389Z 
2025-08-30T14:16:12.2524674Z tests/unit/test_final_100_coverage.py:82: AssertionError
2025-08-30T14:16:12.2525303Z ------------------------------ Captured log call -------------------------------
2025-08-30T14:16:12.2526133Z INFO     httpx:_client.py:1013 HTTP Request: GET http://testserver/api/users/me/spaces "HTTP/1.1 404 Not Found"
2025-08-30T14:16:12.2526707Z ________ TestFinal100Coverage.test_get_profile_cognito_attributes_none _________
2025-08-30T14:16:12.2527000Z 
2025-08-30T14:16:12.2527238Z self = <tests.unit.test_final_100_coverage.TestFinal100Coverage object at 0x7fdf3722c8d0>
2025-08-30T14:16:12.2527727Z client = <starlette.testclient.TestClient object at 0x7fdf2f92b050>
2025-08-30T14:16:12.2528224Z mock_current_user = {'email': 'test@example.com', 'user_id': 'test-user-123', 'username': 'testuser'}
2025-08-30T14:16:12.2528545Z 
2025-08-30T14:16:12.2528744Z     def test_get_profile_cognito_attributes_none(self, client, mock_current_user):
2025-08-30T14:16:12.2529385Z         """Test GET /profile when Cognito returns None attributes - Lines 63-65."""
2025-08-30T14:16:12.2529881Z         with patch('app.api.routes.user_profile.get_current_user', return_value=mock_current_user):
2025-08-30T14:16:12.2530406Z             with patch('app.api.routes.user_profile.UserProfileService') as mock_service:
2025-08-30T14:16:12.2530808Z                 # Mock profile service to return profile
2025-08-30T14:16:12.2531071Z                 mock_profile = {
2025-08-30T14:16:12.2531315Z                     "user_id": "test-user-123",
2025-08-30T14:16:12.2531582Z                     "email": "old@example.com",
2025-08-30T14:16:12.2531840Z                     "username": "olduser",
2025-08-30T14:16:12.2532303Z                     "display_name": "Test User",
2025-08-30T14:16:12.2532566Z                     "bio": "Test bio",
2025-08-30T14:16:12.2532820Z                     "avatar_url": None,
2025-08-30T14:16:12.2533057Z                     "phone_number": None,
2025-08-30T14:16:12.2533457Z                     "location": None,
2025-08-30T14:16:12.2533695Z                     "is_verified": False,
2025-08-30T14:16:12.2533929Z                     "is_onboarded": True,
2025-08-30T14:16:12.2534186Z                     "created_at": "2024-01-01T00:00:00Z",
2025-08-30T14:16:12.2534460Z                     "updated_at": "2024-01-01T00:00:00Z"
2025-08-30T14:16:12.2534701Z                 }
2025-08-30T14:16:12.2535054Z                 mock_service.return_value.get_user_profile.return_value = mock_profile
2025-08-30T14:16:12.2535392Z     
2025-08-30T14:16:12.2535603Z                 # Mock Cognito service to raise generic exception
2025-08-30T14:16:12.2536035Z                 with patch('app.api.routes.user_profile.CognitoService') as mock_cognito:
2025-08-30T14:16:12.2536547Z                     mock_cognito.return_value.get_user_attributes.side_effect = ValueError("Invalid user")
2025-08-30T14:16:12.2536955Z     
2025-08-30T14:16:12.2537156Z                     response = client.get("/api/profile")
2025-08-30T14:16:12.2537447Z >                   assert response.status_code == 200
2025-08-30T14:16:12.2537716Z E                   assert 404 == 200
2025-08-30T14:16:12.2537991Z E                    +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.2538199Z 
2025-08-30T14:16:12.2538337Z tests/unit/test_final_100_coverage.py:112: AssertionError
2025-08-30T14:16:12.2538709Z ------------------------------ Captured log call -------------------------------
2025-08-30T14:16:12.2539207Z INFO     httpx:_client.py:1013 HTTP Request: GET http://testserver/api/profile "HTTP/1.1 404 Not Found"
2025-08-30T14:16:12.2539744Z ___________ TestFinal100Coverage.test_get_profile_other_client_error ___________
2025-08-30T14:16:12.2540021Z 
2025-08-30T14:16:12.2540245Z self = <tests.unit.test_final_100_coverage.TestFinal100Coverage object at 0x7fdf3722d210>
2025-08-30T14:16:12.2540731Z client = <starlette.testclient.TestClient object at 0x7fdf36c49d10>
2025-08-30T14:16:12.2541231Z mock_current_user = {'email': 'test@example.com', 'user_id': 'test-user-123', 'username': 'testuser'}
2025-08-30T14:16:12.2541555Z 
2025-08-30T14:16:12.2541740Z     def test_get_profile_other_client_error(self, client, mock_current_user):
2025-08-30T14:16:12.2542339Z         """Test GET /profile handles other ClientError codes - Line 75."""
2025-08-30T14:16:12.2542824Z         with patch('app.api.routes.user_profile.get_current_user', return_value=mock_current_user):
2025-08-30T14:16:12.2543347Z             with patch('app.api.routes.user_profile.UserProfileService') as mock_service:
2025-08-30T14:16:12.2543770Z                 # Mock service to raise ClientError with different code
2025-08-30T14:16:12.2544074Z                 error = ClientError(
2025-08-30T14:16:12.2544377Z                     error_response={'Error': {'Code': 'ValidationException'}},
2025-08-30T14:16:12.2544701Z                     operation_name='GetItem'
2025-08-30T14:16:12.2544931Z                 )
2025-08-30T14:16:12.2545199Z                 mock_service.return_value.get_user_profile.side_effect = error
2025-08-30T14:16:12.2545650Z     
2025-08-30T14:16:12.2545837Z                 response = client.get("/api/profile")
2025-08-30T14:16:12.2546122Z >               assert response.status_code == 500
2025-08-30T14:16:12.2546381Z E               assert 404 == 500
2025-08-30T14:16:12.2546649Z E                +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.2546854Z 
2025-08-30T14:16:12.2546992Z tests/unit/test_final_100_coverage.py:130: AssertionError
2025-08-30T14:16:12.2547361Z ------------------------------ Captured log call -------------------------------
2025-08-30T14:16:12.2547850Z INFO     httpx:_client.py:1013 HTTP Request: GET http://testserver/api/profile "HTTP/1.1 404 Not Found"
2025-08-30T14:16:12.2548378Z __________ TestFinal100Coverage.test_get_profile_non_client_exception __________
2025-08-30T14:16:12.2548663Z 
2025-08-30T14:16:12.2548882Z self = <tests.unit.test_final_100_coverage.TestFinal100Coverage object at 0x7fdf3722e990>
2025-08-30T14:16:12.2549494Z client = <starlette.testclient.TestClient object at 0x7fdf2f554410>
2025-08-30T14:16:12.2549975Z mock_current_user = {'email': 'test@example.com', 'user_id': 'test-user-123', 'username': 'testuser'}
2025-08-30T14:16:12.2550295Z 
2025-08-30T14:16:12.2550478Z     def test_get_profile_non_client_exception(self, client, mock_current_user):
2025-08-30T14:16:12.2550920Z         """Test GET /profile handles non-HTTPException errors - Lines 81-83."""
2025-08-30T14:16:12.2551413Z         with patch('app.api.routes.user_profile.get_current_user', return_value=mock_current_user):
2025-08-30T14:16:12.2551929Z             with patch('app.api.routes.user_profile.UserProfileService') as mock_service:
2025-08-30T14:16:12.2552506Z                 # Mock service to raise generic exception
2025-08-30T14:16:12.2552912Z                 mock_service.return_value.get_user_profile.side_effect = ValueError("Invalid data")
2025-08-30T14:16:12.2553286Z     
2025-08-30T14:16:12.2553477Z                 response = client.get("/api/profile")
2025-08-30T14:16:12.2553765Z >               assert response.status_code == 500
2025-08-30T14:16:12.2554029Z E               assert 404 == 500
2025-08-30T14:16:12.2554297Z E                +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.2554501Z 
2025-08-30T14:16:12.2554638Z tests/unit/test_final_100_coverage.py:142: AssertionError
2025-08-30T14:16:12.2555006Z ------------------------------ Captured log call -------------------------------
2025-08-30T14:16:12.2555491Z INFO     httpx:_client.py:1013 HTTP Request: GET http://testserver/api/profile "HTTP/1.1 404 Not Found"
2025-08-30T14:16:12.2556020Z _________ TestFinal100Coverage.test_user_profile_phone_invalid_format __________
2025-08-30T14:16:12.2556304Z 
2025-08-30T14:16:12.2556524Z self = <tests.unit.test_final_100_coverage.TestFinal100Coverage object at 0x7fdf3722ee10>
2025-08-30T14:16:12.2556839Z 
2025-08-30T14:16:12.2556952Z     def test_user_profile_phone_invalid_format(self):
2025-08-30T14:16:12.2557332Z         """Test UserProfile phone validation with invalid format - Line 48."""
2025-08-30T14:16:12.2557740Z         from app.models.user_profile import UserProfileUpdate
2025-08-30T14:16:12.2558031Z     
2025-08-30T14:16:12.2558244Z         # Phone with invalid characters should fail validation
2025-08-30T14:16:12.2558632Z         with pytest.raises(ValueError, match="Invalid phone number format"):
2025-08-30T14:16:12.2559000Z >           UserProfileUpdate(phone_number="abc!@#$")
2025-08-30T14:16:12.2559418Z E           pydantic_core._pydantic_core.ValidationError: 1 validation error for UserProfileUpdate
2025-08-30T14:16:12.2559823Z E           phone_number
2025-08-30T14:16:12.2560286Z E             Value error, Phone number must be at least 10 characters [type=value_error, input_value='abc!@#$', input_type=str]
2025-08-30T14:16:12.2560874Z E               For further information visit https://errors.pydantic.dev/2.10/v/value_error
2025-08-30T14:16:12.2561166Z 
2025-08-30T14:16:12.2561448Z tests/unit/test_final_100_coverage.py:152: ValidationError
2025-08-30T14:16:12.2561685Z 
2025-08-30T14:16:12.2561857Z During handling of the above exception, another exception occurred:
2025-08-30T14:16:12.2562311Z 
2025-08-30T14:16:12.2562541Z self = <tests.unit.test_final_100_coverage.TestFinal100Coverage object at 0x7fdf3722ee10>
2025-08-30T14:16:12.2562857Z 
2025-08-30T14:16:12.2562980Z     def test_user_profile_phone_invalid_format(self):
2025-08-30T14:16:12.2563355Z         """Test UserProfile phone validation with invalid format - Line 48."""
2025-08-30T14:16:12.2563753Z         from app.models.user_profile import UserProfileUpdate
2025-08-30T14:16:12.2564035Z     
2025-08-30T14:16:12.2564255Z         # Phone with invalid characters should fail validation
2025-08-30T14:16:12.2564636Z >       with pytest.raises(ValueError, match="Invalid phone number format"):
2025-08-30T14:16:12.2565013Z E       AssertionError: Regex pattern did not match.
2025-08-30T14:16:12.2565306Z E        Regex: 'Invalid phone number format'
2025-08-30T14:16:12.2566333Z E        Input: "1 validation error for UserProfileUpdate\nphone_number\n  Value error, Phone number must be at least 10 characters [type=value_error, input_value='abc!@#$', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/value_error"
2025-08-30T14:16:12.2567157Z 
2025-08-30T14:16:12.2567295Z tests/unit/test_final_100_coverage.py:151: AssertionError
2025-08-30T14:16:12.2567710Z __________ TestFinal100Coverage.test_get_authenticated_user_with_none __________
2025-08-30T14:16:12.2567992Z 
2025-08-30T14:16:12.2568219Z self = <tests.unit.test_final_100_coverage.TestFinal100Coverage object at 0x7fdf3722d8d0>
2025-08-30T14:16:12.2568530Z 
2025-08-30T14:16:12.2568650Z     def test_get_authenticated_user_with_none(self):
2025-08-30T14:16:12.2569023Z         """Test get_authenticated_user raises exception for None user - Line 25."""
2025-08-30T14:16:12.2569439Z >       from app.core.dependencies import get_authenticated_user
2025-08-30T14:16:12.2570196Z E       ImportError: cannot import name 'get_authenticated_user' from 'app.core.dependencies' (/home/runner/work/lifestyle-spaces/lifestyle-spaces/backend/app/core/dependencies.py)
2025-08-30T14:16:12.2570788Z 
2025-08-30T14:16:12.2570921Z tests/unit/test_final_100_coverage.py:166: ImportError
2025-08-30T14:16:12.2571316Z ____________ TestFinal100Coverage.test_parse_cors_json_single_value ____________
2025-08-30T14:16:12.2571596Z 
2025-08-30T14:16:12.2571818Z self = <tests.unit.test_final_100_coverage.TestFinal100Coverage object at 0x7fdf3722f710>
2025-08-30T14:16:12.2572299Z 
2025-08-30T14:16:12.2572415Z     def test_parse_cors_json_single_value(self):
2025-08-30T14:16:12.2572739Z         """Test parse_cors with JSON non-list value - Line 34."""
2025-08-30T14:16:12.2573052Z         from app.core.config import parse_cors
2025-08-30T14:16:12.2573301Z     
2025-08-30T14:16:12.2573501Z         # JSON string that parses to a non-list value
2025-08-30T14:16:12.2573784Z         json_string = '"http://example.com"'
2025-08-30T14:16:12.2574058Z         result = parse_cors(json_string)
2025-08-30T14:16:12.2574326Z >       assert result == ["http://example.com"]
2025-08-30T14:16:12.2574662Z E       assert ['"http://example.com"'] == ['http://example.com']
2025-08-30T14:16:12.2575053Z E         At index 0 diff: '"http://example.com"' != 'http://example.com'
2025-08-30T14:16:12.2575370Z E         Full diff:
2025-08-30T14:16:12.2575578Z E         - ['http://example.com']
2025-08-30T14:16:12.2575821Z E         + ['"http://example.com"']
2025-08-30T14:16:12.2576055Z E         ?   +                  +
2025-08-30T14:16:12.2576195Z 
2025-08-30T14:16:12.2576341Z tests/unit/test_final_100_coverage.py:182: AssertionError
2025-08-30T14:16:12.2576765Z _____ TestFinal100Coverage.test_settings_cors_origins_non_test_environment _____
2025-08-30T14:16:12.2577062Z 
2025-08-30T14:16:12.2577286Z self = <tests.unit.test_final_100_coverage.TestFinal100Coverage object at 0x7fdf3722d710>
2025-08-30T14:16:12.2577608Z 
2025-08-30T14:16:12.2577877Z     def test_settings_cors_origins_non_test_environment(self):
2025-08-30T14:16:12.2578283Z         """Test Settings.cors_origins in non-test environment - Lines 106-109."""
2025-08-30T14:16:12.2578644Z         from app.core.config import Settings
2025-08-30T14:16:12.2578888Z     
2025-08-30T14:16:12.2579129Z         # Clear PYTEST_CURRENT_TEST to simulate non-test environment
2025-08-30T14:16:12.2579463Z         with patch.dict(os.environ, {}, clear=True):
2025-08-30T14:16:12.2579753Z             # Ensure PYTEST_CURRENT_TEST is not set
2025-08-30T14:16:12.2580035Z             if 'PYTEST_CURRENT_TEST' in os.environ:
2025-08-30T14:16:12.2580315Z                 del os.environ['PYTEST_CURRENT_TEST']
2025-08-30T14:16:12.2580560Z     
2025-08-30T14:16:12.2580735Z >           settings = Settings(
2025-08-30T14:16:12.2580958Z                 app_name="test",
2025-08-30T14:16:12.2581184Z                 environment="production",
2025-08-30T14:16:12.2581451Z                 dynamodb_table_name="test-table",
2025-08-30T14:16:12.2581835Z                 cors_origins_str=None
2025-08-30T14:16:12.2582227Z             )
2025-08-30T14:16:12.2582348Z 
2025-08-30T14:16:12.2582450Z tests/unit/test_final_100_coverage.py:200: 
2025-08-30T14:16:12.2582740Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T14:16:12.2582941Z 
2025-08-30T14:16:12.2583068Z __pydantic_self__ = Settings(), _case_sensitive = None
2025-08-30T14:16:12.2583416Z _nested_model_default_partial_update = None, _env_prefix = None
2025-08-30T14:16:12.2583830Z _env_file = PosixPath('.'), _env_file_encoding = None, _env_ignore_empty = None
2025-08-30T14:16:12.2584217Z _env_nested_delimiter = None, _env_parse_none_str = None
2025-08-30T14:16:12.2584576Z _env_parse_enums = None, _cli_prog_name = None, _cli_parse_args = None
2025-08-30T14:16:12.2584943Z _cli_settings_source = None, _cli_parse_none_str = None
2025-08-30T14:16:12.2585323Z _cli_hide_none_type = None, _cli_avoid_json = None, _cli_enforce_required = None
2025-08-30T14:16:12.2585747Z _cli_use_class_docs_for_groups = None, _cli_exit_on_error = None
2025-08-30T14:16:12.2586142Z _cli_prefix = None, _cli_flag_prefix_char = None, _cli_implicit_flags = None
2025-08-30T14:16:12.2586570Z _cli_ignore_unknown_args = None, _cli_kebab_case = None, _secrets_dir = None
2025-08-30T14:16:12.2587118Z values = {'app_name': 'test', 'cors_origins_str': None, 'dynamodb_table_name': 'test-table', 'environment': 'production'}
2025-08-30T14:16:12.2587486Z 
2025-08-30T14:16:12.2587562Z     def __init__(
2025-08-30T14:16:12.2587747Z         __pydantic_self__,
2025-08-30T14:16:12.2587974Z         _case_sensitive: bool | None = None,
2025-08-30T14:16:12.2588283Z         _nested_model_default_partial_update: bool | None = None,
2025-08-30T14:16:12.2588585Z         _env_prefix: str | None = None,
2025-08-30T14:16:12.2588862Z         _env_file: DotenvType | None = ENV_FILE_SENTINEL,
2025-08-30T14:16:12.2589152Z         _env_file_encoding: str | None = None,
2025-08-30T14:16:12.2589423Z         _env_ignore_empty: bool | None = None,
2025-08-30T14:16:12.2589694Z         _env_nested_delimiter: str | None = None,
2025-08-30T14:16:12.2589972Z         _env_parse_none_str: str | None = None,
2025-08-30T14:16:12.2590239Z         _env_parse_enums: bool | None = None,
2025-08-30T14:16:12.2590492Z         _cli_prog_name: str | None = None,
2025-08-30T14:16:12.2590807Z         _cli_parse_args: bool | list[str] | tuple[str, ...] | None = None,
2025-08-30T14:16:12.2591191Z         _cli_settings_source: CliSettingsSource[Any] | None = None,
2025-08-30T14:16:12.2591507Z         _cli_parse_none_str: str | None = None,
2025-08-30T14:16:12.2591778Z         _cli_hide_none_type: bool | None = None,
2025-08-30T14:16:12.2592225Z         _cli_avoid_json: bool | None = None,
2025-08-30T14:16:12.2592537Z         _cli_enforce_required: bool | None = None,
2025-08-30T14:16:12.2592836Z         _cli_use_class_docs_for_groups: bool | None = None,
2025-08-30T14:16:12.2593130Z         _cli_exit_on_error: bool | None = None,
2025-08-30T14:16:12.2593533Z         _cli_prefix: str | None = None,
2025-08-30T14:16:12.2593787Z         _cli_flag_prefix_char: str | None = None,
2025-08-30T14:16:12.2594061Z         _cli_implicit_flags: bool | None = None,
2025-08-30T14:16:12.2594340Z         _cli_ignore_unknown_args: bool | None = None,
2025-08-30T14:16:12.2594611Z         _cli_kebab_case: bool | None = None,
2025-08-30T14:16:12.2594873Z         _secrets_dir: PathType | None = None,
2025-08-30T14:16:12.2595122Z         **values: Any,
2025-08-30T14:16:12.2595305Z     ) -> None:
2025-08-30T14:16:12.2595622Z         # Uses something other than `self` the first arg to allow "self" as a settable attribute
2025-08-30T14:16:12.2596000Z >       super().__init__(
2025-08-30T14:16:12.2596231Z             **__pydantic_self__._settings_build_values(
2025-08-30T14:16:12.2596484Z                 values,
2025-08-30T14:16:12.2596691Z                 _case_sensitive=_case_sensitive,
2025-08-30T14:16:12.2597061Z                 _nested_model_default_partial_update=_nested_model_default_partial_update,
2025-08-30T14:16:12.2597549Z                 _env_prefix=_env_prefix,
2025-08-30T14:16:12.2597794Z                 _env_file=_env_file,
2025-08-30T14:16:12.2598042Z                 _env_file_encoding=_env_file_encoding,
2025-08-30T14:16:12.2598322Z                 _env_ignore_empty=_env_ignore_empty,
2025-08-30T14:16:12.2598607Z                 _env_nested_delimiter=_env_nested_delimiter,
2025-08-30T14:16:12.2598900Z                 _env_parse_none_str=_env_parse_none_str,
2025-08-30T14:16:12.2599179Z                 _env_parse_enums=_env_parse_enums,
2025-08-30T14:16:12.2599442Z                 _cli_prog_name=_cli_prog_name,
2025-08-30T14:16:12.2599704Z                 _cli_parse_args=_cli_parse_args,
2025-08-30T14:16:12.2599983Z                 _cli_settings_source=_cli_settings_source,
2025-08-30T14:16:12.2600266Z                 _cli_parse_none_str=_cli_parse_none_str,
2025-08-30T14:16:12.2600546Z                 _cli_hide_none_type=_cli_hide_none_type,
2025-08-30T14:16:12.2600850Z                 _cli_avoid_json=_cli_avoid_json,
2025-08-30T14:16:12.2601131Z                 _cli_enforce_required=_cli_enforce_required,
2025-08-30T14:16:12.2601461Z                 _cli_use_class_docs_for_groups=_cli_use_class_docs_for_groups,
2025-08-30T14:16:12.2601792Z                 _cli_exit_on_error=_cli_exit_on_error,
2025-08-30T14:16:12.2602161Z                 _cli_prefix=_cli_prefix,
2025-08-30T14:16:12.2602429Z                 _cli_flag_prefix_char=_cli_flag_prefix_char,
2025-08-30T14:16:12.2602718Z                 _cli_implicit_flags=_cli_implicit_flags,
2025-08-30T14:16:12.2603025Z                 _cli_ignore_unknown_args=_cli_ignore_unknown_args,
2025-08-30T14:16:12.2603323Z                 _cli_kebab_case=_cli_kebab_case,
2025-08-30T14:16:12.2603582Z                 _secrets_dir=_secrets_dir,
2025-08-30T14:16:12.2603814Z             )
2025-08-30T14:16:12.2603982Z         )
2025-08-30T14:16:12.2604280Z E       pydantic_core._pydantic_core.ValidationError: 3 validation errors for Settings
2025-08-30T14:16:12.2604663Z E       app_name
2025-08-30T14:16:12.2605000Z E         Extra inputs are not permitted [type=extra_forbidden, input_value='test', input_type=str]
2025-08-30T14:16:12.2605537Z E           For further information visit https://errors.pydantic.dev/2.10/v/extra_forbidden
2025-08-30T14:16:12.2605923Z E       dynamodb_table_name
2025-08-30T14:16:12.2606308Z E         Extra inputs are not permitted [type=extra_forbidden, input_value='test-table', input_type=str]
2025-08-30T14:16:12.2606857Z E           For further information visit https://errors.pydantic.dev/2.10/v/extra_forbidden
2025-08-30T14:16:12.2607228Z E       cors_origins_str
2025-08-30T14:16:12.2607593Z E         Extra inputs are not permitted [type=extra_forbidden, input_value=None, input_type=NoneType]
2025-08-30T14:16:12.2608133Z E           For further information visit https://errors.pydantic.dev/2.10/v/extra_forbidden
2025-08-30T14:16:12.2608429Z 
2025-08-30T14:16:12.2608777Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/pydantic_settings/main.py:171: ValidationError
2025-08-30T14:16:12.2609525Z ________ TestFinal100Coverage.test_space_service_get_space_client_error ________
2025-08-30T14:16:12.2609820Z 
2025-08-30T14:16:12.2610046Z self = <tests.unit.test_final_100_coverage.TestFinal100Coverage object at 0x7fdf3732cd50>
2025-08-30T14:16:12.2610360Z 
2025-08-30T14:16:12.2610488Z     def test_space_service_get_space_client_error(self):
2025-08-30T14:16:12.2610852Z         """Test SpaceService.get_space with ClientError - Line 394."""
2025-08-30T14:16:12.2611194Z         from app.services.space import SpaceService
2025-08-30T14:16:12.2611529Z         from app.services.exceptions import SpaceNotFoundError
2025-08-30T14:16:12.2611821Z     
2025-08-30T14:16:12.2612176Z         with patch('app.services.space.boto3.resource') as mock_resource:
2025-08-30T14:16:12.2612513Z             mock_table = Mock()
2025-08-30T14:16:12.2612808Z             mock_resource.return_value.Table.return_value = mock_table
2025-08-30T14:16:12.2613228Z     
2025-08-30T14:16:12.2613398Z             service = SpaceService()
2025-08-30T14:16:12.2613642Z             service.table = mock_table
2025-08-30T14:16:12.2613864Z     
2025-08-30T14:16:12.2614038Z             # Mock get_item to raise ClientError
2025-08-30T14:16:12.2614324Z             mock_table.get_item.side_effect = ClientError(
2025-08-30T14:16:12.2614664Z                 error_response={'Error': {'Code': 'InternalServerError'}},
2025-08-30T14:16:12.2614977Z                 operation_name='GetItem'
2025-08-30T14:16:12.2615206Z             )
2025-08-30T14:16:12.2615368Z     
2025-08-30T14:16:12.2615644Z             with pytest.raises(SpaceNotFoundError, match="Space space123 not found"):
2025-08-30T14:16:12.2616032Z >               service.get_space("space123", "user123")
2025-08-30T14:16:12.2616224Z 
2025-08-30T14:16:12.2616325Z tests/unit/test_final_100_coverage.py:262: 
2025-08-30T14:16:12.2616614Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T14:16:12.2616910Z app/services/space.py:148: in get_space
2025-08-30T14:16:12.2617168Z     response = self.table.get_item(
2025-08-30T14:16:12.2617563Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1124: in __call__
2025-08-30T14:16:12.2617974Z     return self._mock_call(*args, **kwargs)
2025-08-30T14:16:12.2618386Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1128: in _mock_call
2025-08-30T14:16:12.2618824Z     return self._execute_mock_call(*args, **kwargs)
2025-08-30T14:16:12.2619123Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T14:16:12.2619320Z 
2025-08-30T14:16:12.2619491Z self = <Mock name='resource().Table().get_item' id='140596542118608'>, args = ()
2025-08-30T14:16:12.2619879Z kwargs = {'Key': {'PK': 'SPACE#space123', 'SK': 'METADATA'}}
2025-08-30T14:16:12.2620386Z effect = ClientError('An error occurred (InternalServerError) when calling the GetItem operation: Unknown')
2025-08-30T14:16:12.2620774Z 
2025-08-30T14:16:12.2620895Z     def _execute_mock_call(self, /, *args, **kwargs):
2025-08-30T14:16:12.2621246Z         # separate from _increment_mock_call so that awaited functions are
2025-08-30T14:16:12.2621683Z         # executed separately from their call, also AsyncMock overrides this method
2025-08-30T14:16:12.2622122Z     
2025-08-30T14:16:12.2622292Z         effect = self.side_effect
2025-08-30T14:16:12.2622527Z         if effect is not None:
2025-08-30T14:16:12.2622759Z             if _is_exception(effect):
2025-08-30T14:16:12.2622990Z >               raise effect
2025-08-30T14:16:12.2634922Z E               botocore.exceptions.ClientError: An error occurred (InternalServerError) when calling the GetItem operation: Unknown
2025-08-30T14:16:12.2635448Z 
2025-08-30T14:16:12.2635716Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1183: ClientError
2025-08-30T14:16:12.2636272Z ______ TestFinal100Coverage.test_space_service_get_user_role_client_error ______
2025-08-30T14:16:12.2636836Z 
2025-08-30T14:16:12.2637067Z self = <tests.unit.test_final_100_coverage.TestFinal100Coverage object at 0x7fdf3732f0d0>
2025-08-30T14:16:12.2637393Z 
2025-08-30T14:16:12.2637532Z     def test_space_service_get_user_role_client_error(self):
2025-08-30T14:16:12.2637937Z         """Test SpaceService.get_user_role with ClientError - Lines 453-454."""
2025-08-30T14:16:12.2638323Z         from app.services.space import SpaceService
2025-08-30T14:16:12.2638581Z     
2025-08-30T14:16:12.2638851Z         with patch('app.services.space.boto3.resource') as mock_resource:
2025-08-30T14:16:12.2639196Z             mock_table = Mock()
2025-08-30T14:16:12.2639494Z             mock_resource.return_value.Table.return_value = mock_table
2025-08-30T14:16:12.2639792Z     
2025-08-30T14:16:12.2639969Z             service = SpaceService()
2025-08-30T14:16:12.2640211Z             service.table = mock_table
2025-08-30T14:16:12.2640439Z     
2025-08-30T14:16:12.2640625Z             # Mock get_item to raise ClientError
2025-08-30T14:16:12.2641062Z             mock_table.get_item.side_effect = ClientError(
2025-08-30T14:16:12.2641418Z                 error_response={'Error': {'Code': 'AccessDeniedException'}},
2025-08-30T14:16:12.2641754Z                 operation_name='GetItem'
2025-08-30T14:16:12.2641988Z             )
2025-08-30T14:16:12.2642289Z     
2025-08-30T14:16:12.2642515Z >           result = service.get_user_role("space123", "user123")
2025-08-30T14:16:12.2642920Z E           AttributeError: 'SpaceService' object has no attribute 'get_user_role'
2025-08-30T14:16:12.2643194Z 
2025-08-30T14:16:12.2643343Z tests/unit/test_final_100_coverage.py:282: AttributeError
2025-08-30T14:16:12.2643762Z _____ TestFinal100Coverage.test_space_service_join_space_get_space_success _____
2025-08-30T14:16:12.2644057Z 
2025-08-30T14:16:12.2644223Z self = <app.services.space.SpaceService object at 0x7fdf2ef76750>
2025-08-30T14:16:12.2644618Z invite_code = 'ABC123', user_id = 'user123', username = 'testuser'
2025-08-30T14:16:12.2644936Z email = 'test@example.com'
2025-08-30T14:16:12.2645077Z 
2025-08-30T14:16:12.2645246Z     def join_space_with_invite_code(self, invite_code: str, user_id: str,
2025-08-30T14:16:12.2645634Z                                    username: str = "", email: str = "") -> Dict[str, Any]:
2025-08-30T14:16:12.2645958Z         """Join a space using invite code."""
2025-08-30T14:16:12.2646208Z         # Look up invite code
2025-08-30T14:16:12.2646418Z         try:
2025-08-30T14:16:12.2646609Z             response = self.table.get_item(
2025-08-30T14:16:12.2646924Z                 Key={'PK': f'INVITE#{invite_code}', 'SK': f'SPACE#{invite_code}'}
2025-08-30T14:16:12.2647224Z             )
2025-08-30T14:16:12.2647391Z     
2025-08-30T14:16:12.2647560Z             if 'Item' not in response:
2025-08-30T14:16:12.2647817Z                 # Try with proper SK pattern
2025-08-30T14:16:12.2648090Z                 invite_response = self.table.query(
2025-08-30T14:16:12.2648442Z                     KeyConditionExpression=Key('PK').eq(f'INVITE#{invite_code}')
2025-08-30T14:16:12.2648761Z                 )
2025-08-30T14:16:12.2648934Z     
2025-08-30T14:16:12.2649121Z                 if not invite_response.get('Items'):
2025-08-30T14:16:12.2649430Z                     raise InvalidInviteCodeError("Invalid invite code")
2025-08-30T14:16:12.2649717Z     
2025-08-30T14:16:12.2649931Z                 space_id = invite_response['Items'][0].get('space_id')
2025-08-30T14:16:12.2650205Z             else:
2025-08-30T14:16:12.2650418Z                 space_id = response['Item'].get('space_id')
2025-08-30T14:16:12.2650676Z     
2025-08-30T14:16:12.2650837Z             if not space_id:
2025-08-30T14:16:12.2651109Z                 raise InvalidInviteCodeError("Invalid invite code")
2025-08-30T14:16:12.2651389Z     
2025-08-30T14:16:12.2651560Z             # Check if already a member
2025-08-30T14:16:12.2651813Z             member_check = self.table.get_item(
2025-08-30T14:16:12.2652214Z                 Key={'PK': f'SPACE#{space_id}', 'SK': f'MEMBER#{user_id}'}
2025-08-30T14:16:12.2652626Z             )
2025-08-30T14:16:12.2652784Z     
2025-08-30T14:16:12.2652954Z             if 'Item' in member_check:
2025-08-30T14:16:12.2653284Z                 raise AlreadyMemberError("You are already a member of this space")
2025-08-30T14:16:12.2653603Z     
2025-08-30T14:16:12.2653763Z             # Add as member
2025-08-30T14:16:12.2654010Z             now = datetime.now(timezone.utc).isoformat()
2025-08-30T14:16:12.2654275Z             member_item = {
2025-08-30T14:16:12.2654488Z                 'PK': f'SPACE#{space_id}',
2025-08-30T14:16:12.2654739Z                 'SK': f'MEMBER#{user_id}',
2025-08-30T14:16:12.2654990Z                 'GSI1PK': f'USER#{user_id}',
2025-08-30T14:16:12.2655241Z                 'GSI1SK': f'SPACE#{space_id}',
2025-08-30T14:16:12.2655490Z                 'user_id': user_id,
2025-08-30T14:16:12.2655726Z                 'username': username,
2025-08-30T14:16:12.2655951Z                 'email': email,
2025-08-30T14:16:12.2656295Z                 'role': 'member',
2025-08-30T14:16:12.2656521Z                 'joined_at': now
2025-08-30T14:16:12.2656721Z             }
2025-08-30T14:16:12.2656886Z     
2025-08-30T14:16:12.2657073Z             self.table.put_item(Item=member_item)
2025-08-30T14:16:12.2657316Z     
2025-08-30T14:16:12.2657474Z             # Get space details
2025-08-30T14:16:12.2657716Z >           space = self.get_space(space_id, user_id)
2025-08-30T14:16:12.2657900Z 
2025-08-30T14:16:12.2657993Z app/services/space.py:506: 
2025-08-30T14:16:12.2658237Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T14:16:12.2658442Z 
2025-08-30T14:16:12.2658605Z self = <app.services.space.SpaceService object at 0x7fdf2ef76750>
2025-08-30T14:16:12.2658945Z space_id = 'space123', user_id = 'user123'
2025-08-30T14:16:12.2659115Z 
2025-08-30T14:16:12.2659283Z     def get_space(self, space_id: str, user_id: str) -> Dict[str, Any]:
2025-08-30T14:16:12.2659642Z         """Get space by ID (check membership or public)."""
2025-08-30T14:16:12.2659961Z         # Get space metadata
2025-08-30T14:16:12.2660190Z         response = self.table.get_item(
2025-08-30T14:16:12.2660465Z             Key={'PK': f'SPACE#{space_id}', 'SK': 'METADATA'}
2025-08-30T14:16:12.2660739Z         )
2025-08-30T14:16:12.2660896Z     
2025-08-30T14:16:12.2661063Z         if 'Item' not in response:
2025-08-30T14:16:12.2661360Z             raise SpaceNotFoundError(f"Space {space_id} not found")
2025-08-30T14:16:12.2661647Z     
2025-08-30T14:16:12.2661808Z         space = response['Item']
2025-08-30T14:16:12.2662108Z     
2025-08-30T14:16:12.2662279Z         # Check if user is a member
2025-08-30T14:16:12.2662530Z         member_response = self.table.get_item(
2025-08-30T14:16:12.2662828Z             Key={'PK': f'SPACE#{space_id}', 'SK': f'MEMBER#{user_id}'}
2025-08-30T14:16:12.2663100Z         )
2025-08-30T14:16:12.2663286Z         is_member = 'Item' in member_response
2025-08-30T14:16:12.2663524Z     
2025-08-30T14:16:12.2663739Z         # If not a member and space is not public, deny access
2025-08-30T14:16:12.2664084Z         if not is_member and not space.get('is_public', False):
2025-08-30T14:16:12.2664446Z             raise UnauthorizedError("You are not a member of this space")
2025-08-30T14:16:12.2664754Z     
2025-08-30T14:16:12.2664919Z         # Check if user is owner
2025-08-30T14:16:12.2665152Z         is_owner = space['owner_id'] == user_id
2025-08-30T14:16:12.2665398Z     
2025-08-30T14:16:12.2665563Z         # Get member count
2025-08-30T14:16:12.2665794Z         members_response = self.table.query(
2025-08-30T14:16:12.2666198Z             KeyConditionExpression=Key('PK').eq(f'SPACE#{space_id}') & Key('SK').begins_with('MEMBER#')
2025-08-30T14:16:12.2666586Z         )
2025-08-30T14:16:12.2666806Z         member_count = len(members_response.get('Items', []))
2025-08-30T14:16:12.2667086Z     
2025-08-30T14:16:12.2667244Z         return {
2025-08-30T14:16:12.2667439Z >           'id': space['id'],
2025-08-30T14:16:12.2667782Z             'name': space['name'],
2025-08-30T14:16:12.2668042Z             'description': space.get('description'),
2025-08-30T14:16:12.2668330Z             'type': space.get('type', 'workspace'),
2025-08-30T14:16:12.2668620Z             'is_public': space.get('is_public', False),
2025-08-30T14:16:12.2668894Z             'owner_id': space['owner_id'],
2025-08-30T14:16:12.2669153Z             'created_at': space['created_at'],
2025-08-30T14:16:12.2669417Z             'updated_at': space['updated_at'],
2025-08-30T14:16:12.2669670Z             'member_count': member_count,
2025-08-30T14:16:12.2669912Z             'is_owner': is_owner
2025-08-30T14:16:12.2670118Z         }
2025-08-30T14:16:12.2670279Z E       KeyError: 'id'
2025-08-30T14:16:12.2670405Z 
2025-08-30T14:16:12.2670494Z app/services/space.py:177: KeyError
2025-08-30T14:16:12.2670658Z 
2025-08-30T14:16:12.2670819Z During handling of the above exception, another exception occurred:
2025-08-30T14:16:12.2671068Z 
2025-08-30T14:16:12.2671422Z self = <tests.unit.test_final_100_coverage.TestFinal100Coverage object at 0x7fdf3732de90>
2025-08-30T14:16:12.2671737Z 
2025-08-30T14:16:12.2671875Z     def test_space_service_join_space_get_space_success(self):
2025-08-30T14:16:12.2672531Z         """Test SpaceService.join_space_with_invite_code success path - Line 508."""
2025-08-30T14:16:12.2672930Z         from app.services.space import SpaceService
2025-08-30T14:16:12.2673181Z     
2025-08-30T14:16:12.2673440Z         with patch('app.services.space.boto3.resource') as mock_resource:
2025-08-30T14:16:12.2673768Z             mock_table = Mock()
2025-08-30T14:16:12.2674057Z             mock_resource.return_value.Table.return_value = mock_table
2025-08-30T14:16:12.2674354Z     
2025-08-30T14:16:12.2674516Z             service = SpaceService()
2025-08-30T14:16:12.2674759Z             service.table = mock_table
2025-08-30T14:16:12.2674979Z     
2025-08-30T14:16:12.2675139Z             # Setup successful flow
2025-08-30T14:16:12.2675382Z             def get_item_side_effect(Key):
2025-08-30T14:16:12.2675651Z                 if 'INVITE#' in Key.get('PK', ''):
2025-08-30T14:16:12.2675936Z                     return {'Item': {'space_id': 'space123'}}
2025-08-30T14:16:12.2676215Z                 elif 'MEMBER#' in Key.get('SK', ''):
2025-08-30T14:16:12.2676479Z                     return {}  # Not a member yet
2025-08-30T14:16:12.2676722Z                 else:
2025-08-30T14:16:12.2676906Z                     # Space metadata
2025-08-30T14:16:12.2677126Z                     return {
2025-08-30T14:16:12.2677332Z                         'Item': {
2025-08-30T14:16:12.2677557Z                             'space_id': 'space123',
2025-08-30T14:16:12.2677814Z                             'name': 'Test Space',
2025-08-30T14:16:12.2678068Z                             'owner_id': 'owner123',
2025-08-30T14:16:12.2678318Z                             'is_public': True
2025-08-30T14:16:12.2678549Z                         }
2025-08-30T14:16:12.2678737Z                     }
2025-08-30T14:16:12.2678918Z     
2025-08-30T14:16:12.2679126Z             mock_table.get_item.side_effect = get_item_side_effect
2025-08-30T14:16:12.2679446Z             mock_table.query.return_value = {'Items': []}
2025-08-30T14:16:12.2679732Z             mock_table.put_item.return_value = {}
2025-08-30T14:16:12.2679964Z     
2025-08-30T14:16:12.2680154Z >           result = service.join_space_with_invite_code(
2025-08-30T14:16:12.2680463Z                 "ABC123", "user123", "testuser", "test@example.com"
2025-08-30T14:16:12.2680719Z             )
2025-08-30T14:16:12.2680823Z 
2025-08-30T14:16:12.2680921Z tests/unit/test_final_100_coverage.py:318: 
2025-08-30T14:16:12.2681209Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T14:16:12.2681406Z 
2025-08-30T14:16:12.2681575Z self = <app.services.space.SpaceService object at 0x7fdf2ef76750>
2025-08-30T14:16:12.2681961Z invite_code = 'ABC123', user_id = 'user123', username = 'testuser'
2025-08-30T14:16:12.2682542Z email = 'test@example.com'
2025-08-30T14:16:12.2682683Z 
2025-08-30T14:16:12.2682848Z     def join_space_with_invite_code(self, invite_code: str, user_id: str,
2025-08-30T14:16:12.2683234Z                                    username: str = "", email: str = "") -> Dict[str, Any]:
2025-08-30T14:16:12.2683544Z         """Join a space using invite code."""
2025-08-30T14:16:12.2683789Z         # Look up invite code
2025-08-30T14:16:12.2683995Z         try:
2025-08-30T14:16:12.2684177Z             response = self.table.get_item(
2025-08-30T14:16:12.2684489Z                 Key={'PK': f'INVITE#{invite_code}', 'SK': f'SPACE#{invite_code}'}
2025-08-30T14:16:12.2684786Z             )
2025-08-30T14:16:12.2684942Z     
2025-08-30T14:16:12.2685116Z             if 'Item' not in response:
2025-08-30T14:16:12.2685373Z                 # Try with proper SK pattern
2025-08-30T14:16:12.2685646Z                 invite_response = self.table.query(
2025-08-30T14:16:12.2685992Z                     KeyConditionExpression=Key('PK').eq(f'INVITE#{invite_code}')
2025-08-30T14:16:12.2686428Z                 )
2025-08-30T14:16:12.2686596Z     
2025-08-30T14:16:12.2686779Z                 if not invite_response.get('Items'):
2025-08-30T14:16:12.2687103Z                     raise InvalidInviteCodeError("Invalid invite code")
2025-08-30T14:16:12.2687384Z     
2025-08-30T14:16:12.2687596Z                 space_id = invite_response['Items'][0].get('space_id')
2025-08-30T14:16:12.2687875Z             else:
2025-08-30T14:16:12.2688077Z                 space_id = response['Item'].get('space_id')
2025-08-30T14:16:12.2688331Z     
2025-08-30T14:16:12.2688490Z             if not space_id:
2025-08-30T14:16:12.2688759Z                 raise InvalidInviteCodeError("Invalid invite code")
2025-08-30T14:16:12.2689041Z     
2025-08-30T14:16:12.2689212Z             # Check if already a member
2025-08-30T14:16:12.2689462Z             member_check = self.table.get_item(
2025-08-30T14:16:12.2689764Z                 Key={'PK': f'SPACE#{space_id}', 'SK': f'MEMBER#{user_id}'}
2025-08-30T14:16:12.2690052Z             )
2025-08-30T14:16:12.2690214Z     
2025-08-30T14:16:12.2690373Z             if 'Item' in member_check:
2025-08-30T14:16:12.2690700Z                 raise AlreadyMemberError("You are already a member of this space")
2025-08-30T14:16:12.2691028Z     
2025-08-30T14:16:12.2691179Z             # Add as member
2025-08-30T14:16:12.2691418Z             now = datetime.now(timezone.utc).isoformat()
2025-08-30T14:16:12.2691682Z             member_item = {
2025-08-30T14:16:12.2691889Z                 'PK': f'SPACE#{space_id}',
2025-08-30T14:16:12.2692243Z                 'SK': f'MEMBER#{user_id}',
2025-08-30T14:16:12.2692486Z                 'GSI1PK': f'USER#{user_id}',
2025-08-30T14:16:12.2692736Z                 'GSI1SK': f'SPACE#{space_id}',
2025-08-30T14:16:12.2692980Z                 'user_id': user_id,
2025-08-30T14:16:12.2693235Z                 'username': username,
2025-08-30T14:16:12.2693462Z                 'email': email,
2025-08-30T14:16:12.2693677Z                 'role': 'member',
2025-08-30T14:16:12.2693903Z                 'joined_at': now
2025-08-30T14:16:12.2694108Z             }
2025-08-30T14:16:12.2694171Z     
2025-08-30T14:16:12.2694269Z             self.table.put_item(Item=member_item)
2025-08-30T14:16:12.2694337Z     
2025-08-30T14:16:12.2694412Z             # Get space details
2025-08-30T14:16:12.2694514Z             space = self.get_space(space_id, user_id)
2025-08-30T14:16:12.2694610Z     
2025-08-30T14:16:12.2694683Z             return {
2025-08-30T14:16:12.2694767Z                 'space_id': space_id,
2025-08-30T14:16:12.2694854Z                 'name': space['name'],
2025-08-30T14:16:12.2694929Z                 'role': 'member',
2025-08-30T14:16:12.2695011Z                 'joined_at': now
2025-08-30T14:16:12.2695075Z             }
2025-08-30T14:16:12.2695138Z     
2025-08-30T14:16:12.2695237Z         except InvalidInviteCodeError:
2025-08-30T14:16:12.2695302Z             raise
2025-08-30T14:16:12.2695389Z         except AlreadyMemberError:
2025-08-30T14:16:12.2695588Z             raise
2025-08-30T14:16:12.2695672Z         except Exception as e:
2025-08-30T14:16:12.2695803Z >           raise InvalidInviteCodeError("Invalid invite code")
2025-08-30T14:16:12.2696005Z E           app.services.exceptions.InvalidInviteCodeError: Invalid invite code
2025-08-30T14:16:12.2696011Z 
2025-08-30T14:16:12.2696129Z app/services/space.py:520: InvalidInviteCodeError
2025-08-30T14:16:12.2696279Z __________________________ test_config_lines_106_109 ___________________________
2025-08-30T14:16:12.2696284Z 
2025-08-30T14:16:12.2696366Z     def test_config_lines_106_109():
2025-08-30T14:16:12.2696509Z         """Test for config.py lines 106-109 - Settings validators."""
2025-08-30T14:16:12.2696613Z         from app.core.config import Settings
2025-08-30T14:16:12.2696697Z         from pydantic import Field
2025-08-30T14:16:12.2696767Z     
2025-08-30T14:16:12.2696882Z         # The validators are defined in the Settings class
2025-08-30T14:16:12.2697047Z         # They process cors_origins, cognito_domain, and cognito_redirect_uri
2025-08-30T14:16:12.2697227Z     
2025-08-30T14:16:12.2697316Z         # Test with environment variables
2025-08-30T14:16:12.2697385Z         test_env = {
2025-08-30T14:16:12.2697473Z             'CORS_ORIGINS': '*',
2025-08-30T14:16:12.2697595Z             'COGNITO_DOMAIN': 'https://auth.example.com',
2025-08-30T14:16:12.2697760Z             'COGNITO_REDIRECT_URI': 'http://localhost:3000/callback'
2025-08-30T14:16:12.2697846Z         }
2025-08-30T14:16:12.2697910Z     
2025-08-30T14:16:12.2698038Z         with patch.dict(os.environ, test_env, clear=False):
2025-08-30T14:16:12.2698116Z             settings = Settings()
2025-08-30T14:16:12.2698222Z             # The validators should process these values
2025-08-30T14:16:12.2698325Z             assert settings.cors_origins == ['*']
2025-08-30T14:16:12.2698486Z >           assert settings.cognito_domain == 'https://auth.example.com'
2025-08-30T14:16:12.2698492Z 
2025-08-30T14:16:12.2698607Z tests/unit/test_final_20_lines_coverage.py:173: 
2025-08-30T14:16:12.2698729Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T14:16:12.2698734Z 
2025-08-30T14:16:12.2699404Z self = Settings(environment='test', debug=True, aws_region='us-east-1', dynamodb_table='lifestyle-spaces-test', api_v1_prefix...pire_minutes=30, cors_origins_str='*', cors_allow_credentials=True, cors_allow_methods=['*'], cors_allow_headers=['*'])
2025-08-30T14:16:12.2699490Z item = 'cognito_domain'
2025-08-30T14:16:12.2699496Z 
2025-08-30T14:16:12.2699589Z     def __getattr__(self, item: str) -> Any:
2025-08-30T14:16:12.2699783Z         private_attributes = object.__getattribute__(self, '__private_attributes__')
2025-08-30T14:16:12.2699882Z         if item in private_attributes:
2025-08-30T14:16:12.2699977Z             attribute = private_attributes[item]
2025-08-30T14:16:12.2700074Z             if hasattr(attribute, '__get__'):
2025-08-30T14:16:12.2700217Z                 return attribute.__get__(self, type(self))  # type: ignore
2025-08-30T14:16:12.2700288Z     
2025-08-30T14:16:12.2700363Z             try:
2025-08-30T14:16:12.2700583Z                 # Note: self.__pydantic_private__ cannot be None if self.__private_attributes__ has items
2025-08-30T14:16:12.2700718Z                 return self.__pydantic_private__[item]  # type: ignore
2025-08-30T14:16:12.2700807Z             except KeyError as exc:
2025-08-30T14:16:12.2701030Z                 raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc
2025-08-30T14:16:12.2701101Z         else:
2025-08-30T14:16:12.2701298Z             # `__pydantic_extra__` can fail to be set if the model is not yet fully initialized.
2025-08-30T14:16:12.2701409Z             # See `BaseModel.__repr_args__` for more details
2025-08-30T14:16:12.2701481Z             try:
2025-08-30T14:16:12.2701647Z                 pydantic_extra = object.__getattribute__(self, '__pydantic_extra__')
2025-08-30T14:16:12.2701730Z             except AttributeError:
2025-08-30T14:16:12.2701914Z                 pydantic_extra = None
2025-08-30T14:16:12.2701976Z     
2025-08-30T14:16:12.2702158Z             if pydantic_extra:
2025-08-30T14:16:12.2702228Z                 try:
2025-08-30T14:16:12.2702321Z                     return pydantic_extra[item]
2025-08-30T14:16:12.2702407Z                 except KeyError as exc:
2025-08-30T14:16:12.2702628Z                     raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc
2025-08-30T14:16:12.2702692Z             else:
2025-08-30T14:16:12.2702787Z                 if hasattr(self.__class__, item):
2025-08-30T14:16:12.2702983Z                     return super().__getattribute__(item)  # Raises AttributeError if appropriate
2025-08-30T14:16:12.2703052Z                 else:
2025-08-30T14:16:12.2703143Z                     # this is the current error
2025-08-30T14:16:12.2703342Z >                   raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
2025-08-30T14:16:12.2703649Z E                   AttributeError: 'Settings' object has no attribute 'cognito_domain'
2025-08-30T14:16:12.2703655Z 
2025-08-30T14:16:12.2703962Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/pydantic/main.py:891: AttributeError
2025-08-30T14:16:12.2704110Z __________________________ test_dependencies_line_25 ___________________________
2025-08-30T14:16:12.2704121Z 
2025-08-30T14:16:12.2704206Z     def test_dependencies_line_25():
2025-08-30T14:16:12.2704337Z         """Test for dependencies.py line 25 - No auth header."""
2025-08-30T14:16:12.2704468Z         from app.core.dependencies import get_current_user
2025-08-30T14:16:12.2704560Z         from fastapi import HTTPException
2025-08-30T14:16:12.2704634Z         import asyncio
2025-08-30T14:16:12.2704701Z     
2025-08-30T14:16:12.2704813Z         # Create a request with no authorization header
2025-08-30T14:16:12.2704895Z         mock_request = MagicMock()
2025-08-30T14:16:12.2704984Z         mock_request.headers = {}
2025-08-30T14:16:12.2705055Z     
2025-08-30T14:16:12.2705131Z         async def test():
2025-08-30T14:16:12.2705202Z             try:
2025-08-30T14:16:12.2705299Z                 await get_current_user(mock_request)
2025-08-30T14:16:12.2705381Z                 return False
2025-08-30T14:16:12.2705470Z             except HTTPException as e:
2025-08-30T14:16:12.2705557Z                 assert e.status_code == 401
2025-08-30T14:16:12.2705661Z                 assert e.detail == "Not authenticated"
2025-08-30T14:16:12.2705733Z                 return True
2025-08-30T14:16:12.2705795Z     
2025-08-30T14:16:12.2705882Z >       result = asyncio.run(test())
2025-08-30T14:16:12.2705887Z 
2025-08-30T14:16:12.2705996Z tests/unit/test_final_20_lines_coverage.py:196: 
2025-08-30T14:16:12.2706110Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T14:16:12.2706330Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/asyncio/runners.py:190: in run
2025-08-30T14:16:12.2706422Z     return runner.run(main)
2025-08-30T14:16:12.2706639Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/asyncio/runners.py:118: in run
2025-08-30T14:16:12.2706741Z     return self._loop.run_until_complete(task)
2025-08-30T14:16:12.2707024Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/asyncio/base_events.py:654: in run_until_complete
2025-08-30T14:16:12.2707112Z     return future.result()
2025-08-30T14:16:12.2707218Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T14:16:12.2707223Z 
2025-08-30T14:16:12.2707300Z     async def test():
2025-08-30T14:16:12.2707366Z         try:
2025-08-30T14:16:12.2707459Z >           await get_current_user(mock_request)
2025-08-30T14:16:12.2707629Z E           TypeError: object MagicMock can't be used in 'await' expression
2025-08-30T14:16:12.2707635Z 
2025-08-30T14:16:12.2707774Z tests/unit/test_final_20_lines_coverage.py:189: TypeError
2025-08-30T14:16:12.2707924Z _______________________ test_integration_all_error_paths _______________________
2025-08-30T14:16:12.2708058Z 
2025-08-30T14:16:12.2708140Z     @pytest.mark.asyncio
2025-08-30T14:16:12.2708245Z     async def test_integration_all_error_paths():
2025-08-30T14:16:12.2708388Z         """Integration test covering all error handling paths."""
2025-08-30T14:16:12.2708451Z     
2025-08-30T14:16:12.2708553Z         # Test 1: Spaces ValidationError (line 53)
2025-08-30T14:16:12.2708730Z         with patch('app.api.routes.spaces.SpaceService') as mock_service:
2025-08-30T14:16:12.2708860Z             from app.services.exceptions import ValidationError
2025-08-30T14:16:12.2708977Z             from app.api.routes.spaces import create_space
2025-08-30T14:16:12.2709087Z             from app.models.space import SpaceCreate
2025-08-30T14:16:12.2709181Z             from fastapi import HTTPException
2025-08-30T14:16:12.2709248Z     
2025-08-30T14:16:12.2709459Z             mock_service.return_value.create_space.side_effect = ValidationError("Invalid")
2025-08-30T14:16:12.2709605Z     
2025-08-30T14:16:12.2709743Z             request = SpaceCreate(name="Test", description="Test")
2025-08-30T14:16:12.2709809Z             try:
2025-08-30T14:16:12.2709926Z >               await create_space(request, {"sub": "123"}, "123")
2025-08-30T14:16:12.2710143Z E               TypeError: create_space() takes from 1 to 2 positional arguments but 3 were given
2025-08-30T14:16:12.2710148Z 
2025-08-30T14:16:12.2710283Z tests/unit/test_final_20_lines_coverage.py:253: TypeError
2025-08-30T14:16:12.2710494Z _________ TestMinorFiles100Coverage.test_create_space_validation_error _________
2025-08-30T14:16:12.2710499Z 
2025-08-30T14:16:12.2710738Z self = <tests.unit.test_minor_coverage_100.TestMinorFiles100Coverage object at 0x7fdf36a21390>
2025-08-30T14:16:12.2710911Z client = <starlette.testclient.TestClient object at 0x7fdf2f57aa90>
2025-08-30T14:16:12.2711153Z mock_current_user = {'email': 'test@example.com', 'user_id': 'test-user-123', 'username': 'testuser'}
2025-08-30T14:16:12.2711159Z 
2025-08-30T14:16:12.2711343Z     def test_create_space_validation_error(self, client, mock_current_user):
2025-08-30T14:16:12.2711480Z         """Test POST /spaces handles ValidationError - Line 53."""
2025-08-30T14:16:12.2711553Z         space_data = {
2025-08-30T14:16:12.2711643Z             "name": "",  # Invalid empty name
2025-08-30T14:16:12.2711735Z             "description": "Test space"
2025-08-30T14:16:12.2711800Z         }
2025-08-30T14:16:12.2711861Z     
2025-08-30T14:16:12.2712296Z         with patch('app.api.routes.spaces.get_current_user', return_value=mock_current_user):
2025-08-30T14:16:12.2712436Z             response = client.post("/api/spaces", json=space_data)
2025-08-30T14:16:12.2712550Z             # Pydantic validation should catch this first
2025-08-30T14:16:12.2712653Z >           assert response.status_code in [422, 400]
2025-08-30T14:16:12.2712735Z E           assert 401 in [422, 400]
2025-08-30T14:16:12.2712866Z E            +  where 401 = <Response [401 Unauthorized]>.status_code
2025-08-30T14:16:12.2712883Z 
2025-08-30T14:16:12.2713015Z tests/unit/test_minor_coverage_100.py:40: AssertionError
2025-08-30T14:16:12.2713164Z ------------------------------ Captured log call -------------------------------
2025-08-30T14:16:12.2713433Z INFO     httpx:_client.py:1013 HTTP Request: POST http://testserver/api/spaces "HTTP/1.1 401 Unauthorized"
2025-08-30T14:16:12.2713638Z _______ TestMinorFiles100Coverage.test_create_space_generic_client_error _______
2025-08-30T14:16:12.2713643Z 
2025-08-30T14:16:12.2713884Z self = <tests.unit.test_minor_coverage_100.TestMinorFiles100Coverage object at 0x7fdf36a23610>
2025-08-30T14:16:12.2714055Z client = <starlette.testclient.TestClient object at 0x7fdf36cae650>
2025-08-30T14:16:12.2714284Z mock_current_user = {'email': 'test@example.com', 'user_id': 'test-user-123', 'username': 'testuser'}
2025-08-30T14:16:12.2714296Z 
2025-08-30T14:16:12.2714473Z     def test_create_space_generic_client_error(self, client, mock_current_user):
2025-08-30T14:16:12.2714618Z         """Test POST /spaces handles generic ClientError - Line 63."""
2025-08-30T14:16:12.2714838Z         space_data = {
2025-08-30T14:16:12.2714918Z             "name": "Test Space",
2025-08-30T14:16:12.2715009Z             "description": "Test description"
2025-08-30T14:16:12.2715078Z         }
2025-08-30T14:16:12.2715142Z     
2025-08-30T14:16:12.2715357Z         with patch('app.api.routes.spaces.get_current_user', return_value=mock_current_user):
2025-08-30T14:16:12.2715533Z             with patch('app.api.routes.spaces.SpaceService') as mock_service:
2025-08-30T14:16:12.2715637Z                 # Mock service to raise generic ClientError
2025-08-30T14:16:12.2715723Z                 error = ClientError(
2025-08-30T14:16:12.2715866Z                     error_response={'Error': {'Code': 'InternalServerError'}},
2025-08-30T14:16:12.2715954Z                     operation_name='PutItem'
2025-08-30T14:16:12.2716023Z                 )
2025-08-30T14:16:12.2716167Z                 mock_service.return_value.create_space.side_effect = error
2025-08-30T14:16:12.2716387Z     
2025-08-30T14:16:12.2716526Z                 response = client.post("/api/spaces", json=space_data)
2025-08-30T14:16:12.2716623Z >               assert response.status_code == 500
2025-08-30T14:16:12.2716705Z E               assert 401 == 500
2025-08-30T14:16:12.2716831Z E                +  where 401 = <Response [401 Unauthorized]>.status_code
2025-08-30T14:16:12.2716836Z 
2025-08-30T14:16:12.2716970Z tests/unit/test_minor_coverage_100.py:59: AssertionError
2025-08-30T14:16:12.2717119Z ------------------------------ Captured log call -------------------------------
2025-08-30T14:16:12.2717379Z INFO     httpx:_client.py:1013 HTTP Request: POST http://testserver/api/spaces "HTTP/1.1 401 Unauthorized"
2025-08-30T14:16:12.2717590Z _____ TestMinorFiles100Coverage.test_get_user_spaces_generic_client_error ______
2025-08-30T14:16:12.2717595Z 
2025-08-30T14:16:12.2717827Z self = <tests.unit.test_minor_coverage_100.TestMinorFiles100Coverage object at 0x7fdf36a220d0>
2025-08-30T14:16:12.2718007Z client = <starlette.testclient.TestClient object at 0x7fdf2f0e5ed0>
2025-08-30T14:16:12.2718239Z mock_current_user = {'email': 'test@example.com', 'user_id': 'test-user-123', 'username': 'testuser'}
2025-08-30T14:16:12.2718245Z 
2025-08-30T14:16:12.2718435Z     def test_get_user_spaces_generic_client_error(self, client, mock_current_user):
2025-08-30T14:16:12.2718614Z         """Test GET /users/me/spaces handles generic ClientError - Line 110."""
2025-08-30T14:16:12.2718829Z         with patch('app.api.routes.users.get_current_user', return_value=mock_current_user):
2025-08-30T14:16:12.2718991Z             with patch('app.api.routes.users.SpaceService') as mock_service:
2025-08-30T14:16:12.2719099Z                 # Mock service to raise generic ClientError
2025-08-30T14:16:12.2719179Z                 error = ClientError(
2025-08-30T14:16:12.2719305Z                     error_response={'Error': {'Code': 'UnknownError'}},
2025-08-30T14:16:12.2719397Z                     operation_name='Query'
2025-08-30T14:16:12.2719469Z                 )
2025-08-30T14:16:12.2719630Z                 mock_service.return_value.list_user_spaces.side_effect = error
2025-08-30T14:16:12.2719692Z     
2025-08-30T14:16:12.2719808Z                 response = client.get("/api/users/me/spaces")
2025-08-30T14:16:12.2719911Z >               assert response.status_code == 500
2025-08-30T14:16:12.2719986Z E               assert 404 == 500
2025-08-30T14:16:12.2720102Z E                +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.2720107Z 
2025-08-30T14:16:12.2720244Z tests/unit/test_minor_coverage_100.py:74: AssertionError
2025-08-30T14:16:12.2720387Z ------------------------------ Captured log call -------------------------------
2025-08-30T14:16:12.2720663Z INFO     httpx:_client.py:1013 HTTP Request: GET http://testserver/api/users/me/spaces "HTTP/1.1 404 Not Found"
2025-08-30T14:16:12.2720872Z __ TestMinorFiles100Coverage.test_user_profile_validate_phone_invalid_format ___
2025-08-30T14:16:12.2720969Z 
2025-08-30T14:16:12.2721204Z self = <tests.unit.test_minor_coverage_100.TestMinorFiles100Coverage object at 0x7fdf373b1d90>
2025-08-30T14:16:12.2721209Z 
2025-08-30T14:16:12.2721351Z     def test_user_profile_validate_phone_invalid_format(self):
2025-08-30T14:16:12.2721519Z         """Test UserProfile phone validation with invalid format - Line 48."""
2025-08-30T14:16:12.2721641Z >       from app.models.user_profile import UserProfile
2025-08-30T14:16:12.2722245Z E       ImportError: cannot import name 'UserProfile' from 'app.models.user_profile' (/home/runner/work/lifestyle-spaces/lifestyle-spaces/backend/app/models/user_profile.py)
2025-08-30T14:16:12.2722253Z 
2025-08-30T14:16:12.2722378Z tests/unit/test_minor_coverage_100.py:113: ImportError
2025-08-30T14:16:12.2722593Z ___ TestMinorFiles100Coverage.test_user_profile_validate_avatar_url_invalid ____
2025-08-30T14:16:12.2722598Z 
2025-08-30T14:16:12.2722831Z self = <tests.unit.test_minor_coverage_100.TestMinorFiles100Coverage object at 0x7fdf373b0190>
2025-08-30T14:16:12.2722956Z 
2025-08-30T14:16:12.2723098Z     def test_user_profile_validate_avatar_url_invalid(self):
2025-08-30T14:16:12.2723271Z         """Test UserProfile avatar_url validation with invalid URL - Line 55."""
2025-08-30T14:16:12.2723384Z >       from app.models.user_profile import UserProfile
2025-08-30T14:16:12.2723877Z E       ImportError: cannot import name 'UserProfile' from 'app.models.user_profile' (/home/runner/work/lifestyle-spaces/lifestyle-spaces/backend/app/models/user_profile.py)
2025-08-30T14:16:12.2723882Z 
2025-08-30T14:16:12.2724005Z tests/unit/test_minor_coverage_100.py:125: ImportError
2025-08-30T14:16:12.2724208Z __________ TestMinorFiles100Coverage.test_get_authenticated_user_none __________
2025-08-30T14:16:12.2724212Z 
2025-08-30T14:16:12.2724441Z self = <tests.unit.test_minor_coverage_100.TestMinorFiles100Coverage object at 0x7fdf373b1310>
2025-08-30T14:16:12.2724447Z 
2025-08-30T14:16:12.2724553Z     def test_get_authenticated_user_none(self):
2025-08-30T14:16:12.2724756Z         """Test get_authenticated_user raises exception when user is None - Line 25."""
2025-08-30T14:16:12.2724900Z >       from app.core.dependencies import get_authenticated_user
2025-08-30T14:16:12.2725414Z E       ImportError: cannot import name 'get_authenticated_user' from 'app.core.dependencies' (/home/runner/work/lifestyle-spaces/lifestyle-spaces/backend/app/core/dependencies.py)
2025-08-30T14:16:12.2725420Z 
2025-08-30T14:16:12.2725539Z tests/unit/test_minor_coverage_100.py:138: ImportError
2025-08-30T14:16:12.2725756Z __ TestSpaceService100Coverage.test_update_space_validation_error_empty_name ___
2025-08-30T14:16:12.2725761Z 
2025-08-30T14:16:12.2726006Z self = <tests.unit.test_space_service_100.TestSpaceService100Coverage object at 0x7fdf36aa9750>
2025-08-30T14:16:12.2726195Z space_service = <app.services.space.SpaceService object at 0x7fdf2ef72110>
2025-08-30T14:16:12.2726347Z mock_table = <Mock name='resource().Table()' id='140596553160720'>
2025-08-30T14:16:12.2726356Z 
2025-08-30T14:16:12.2726567Z     def test_update_space_validation_error_empty_name(self, space_service, mock_table):
2025-08-30T14:16:12.2726752Z         """Test update_space raises ValidationError for empty name - Line 207."""
2025-08-30T14:16:12.2726855Z         from app.models.space import SpaceUpdate
2025-08-30T14:16:12.2726918Z     
2025-08-30T14:16:12.2727010Z         # Mock successful get_item
2025-08-30T14:16:12.2727103Z         mock_table.get_item.return_value = {
2025-08-30T14:16:12.2727174Z             'Item': {
2025-08-30T14:16:12.2727265Z                 'space_id': 'space123',
2025-08-30T14:16:12.2727348Z                 'owner_id': 'user123',
2025-08-30T14:16:12.2727424Z                 'name': 'Old Name'
2025-08-30T14:16:12.2727497Z             }
2025-08-30T14:16:12.2727562Z         }
2025-08-30T14:16:12.2727630Z     
2025-08-30T14:16:12.2727720Z         # Mock can_edit_space to return True
2025-08-30T14:16:12.2727892Z         with patch.object(space_service, 'can_edit_space', return_value=True):
2025-08-30T14:16:12.2728113Z             # Test with empty string after strip
2025-08-30T14:16:12.2728202Z >           update = SpaceUpdate(name="   ")
2025-08-30T14:16:12.2728418Z E           pydantic_core._pydantic_core.ValidationError: 1 validation error for SpaceUpdate
2025-08-30T14:16:12.2728491Z E           name
2025-08-30T14:16:12.2728728Z E             Value error, Space name cannot be empty [type=value_error, input_value='   ', input_type=str]
2025-08-30T14:16:12.2728936Z E               For further information visit https://errors.pydantic.dev/2.10/v/value_error
2025-08-30T14:16:12.2728941Z 
2025-08-30T14:16:12.2729077Z tests/unit/test_space_service_100.py:81: ValidationError
2025-08-30T14:16:12.2729289Z ___ TestSpaceService100Coverage.test_list_user_spaces_handles_missing_space ____
2025-08-30T14:16:12.2729294Z 
2025-08-30T14:16:12.2729540Z self = <tests.unit.test_space_service_100.TestSpaceService100Coverage object at 0x7fdf36aa9b10>
2025-08-30T14:16:12.2729724Z space_service = <app.services.space.SpaceService object at 0x7fdf2f9a8f90>
2025-08-30T14:16:12.2729956Z mock_table = <Mock name='resource().Table()' id='140596546281360'>
2025-08-30T14:16:12.2729961Z 
2025-08-30T14:16:12.2730158Z     def test_list_user_spaces_handles_missing_space(self, space_service, mock_table):
2025-08-30T14:16:12.2730360Z         """Test list_user_spaces handles SpaceNotFoundError gracefully - Lines 326-327."""
2025-08-30T14:16:12.2730529Z         # Mock query to return user's space memberships with proper GSI fields
2025-08-30T14:16:12.2730620Z         mock_table.query.return_value = {
2025-08-30T14:16:12.2730692Z             'Items': [
2025-08-30T14:16:12.2730803Z                 {'GSI1SK': 'SPACE#space1', 'role': 'admin'},
2025-08-30T14:16:12.2730903Z                 {'GSI1SK': 'SPACE#space2', 'role': 'member'}
2025-08-30T14:16:12.2730970Z             ]
2025-08-30T14:16:12.2731032Z         }
2025-08-30T14:16:12.2731093Z     
2025-08-30T14:16:12.2731232Z         # Mock get_item to fail for first space, succeed for second
2025-08-30T14:16:12.2731326Z         def get_item_side_effect(Key):
2025-08-30T14:16:12.2731411Z             if 'space1' in Key['PK']:
2025-08-30T14:16:12.2731496Z                 raise ClientError(
2025-08-30T14:16:12.2731660Z                     error_response={'Error': {'Code': 'ResourceNotFoundException'}},
2025-08-30T14:16:12.2731747Z                     operation_name='GetItem'
2025-08-30T14:16:12.2731817Z                 )
2025-08-30T14:16:12.2731885Z             return {
2025-08-30T14:16:12.2731962Z                 'Item': {
2025-08-30T14:16:12.2732140Z                     'space_id': 'space2',
2025-08-30T14:16:12.2732218Z                     'name': 'Space 2',
2025-08-30T14:16:12.2732308Z                     'description': 'Test',
2025-08-30T14:16:12.2732401Z                     'created_at': '2024-01-01T00:00:00Z',
2025-08-30T14:16:12.2732491Z                     'updated_at': '2024-01-01T00:00:00Z'
2025-08-30T14:16:12.2732562Z                 }
2025-08-30T14:16:12.2732625Z             }
2025-08-30T14:16:12.2732696Z     
2025-08-30T14:16:12.2732829Z         mock_table.get_item.side_effect = get_item_side_effect
2025-08-30T14:16:12.2732892Z     
2025-08-30T14:16:12.2732996Z         # Should only return the space that exists
2025-08-30T14:16:12.2733114Z >       result = space_service.list_user_spaces("user123")
2025-08-30T14:16:12.2733119Z 
2025-08-30T14:16:12.2733215Z tests/unit/test_space_service_100.py:115: 
2025-08-30T14:16:12.2733329Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T14:16:12.2733334Z 
2025-08-30T14:16:12.2733495Z self = <app.services.space.SpaceService object at 0x7fdf2f9a8f90>
2025-08-30T14:16:12.2733672Z user_id = 'user123', page = 1, page_size = 20, search = None, is_public = None
2025-08-30T14:16:12.2733740Z role = None
2025-08-30T14:16:12.2733745Z 
2025-08-30T14:16:12.2733921Z     def list_user_spaces(self, user_id: str, page: int = 1, page_size: int = 20,
2025-08-30T14:16:12.2734087Z                         search: Optional[str] = None, is_public: Optional[bool] = None,
2025-08-30T14:16:12.2734339Z                         role: Optional[str] = None) -> Dict[str, Any]:
2025-08-30T14:16:12.2734461Z         """List spaces for a user with pagination/filters."""
2025-08-30T14:16:12.2734552Z         # Query GSI1 for user's spaces
2025-08-30T14:16:12.2734641Z         response = self.table.query(
2025-08-30T14:16:12.2734725Z             IndexName='GSI1',
2025-08-30T14:16:12.2734986Z             KeyConditionExpression=Key('GSI1PK').eq(f'USER#{user_id}') & Key('GSI1SK').begins_with('SPACE#')
2025-08-30T14:16:12.2735053Z         )
2025-08-30T14:16:12.2735121Z     
2025-08-30T14:16:12.2735191Z         spaces = []
2025-08-30T14:16:12.2735288Z         for item in response.get('Items', []):
2025-08-30T14:16:12.2735410Z             space_id = item['GSI1SK'].replace('SPACE#', '')
2025-08-30T14:16:12.2735503Z             user_role = item.get('role', 'member')
2025-08-30T14:16:12.2735565Z     
2025-08-30T14:16:12.2735665Z             # Apply role filter if specified
2025-08-30T14:16:12.2735892Z             if role and role != user_role:
2025-08-30T14:16:12.2735969Z                 continue
2025-08-30T14:16:12.2736030Z     
2025-08-30T14:16:12.2736096Z             try:
2025-08-30T14:16:12.2736190Z                 # Get full space details
2025-08-30T14:16:12.2736295Z                 space_response = self.table.get_item(
2025-08-30T14:16:12.2736418Z                     Key={'PK': f'SPACE#{space_id}', 'SK': 'METADATA'}
2025-08-30T14:16:12.2736488Z                 )
2025-08-30T14:16:12.2736555Z     
2025-08-30T14:16:12.2736649Z                 if 'Item' not in space_response:
2025-08-30T14:16:12.2736731Z                     continue
2025-08-30T14:16:12.2736792Z     
2025-08-30T14:16:12.2736890Z                 space = space_response['Item']
2025-08-30T14:16:12.2736951Z     
2025-08-30T14:16:12.2737048Z                 # Apply is_public filter if specified
2025-08-30T14:16:12.2737224Z                 if is_public is not None and space.get('is_public', False) != is_public:
2025-08-30T14:16:12.2737305Z                     continue
2025-08-30T14:16:12.2737368Z     
2025-08-30T14:16:12.2737468Z                 # Apply search filter if specified
2025-08-30T14:16:12.2737541Z                 if search:
2025-08-30T14:16:12.2737634Z                     search_lower = search.lower()
2025-08-30T14:16:12.2737779Z                     name_match = search_lower in space.get('name', '').lower()
2025-08-30T14:16:12.2737946Z                     desc_match = search_lower in (space.get('description') or '').lower()
2025-08-30T14:16:12.2738048Z                     if not (name_match or desc_match):
2025-08-30T14:16:12.2738122Z                         continue
2025-08-30T14:16:12.2738185Z     
2025-08-30T14:16:12.2738270Z                 # Get member count
2025-08-30T14:16:12.2738373Z                 members_response = self.table.query(
2025-08-30T14:16:12.2738615Z                     KeyConditionExpression=Key('PK').eq(f'SPACE#{space_id}') & Key('SK').begins_with('MEMBER#')
2025-08-30T14:16:12.2738700Z                 )
2025-08-30T14:16:12.2738832Z                 member_count = len(members_response.get('Items', []))
2025-08-30T14:16:12.2738902Z     
2025-08-30T14:16:12.2738982Z                 # Build space object
2025-08-30T14:16:12.2739057Z                 space_obj = {
2025-08-30T14:16:12.2739143Z >                   'id': space['id'],
2025-08-30T14:16:12.2739224Z                     'name': space['name'],
2025-08-30T14:16:12.2739330Z                     'description': space.get('description'),
2025-08-30T14:16:12.2739436Z                     'type': space.get('type', 'workspace'),
2025-08-30T14:16:12.2739541Z                     'is_public': space.get('is_public', False),
2025-08-30T14:16:12.2739632Z                     'owner_id': space['owner_id'],
2025-08-30T14:16:12.2739733Z                     'created_at': space['created_at'],
2025-08-30T14:16:12.2739822Z                     'updated_at': space['updated_at'],
2025-08-30T14:16:12.2739921Z                     'member_count': member_count,
2025-08-30T14:16:12.2740096Z                     'user_role': user_role
2025-08-30T14:16:12.2740160Z                 }
2025-08-30T14:16:12.2740241Z E               KeyError: 'id'
2025-08-30T14:16:12.2740247Z 
2025-08-30T14:16:12.2740333Z app/services/space.py:313: KeyError
2025-08-30T14:16:12.2740563Z _ TestSpaceService100Coverage.test_list_user_spaces_handles_space_not_found_error _
2025-08-30T14:16:12.2740575Z 
2025-08-30T14:16:12.2740826Z self = <tests.unit.test_space_service_100.TestSpaceService100Coverage object at 0x7fdf36aaa690>
2025-08-30T14:16:12.2741019Z space_service = <app.services.space.SpaceService object at 0x7fdf2e9415d0>
2025-08-30T14:16:12.2741166Z mock_table = <Mock name='resource().Table()' id='140596675262352'>
2025-08-30T14:16:12.2741173Z 
2025-08-30T14:16:12.2741395Z     def test_list_user_spaces_handles_space_not_found_error(self, space_service, mock_table):
2025-08-30T14:16:12.2741593Z         """Test list_user_spaces handles SpaceNotFoundError exception - Lines 326-327."""
2025-08-30T14:16:12.2741852Z         # Mock query to return user's space memberships with proper GSI fields
2025-08-30T14:16:12.2741942Z         mock_table.query.return_value = {
2025-08-30T14:16:12.2742118Z             'Items': [
2025-08-30T14:16:12.2742221Z                 {'GSI1SK': 'SPACE#space1', 'role': 'admin'}
2025-08-30T14:16:12.2742286Z             ]
2025-08-30T14:16:12.2742360Z         }
2025-08-30T14:16:12.2742421Z     
2025-08-30T14:16:12.2742528Z         # Mock get_space to raise SpaceNotFoundError
2025-08-30T14:16:12.2742791Z         with patch.object(space_service, 'get_space', side_effect=SpaceNotFoundError("Space not found")):
2025-08-30T14:16:12.2742911Z >           result = space_service.list_user_spaces("user123")
2025-08-30T14:16:12.2742916Z 
2025-08-30T14:16:12.2743018Z tests/unit/test_space_service_100.py:131: 
2025-08-30T14:16:12.2743128Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T14:16:12.2743133Z 
2025-08-30T14:16:12.2743295Z self = <app.services.space.SpaceService object at 0x7fdf2e9415d0>
2025-08-30T14:16:12.2743479Z user_id = 'user123', page = 1, page_size = 20, search = None, is_public = None
2025-08-30T14:16:12.2743548Z role = None
2025-08-30T14:16:12.2743553Z 
2025-08-30T14:16:12.2743732Z     def list_user_spaces(self, user_id: str, page: int = 1, page_size: int = 20,
2025-08-30T14:16:12.2743888Z                         search: Optional[str] = None, is_public: Optional[bool] = None,
2025-08-30T14:16:12.2744005Z                         role: Optional[str] = None) -> Dict[str, Any]:
2025-08-30T14:16:12.2744133Z         """List spaces for a user with pagination/filters."""
2025-08-30T14:16:12.2744219Z         # Query GSI1 for user's spaces
2025-08-30T14:16:12.2744306Z         response = self.table.query(
2025-08-30T14:16:12.2744393Z             IndexName='GSI1',
2025-08-30T14:16:12.2744639Z             KeyConditionExpression=Key('GSI1PK').eq(f'USER#{user_id}') & Key('GSI1SK').begins_with('SPACE#')
2025-08-30T14:16:12.2744709Z         )
2025-08-30T14:16:12.2744778Z     
2025-08-30T14:16:12.2744849Z         spaces = []
2025-08-30T14:16:12.2744953Z         for item in response.get('Items', []):
2025-08-30T14:16:12.2745064Z             space_id = item['GSI1SK'].replace('SPACE#', '')
2025-08-30T14:16:12.2745158Z             user_role = item.get('role', 'member')
2025-08-30T14:16:12.2745226Z     
2025-08-30T14:16:12.2745318Z             # Apply role filter if specified
2025-08-30T14:16:12.2745402Z             if role and role != user_role:
2025-08-30T14:16:12.2745481Z                 continue
2025-08-30T14:16:12.2745544Z     
2025-08-30T14:16:12.2745609Z             try:
2025-08-30T14:16:12.2745716Z                 # Get full space details
2025-08-30T14:16:12.2745825Z                 space_response = self.table.get_item(
2025-08-30T14:16:12.2745945Z                     Key={'PK': f'SPACE#{space_id}', 'SK': 'METADATA'}
2025-08-30T14:16:12.2746009Z                 )
2025-08-30T14:16:12.2746072Z     
2025-08-30T14:16:12.2746168Z >               if 'Item' not in space_response:
2025-08-30T14:16:12.2746416Z E               TypeError: argument of type 'Mock' is not iterable
2025-08-30T14:16:12.2746422Z 
2025-08-30T14:16:12.2746512Z app/services/space.py:288: TypeError
2025-08-30T14:16:12.2746715Z ___________ TestSpaceService100Coverage.test_get_space_client_error ____________
2025-08-30T14:16:12.2746720Z 
2025-08-30T14:16:12.2746965Z self = <tests.unit.test_space_service_100.TestSpaceService100Coverage object at 0x7fdf3750d510>
2025-08-30T14:16:12.2747157Z space_service = <app.services.space.SpaceService object at 0x7fdf36dc5790>
2025-08-30T14:16:12.2747296Z mock_table = <Mock name='resource().Table()' id='140596415097424'>
2025-08-30T14:16:12.2747301Z 
2025-08-30T14:16:12.2747450Z     def test_get_space_client_error(self, space_service, mock_table):
2025-08-30T14:16:12.2747596Z         """Test get_space handles generic ClientError - Line 394."""
2025-08-30T14:16:12.2747711Z         # Mock table.get_item to raise generic ClientError
2025-08-30T14:16:12.2747943Z         mock_table.get_item.side_effect = ClientError(
2025-08-30T14:16:12.2748087Z             error_response={'Error': {'Code': 'InternalServerError'}},
2025-08-30T14:16:12.2748171Z             operation_name='GetItem'
2025-08-30T14:16:12.2748243Z         )
2025-08-30T14:16:12.2748305Z     
2025-08-30T14:16:12.2748495Z         with pytest.raises(SpaceNotFoundError, match="Space space123 not found"):
2025-08-30T14:16:12.2748609Z >           space_service.get_space("space123", "user123")
2025-08-30T14:16:12.2748614Z 
2025-08-30T14:16:12.2748709Z tests/unit/test_space_service_100.py:144: 
2025-08-30T14:16:12.2748822Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T14:16:12.2748914Z app/services/space.py:148: in get_space
2025-08-30T14:16:12.2749000Z     response = self.table.get_item(
2025-08-30T14:16:12.2749243Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1124: in __call__
2025-08-30T14:16:12.2749338Z     return self._mock_call(*args, **kwargs)
2025-08-30T14:16:12.2749582Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1128: in _mock_call
2025-08-30T14:16:12.2749699Z     return self._execute_mock_call(*args, **kwargs)
2025-08-30T14:16:12.2749804Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T14:16:12.2749809Z 
2025-08-30T14:16:12.2749983Z self = <Mock name='resource().Table().get_item' id='140596507519504'>, args = ()
2025-08-30T14:16:12.2750110Z kwargs = {'Key': {'PK': 'SPACE#space123', 'SK': 'METADATA'}}
2025-08-30T14:16:12.2750403Z effect = ClientError('An error occurred (InternalServerError) when calling the GetItem operation: Unknown')
2025-08-30T14:16:12.2750409Z 
2025-08-30T14:16:12.2750527Z     def _execute_mock_call(self, /, *args, **kwargs):
2025-08-30T14:16:12.2750687Z         # separate from _increment_mock_call so that awaited functions are
2025-08-30T14:16:12.2750883Z         # executed separately from their call, also AsyncMock overrides this method
2025-08-30T14:16:12.2750953Z     
2025-08-30T14:16:12.2751035Z         effect = self.side_effect
2025-08-30T14:16:12.2751119Z         if effect is not None:
2025-08-30T14:16:12.2751203Z             if _is_exception(effect):
2025-08-30T14:16:12.2751279Z >               raise effect
2025-08-30T14:16:12.2751630Z E               botocore.exceptions.ClientError: An error occurred (InternalServerError) when calling the GetItem operation: Unknown
2025-08-30T14:16:12.2751636Z 
2025-08-30T14:16:12.2751867Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1183: ClientError
2025-08-30T14:16:12.2752264Z _________ TestSpaceService100Coverage.test_get_user_role_client_error __________
2025-08-30T14:16:12.2752276Z 
2025-08-30T14:16:12.2752543Z self = <tests.unit.test_space_service_100.TestSpaceService100Coverage object at 0x7fdf3709be90>
2025-08-30T14:16:12.2752731Z space_service = <app.services.space.SpaceService object at 0x7fdf2c32e650>
2025-08-30T14:16:12.2752878Z mock_table = <Mock name='resource().Table()' id='140596674785296'>
2025-08-30T14:16:12.2753017Z 
2025-08-30T14:16:12.2753183Z     def test_get_user_role_client_error(self, space_service, mock_table):
2025-08-30T14:16:12.2753374Z         """Test get_user_role handles ClientError and returns None - Lines 453-454."""
2025-08-30T14:16:12.2753473Z         # Mock table.get_item to raise ClientError
2025-08-30T14:16:12.2753582Z         mock_table.get_item.side_effect = ClientError(
2025-08-30T14:16:12.2753730Z             error_response={'Error': {'Code': 'InternalServerError'}},
2025-08-30T14:16:12.2753812Z             operation_name='GetItem'
2025-08-30T14:16:12.2753881Z         )
2025-08-30T14:16:12.2753945Z     
2025-08-30T14:16:12.2754085Z >       result = space_service.get_user_role("space123", "user123")
2025-08-30T14:16:12.2754279Z E       AttributeError: 'SpaceService' object has no attribute 'get_user_role'
2025-08-30T14:16:12.2754284Z 
2025-08-30T14:16:12.2754429Z tests/unit/test_space_service_100.py:154: AttributeError
2025-08-30T14:16:12.2754758Z ____ TestSpaceService100Coverage.test_join_space_success_flow_lines_490_508 ____
2025-08-30T14:16:12.2754764Z 
2025-08-30T14:16:12.2754935Z self = <app.services.space.SpaceService object at 0x7fdf2f6abe90>
2025-08-30T14:16:12.2755079Z invite_code = 'ABC123', user_id = 'user123', username = 'testuser'
2025-08-30T14:16:12.2755170Z email = 'test@example.com'
2025-08-30T14:16:12.2755176Z 
2025-08-30T14:16:12.2755336Z     def join_space_with_invite_code(self, invite_code: str, user_id: str,
2025-08-30T14:16:12.2755471Z                                    username: str = "", email: str = "") -> Dict[str, Any]:
2025-08-30T14:16:12.2755572Z         """Join a space using invite code."""
2025-08-30T14:16:12.2755649Z         # Look up invite code
2025-08-30T14:16:12.2755715Z         try:
2025-08-30T14:16:12.2755820Z             response = self.table.get_item(
2025-08-30T14:16:12.2755960Z                 Key={'PK': f'INVITE#{invite_code}', 'SK': f'SPACE#{invite_code}'}
2025-08-30T14:16:12.2756028Z             )
2025-08-30T14:16:12.2756099Z     
2025-08-30T14:16:12.2756199Z             if 'Item' not in response:
2025-08-30T14:16:12.2756308Z                 # Try with proper SK pattern
2025-08-30T14:16:12.2756407Z                 invite_response = self.table.query(
2025-08-30T14:16:12.2756566Z                     KeyConditionExpression=Key('PK').eq(f'INVITE#{invite_code}')
2025-08-30T14:16:12.2756636Z                 )
2025-08-30T14:16:12.2756699Z     
2025-08-30T14:16:12.2756799Z                 if not invite_response.get('Items'):
2025-08-30T14:16:12.2756940Z                     raise InvalidInviteCodeError("Invalid invite code")
2025-08-30T14:16:12.2757003Z     
2025-08-30T14:16:12.2757131Z                 space_id = invite_response['Items'][0].get('space_id')
2025-08-30T14:16:12.2757197Z             else:
2025-08-30T14:16:12.2757301Z                 space_id = response['Item'].get('space_id')
2025-08-30T14:16:12.2757369Z     
2025-08-30T14:16:12.2757445Z             if not space_id:
2025-08-30T14:16:12.2757578Z                 raise InvalidInviteCodeError("Invalid invite code")
2025-08-30T14:16:12.2757650Z     
2025-08-30T14:16:12.2757734Z             # Check if already a member
2025-08-30T14:16:12.2757831Z             member_check = self.table.get_item(
2025-08-30T14:16:12.2757960Z                 Key={'PK': f'SPACE#{space_id}', 'SK': f'MEMBER#{user_id}'}
2025-08-30T14:16:12.2758024Z             )
2025-08-30T14:16:12.2758093Z     
2025-08-30T14:16:12.2758176Z             if 'Item' in member_check:
2025-08-30T14:16:12.2758351Z                 raise AlreadyMemberError("You are already a member of this space")
2025-08-30T14:16:12.2758419Z     
2025-08-30T14:16:12.2758492Z             # Add as member
2025-08-30T14:16:12.2758605Z             now = datetime.now(timezone.utc).isoformat()
2025-08-30T14:16:12.2758684Z             member_item = {
2025-08-30T14:16:12.2758771Z                 'PK': f'SPACE#{space_id}',
2025-08-30T14:16:12.2758855Z                 'SK': f'MEMBER#{user_id}',
2025-08-30T14:16:12.2758949Z                 'GSI1PK': f'USER#{user_id}',
2025-08-30T14:16:12.2759130Z                 'GSI1SK': f'SPACE#{space_id}',
2025-08-30T14:16:12.2759212Z                 'user_id': user_id,
2025-08-30T14:16:12.2759293Z                 'username': username,
2025-08-30T14:16:12.2759369Z                 'email': email,
2025-08-30T14:16:12.2759452Z                 'role': 'member',
2025-08-30T14:16:12.2759531Z                 'joined_at': now
2025-08-30T14:16:12.2759596Z             }
2025-08-30T14:16:12.2759664Z     
2025-08-30T14:16:12.2759762Z             self.table.put_item(Item=member_item)
2025-08-30T14:16:12.2759828Z     
2025-08-30T14:16:12.2759912Z             # Get space details
2025-08-30T14:16:12.2760050Z >           space = self.get_space(space_id, user_id)
2025-08-30T14:16:12.2760055Z 
2025-08-30T14:16:12.2760143Z app/services/space.py:506: 
2025-08-30T14:16:12.2760251Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T14:16:12.2760256Z 
2025-08-30T14:16:12.2760500Z self = <app.services.space.SpaceService object at 0x7fdf2f6abe90>
2025-08-30T14:16:12.2760606Z space_id = 'space123', user_id = 'user123'
2025-08-30T14:16:12.2760610Z 
2025-08-30T14:16:12.2760766Z     def get_space(self, space_id: str, user_id: str) -> Dict[str, Any]:
2025-08-30T14:16:12.2760888Z         """Get space by ID (check membership or public)."""
2025-08-30T14:16:12.2760968Z         # Get space metadata
2025-08-30T14:16:12.2761056Z         response = self.table.get_item(
2025-08-30T14:16:12.2761173Z             Key={'PK': f'SPACE#{space_id}', 'SK': 'METADATA'}
2025-08-30T14:16:12.2761237Z         )
2025-08-30T14:16:12.2761298Z     
2025-08-30T14:16:12.2761385Z         if 'Item' not in response:
2025-08-30T14:16:12.2761522Z             raise SpaceNotFoundError(f"Space {space_id} not found")
2025-08-30T14:16:12.2761584Z     
2025-08-30T14:16:12.2761674Z         space = response['Item']
2025-08-30T14:16:12.2761735Z     
2025-08-30T14:16:12.2761818Z         # Check if user is a member
2025-08-30T14:16:12.2761923Z         member_response = self.table.get_item(
2025-08-30T14:16:12.2762153Z             Key={'PK': f'SPACE#{space_id}', 'SK': f'MEMBER#{user_id}'}
2025-08-30T14:16:12.2762223Z         )
2025-08-30T14:16:12.2762314Z         is_member = 'Item' in member_response
2025-08-30T14:16:12.2762376Z     
2025-08-30T14:16:12.2762501Z         # If not a member and space is not public, deny access
2025-08-30T14:16:12.2762623Z         if not is_member and not space.get('is_public', False):
2025-08-30T14:16:12.2762780Z             raise UnauthorizedError("You are not a member of this space")
2025-08-30T14:16:12.2762846Z     
2025-08-30T14:16:12.2762925Z         # Check if user is owner
2025-08-30T14:16:12.2763021Z         is_owner = space['owner_id'] == user_id
2025-08-30T14:16:12.2763084Z     
2025-08-30T14:16:12.2763157Z         # Get member count
2025-08-30T14:16:12.2763254Z         members_response = self.table.query(
2025-08-30T14:16:12.2763489Z             KeyConditionExpression=Key('PK').eq(f'SPACE#{space_id}') & Key('SK').begins_with('MEMBER#')
2025-08-30T14:16:12.2763562Z         )
2025-08-30T14:16:12.2763695Z         member_count = len(members_response.get('Items', []))
2025-08-30T14:16:12.2763758Z     
2025-08-30T14:16:12.2763823Z         return {
2025-08-30T14:16:12.2763906Z >           'id': space['id'],
2025-08-30T14:16:12.2763985Z             'name': space['name'],
2025-08-30T14:16:12.2764095Z             'description': space.get('description'),
2025-08-30T14:16:12.2764192Z             'type': space.get('type', 'workspace'),
2025-08-30T14:16:12.2764295Z             'is_public': space.get('is_public', False),
2025-08-30T14:16:12.2764387Z             'owner_id': space['owner_id'],
2025-08-30T14:16:12.2764476Z             'created_at': space['created_at'],
2025-08-30T14:16:12.2764566Z             'updated_at': space['updated_at'],
2025-08-30T14:16:12.2764657Z             'member_count': member_count,
2025-08-30T14:16:12.2764731Z             'is_owner': is_owner
2025-08-30T14:16:12.2764795Z         }
2025-08-30T14:16:12.2765000Z E       KeyError: 'id'
2025-08-30T14:16:12.2765005Z 
2025-08-30T14:16:12.2765092Z app/services/space.py:177: KeyError
2025-08-30T14:16:12.2765097Z 
2025-08-30T14:16:12.2765269Z During handling of the above exception, another exception occurred:
2025-08-30T14:16:12.2765274Z 
2025-08-30T14:16:12.2765520Z self = <tests.unit.test_space_service_100.TestSpaceService100Coverage object at 0x7fdf3709a210>
2025-08-30T14:16:12.2765708Z space_service = <app.services.space.SpaceService object at 0x7fdf2f6abe90>
2025-08-30T14:16:12.2765855Z mock_table = <Mock name='resource().Table()' id='140596415655568'>
2025-08-30T14:16:12.2765860Z 
2025-08-30T14:16:12.2766051Z     def test_join_space_success_flow_lines_490_508(self, space_service, mock_table):
2025-08-30T14:16:12.2766199Z         """Test successful join_space flow covering lines 490-508."""
2025-08-30T14:16:12.2766287Z         # Setup mocks for successful flow
2025-08-30T14:16:12.2766379Z         # Mock member check - not a member yet
2025-08-30T14:16:12.2766630Z         def get_item_side_effect(Key):
2025-08-30T14:16:12.2766713Z             if 'INVITE#' in Key['PK']:
2025-08-30T14:16:12.2766821Z                 return {'Item': {'space_id': 'space123'}}
2025-08-30T14:16:12.2766944Z             elif 'MEMBER#' in Key['SK'] and 'user123' in Key['SK']:
2025-08-30T14:16:12.2767031Z                 return {}  # Not a member yet
2025-08-30T14:16:12.2767105Z             else:
2025-08-30T14:16:12.2767191Z                 # For space metadata lookup
2025-08-30T14:16:12.2767263Z                 return {
2025-08-30T14:16:12.2767343Z                     'Item': {
2025-08-30T14:16:12.2767431Z                         'space_id': 'space123',
2025-08-30T14:16:12.2767514Z                         'name': 'Test Space',
2025-08-30T14:16:12.2767604Z                         'owner_id': 'owner123',
2025-08-30T14:16:12.2767683Z                         'is_public': True
2025-08-30T14:16:12.2767757Z                     }
2025-08-30T14:16:12.2767821Z                 }
2025-08-30T14:16:12.2767892Z     
2025-08-30T14:16:12.2768026Z         mock_table.get_item.side_effect = get_item_side_effect
2025-08-30T14:16:12.2768092Z     
2025-08-30T14:16:12.2768195Z         # Mock query for members list (for get_space)
2025-08-30T14:16:12.2768292Z         mock_table.query.return_value = {
2025-08-30T14:16:12.2768361Z             'Items': [
2025-08-30T14:16:12.2768492Z                 {'user_id': 'owner123', 'role': 'owner', 'username': 'owner'}
2025-08-30T14:16:12.2768563Z             ]
2025-08-30T14:16:12.2768625Z         }
2025-08-30T14:16:12.2768691Z     
2025-08-30T14:16:12.2768775Z         # Mock successful put_item
2025-08-30T14:16:12.2768866Z         mock_table.put_item.return_value = {}
2025-08-30T14:16:12.2768933Z     
2025-08-30T14:16:12.2769007Z         # Call the method
2025-08-30T14:16:12.2769128Z >       result = space_service.join_space_with_invite_code(
2025-08-30T14:16:12.2769249Z             "ABC123", "user123", "testuser", "test@example.com"
2025-08-30T14:16:12.2769311Z         )
2025-08-30T14:16:12.2769325Z 
2025-08-30T14:16:12.2769421Z tests/unit/test_space_service_100.py:247: 
2025-08-30T14:16:12.2769534Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T14:16:12.2769538Z 
2025-08-30T14:16:12.2769698Z self = <app.services.space.SpaceService object at 0x7fdf2f6abe90>
2025-08-30T14:16:12.2769851Z invite_code = 'ABC123', user_id = 'user123', username = 'testuser'
2025-08-30T14:16:12.2769933Z email = 'test@example.com'
2025-08-30T14:16:12.2769938Z 
2025-08-30T14:16:12.2770102Z     def join_space_with_invite_code(self, invite_code: str, user_id: str,
2025-08-30T14:16:12.2770248Z                                    username: str = "", email: str = "") -> Dict[str, Any]:
2025-08-30T14:16:12.2770343Z         """Join a space using invite code."""
2025-08-30T14:16:12.2770430Z         # Look up invite code
2025-08-30T14:16:12.2770497Z         try:
2025-08-30T14:16:12.2770587Z             response = self.table.get_item(
2025-08-30T14:16:12.2770741Z                 Key={'PK': f'INVITE#{invite_code}', 'SK': f'SPACE#{invite_code}'}
2025-08-30T14:16:12.2770895Z             )
2025-08-30T14:16:12.2770959Z     
2025-08-30T14:16:12.2771053Z             if 'Item' not in response:
2025-08-30T14:16:12.2771147Z                 # Try with proper SK pattern
2025-08-30T14:16:12.2771248Z                 invite_response = self.table.query(
2025-08-30T14:16:12.2771412Z                     KeyConditionExpression=Key('PK').eq(f'INVITE#{invite_code}')
2025-08-30T14:16:12.2771476Z                 )
2025-08-30T14:16:12.2771544Z     
2025-08-30T14:16:12.2771642Z                 if not invite_response.get('Items'):
2025-08-30T14:16:12.2771773Z                     raise InvalidInviteCodeError("Invalid invite code")
2025-08-30T14:16:12.2771841Z     
2025-08-30T14:16:12.2771965Z                 space_id = invite_response['Items'][0].get('space_id')
2025-08-30T14:16:12.2772128Z             else:
2025-08-30T14:16:12.2772242Z                 space_id = response['Item'].get('space_id')
2025-08-30T14:16:12.2772434Z     
2025-08-30T14:16:12.2772511Z             if not space_id:
2025-08-30T14:16:12.2772647Z                 raise InvalidInviteCodeError("Invalid invite code")
2025-08-30T14:16:12.2772710Z     
2025-08-30T14:16:12.2772799Z             # Check if already a member
2025-08-30T14:16:12.2772891Z             member_check = self.table.get_item(
2025-08-30T14:16:12.2773016Z                 Key={'PK': f'SPACE#{space_id}', 'SK': f'MEMBER#{user_id}'}
2025-08-30T14:16:12.2773086Z             )
2025-08-30T14:16:12.2773146Z     
2025-08-30T14:16:12.2773228Z             if 'Item' in member_check:
2025-08-30T14:16:12.2773406Z                 raise AlreadyMemberError("You are already a member of this space")
2025-08-30T14:16:12.2773468Z     
2025-08-30T14:16:12.2773539Z             # Add as member
2025-08-30T14:16:12.2773657Z             now = datetime.now(timezone.utc).isoformat()
2025-08-30T14:16:12.2773730Z             member_item = {
2025-08-30T14:16:12.2773822Z                 'PK': f'SPACE#{space_id}',
2025-08-30T14:16:12.2773914Z                 'SK': f'MEMBER#{user_id}',
2025-08-30T14:16:12.2773999Z                 'GSI1PK': f'USER#{user_id}',
2025-08-30T14:16:12.2774093Z                 'GSI1SK': f'SPACE#{space_id}',
2025-08-30T14:16:12.2774172Z                 'user_id': user_id,
2025-08-30T14:16:12.2774254Z                 'username': username,
2025-08-30T14:16:12.2774335Z                 'email': email,
2025-08-30T14:16:12.2774410Z                 'role': 'member',
2025-08-30T14:16:12.2774486Z                 'joined_at': now
2025-08-30T14:16:12.2774555Z             }
2025-08-30T14:16:12.2774618Z     
2025-08-30T14:16:12.2774719Z             self.table.put_item(Item=member_item)
2025-08-30T14:16:12.2774782Z     
2025-08-30T14:16:12.2774857Z             # Get space details
2025-08-30T14:16:12.2774962Z             space = self.get_space(space_id, user_id)
2025-08-30T14:16:12.2775024Z     
2025-08-30T14:16:12.2775092Z             return {
2025-08-30T14:16:12.2775180Z                 'space_id': space_id,
2025-08-30T14:16:12.2775267Z                 'name': space['name'],
2025-08-30T14:16:12.2775343Z                 'role': 'member',
2025-08-30T14:16:12.2775427Z                 'joined_at': now
2025-08-30T14:16:12.2775491Z             }
2025-08-30T14:16:12.2775559Z     
2025-08-30T14:16:12.2775652Z         except InvalidInviteCodeError:
2025-08-30T14:16:12.2775716Z             raise
2025-08-30T14:16:12.2775807Z         except AlreadyMemberError:
2025-08-30T14:16:12.2775872Z             raise
2025-08-30T14:16:12.2775951Z         except Exception as e:
2025-08-30T14:16:12.2776084Z >           raise InvalidInviteCodeError("Invalid invite code")
2025-08-30T14:16:12.2776281Z E           app.services.exceptions.InvalidInviteCodeError: Invalid invite code
2025-08-30T14:16:12.2776287Z 
2025-08-30T14:16:12.2776405Z app/services/space.py:520: InvalidInviteCodeError
2025-08-30T14:16:12.2776632Z ___ TestUserProfileRoutes100Coverage.test_get_profile_cognito_sync_exception ___
2025-08-30T14:16:12.2776637Z 
2025-08-30T14:16:12.2777047Z self = <tests.unit.test_user_profile_routes_100.TestUserProfileRoutes100Coverage object at 0x7fdf36bfe650>
2025-08-30T14:16:12.2777223Z client = <starlette.testclient.TestClient object at 0x7fdf2c6b06d0>
2025-08-30T14:16:12.2777454Z mock_current_user = {'email': 'test@example.com', 'user_id': 'test-user-123', 'username': 'testuser'}
2025-08-30T14:16:12.2777461Z 
2025-08-30T14:16:12.2777648Z     def test_get_profile_cognito_sync_exception(self, client, mock_current_user):
2025-08-30T14:16:12.2777822Z         """Test GET /profile handles Cognito sync exceptions - Lines 63-65."""
2025-08-30T14:16:12.2778060Z         with patch('app.api.routes.user_profile.get_current_user', return_value=mock_current_user):
2025-08-30T14:16:12.2778265Z             with patch('app.api.routes.user_profile.UserProfileService') as mock_service:
2025-08-30T14:16:12.2778368Z                 # Mock profile service to return profile
2025-08-30T14:16:12.2778444Z                 mock_profile = {
2025-08-30T14:16:12.2778626Z                     "user_id": "test-user-123",
2025-08-30T14:16:12.2778713Z                     "email": "old@example.com",
2025-08-30T14:16:12.2778797Z                     "username": "olduser",
2025-08-30T14:16:12.2778894Z                     "display_name": "Test User",
2025-08-30T14:16:12.2778971Z                     "bio": "Test bio",
2025-08-30T14:16:12.2779056Z                     "avatar_url": None,
2025-08-30T14:16:12.2779138Z                     "phone_number": None,
2025-08-30T14:16:12.2779224Z                     "location": None,
2025-08-30T14:16:12.2779310Z                     "is_verified": False,
2025-08-30T14:16:12.2779389Z                     "is_onboarded": True,
2025-08-30T14:16:12.2779483Z                     "created_at": "2024-01-01T00:00:00Z",
2025-08-30T14:16:12.2779581Z                     "updated_at": "2024-01-01T00:00:00Z"
2025-08-30T14:16:12.2779644Z                 }
2025-08-30T14:16:12.2779831Z                 mock_service.return_value.get_user_profile.return_value = mock_profile
2025-08-30T14:16:12.2779906Z     
2025-08-30T14:16:12.2780007Z                 # Mock Cognito service to raise exception
2025-08-30T14:16:12.2780199Z                 with patch('app.api.routes.user_profile.CognitoService') as mock_cognito:
2025-08-30T14:16:12.2780431Z                     mock_cognito.return_value.get_user_attributes.side_effect = Exception("Cognito error")
2025-08-30T14:16:12.2780495Z     
2025-08-30T14:16:12.2780607Z                     response = client.get("/api/profile")
2025-08-30T14:16:12.2780707Z >                   assert response.status_code == 200
2025-08-30T14:16:12.2780794Z E                   assert 404 == 200
2025-08-30T14:16:12.2780917Z E                    +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.2780922Z 
2025-08-30T14:16:12.2781071Z tests/unit/test_user_profile_routes_100.py:55: AssertionError
2025-08-30T14:16:12.2781228Z ------------------------------ Captured log call -------------------------------
2025-08-30T14:16:12.2781485Z INFO     httpx:_client.py:1013 HTTP Request: GET http://testserver/api/profile "HTTP/1.1 404 Not Found"
2025-08-30T14:16:12.2781711Z __ TestUserProfileRoutes100Coverage.test_get_profile_resource_not_found_error __
2025-08-30T14:16:12.2781723Z 
2025-08-30T14:16:12.2781999Z self = <tests.unit.test_user_profile_routes_100.TestUserProfileRoutes100Coverage object at 0x7fdf370cfe90>
2025-08-30T14:16:12.2782264Z client = <starlette.testclient.TestClient object at 0x7fdf223db350>
2025-08-30T14:16:12.2782504Z mock_current_user = {'email': 'test@example.com', 'user_id': 'test-user-123', 'username': 'testuser'}
2025-08-30T14:16:12.2782510Z 
2025-08-30T14:16:12.2782703Z     def test_get_profile_resource_not_found_error(self, client, mock_current_user):
2025-08-30T14:16:12.2782880Z         """Test GET /profile handles ResourceNotFoundException - Lines 70-74."""
2025-08-30T14:16:12.2783114Z         with patch('app.api.routes.user_profile.get_current_user', return_value=mock_current_user):
2025-08-30T14:16:12.2783316Z             with patch('app.api.routes.user_profile.UserProfileService') as mock_service:
2025-08-30T14:16:12.2783606Z                 # Mock service to raise ClientError with ResourceNotFoundException
2025-08-30T14:16:12.2783688Z                 error = ClientError(
2025-08-30T14:16:12.2783849Z                     error_response={'Error': {'Code': 'ResourceNotFoundException'}},
2025-08-30T14:16:12.2783941Z                     operation_name='GetItem'
2025-08-30T14:16:12.2784006Z                 )
2025-08-30T14:16:12.2784166Z                 mock_service.return_value.get_user_profile.side_effect = error
2025-08-30T14:16:12.2784227Z     
2025-08-30T14:16:12.2784329Z                 response = client.get("/api/profile")
2025-08-30T14:16:12.2784431Z >               assert response.status_code == 500
2025-08-30T14:16:12.2784508Z E               assert 404 == 500
2025-08-30T14:16:12.2784627Z E                +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.2784633Z 
2025-08-30T14:16:12.2784895Z tests/unit/test_user_profile_routes_100.py:72: AssertionError
2025-08-30T14:16:12.2785044Z ------------------------------ Captured log call -------------------------------
2025-08-30T14:16:12.2785294Z INFO     httpx:_client.py:1013 HTTP Request: GET http://testserver/api/profile "HTTP/1.1 404 Not Found"
2025-08-30T14:16:12.2785509Z ____ TestUserProfileRoutes100Coverage.test_get_profile_generic_client_error ____
2025-08-30T14:16:12.2785514Z 
2025-08-30T14:16:12.2785790Z self = <tests.unit.test_user_profile_routes_100.TestUserProfileRoutes100Coverage object at 0x7fdf370cd050>
2025-08-30T14:16:12.2785968Z client = <starlette.testclient.TestClient object at 0x7fdf22263b10>
2025-08-30T14:16:12.2786194Z mock_current_user = {'email': 'test@example.com', 'user_id': 'test-user-123', 'username': 'testuser'}
2025-08-30T14:16:12.2786200Z 
2025-08-30T14:16:12.2786385Z     def test_get_profile_generic_client_error(self, client, mock_current_user):
2025-08-30T14:16:12.2786536Z         """Test GET /profile handles generic ClientError - Lines 75-78."""
2025-08-30T14:16:12.2786775Z         with patch('app.api.routes.user_profile.get_current_user', return_value=mock_current_user):
2025-08-30T14:16:12.2786976Z             with patch('app.api.routes.user_profile.UserProfileService') as mock_service:
2025-08-30T14:16:12.2787081Z                 # Mock service to raise generic ClientError
2025-08-30T14:16:12.2787166Z                 error = ClientError(
2025-08-30T14:16:12.2787307Z                     error_response={'Error': {'Code': 'InternalServerError'}},
2025-08-30T14:16:12.2787395Z                     operation_name='GetItem'
2025-08-30T14:16:12.2787465Z                 )
2025-08-30T14:16:12.2787620Z                 mock_service.return_value.get_user_profile.side_effect = error
2025-08-30T14:16:12.2787682Z     
2025-08-30T14:16:12.2787789Z                 response = client.get("/api/profile")
2025-08-30T14:16:12.2787890Z >               assert response.status_code == 500
2025-08-30T14:16:12.2787967Z E               assert 404 == 500
2025-08-30T14:16:12.2788098Z E                +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.2788104Z 
2025-08-30T14:16:12.2788248Z tests/unit/test_user_profile_routes_100.py:87: AssertionError
2025-08-30T14:16:12.2788399Z ------------------------------ Captured log call -------------------------------
2025-08-30T14:16:12.2788644Z INFO     httpx:_client.py:1013 HTTP Request: GET http://testserver/api/profile "HTTP/1.1 404 Not Found"
2025-08-30T14:16:12.2788859Z _____ TestUserProfileRoutes100Coverage.test_get_profile_generic_exception ______
2025-08-30T14:16:12.2788869Z 
2025-08-30T14:16:12.2789143Z self = <tests.unit.test_user_profile_routes_100.TestUserProfileRoutes100Coverage object at 0x7fdf370cdd10>
2025-08-30T14:16:12.2789309Z client = <starlette.testclient.TestClient object at 0x7fdf222432d0>
2025-08-30T14:16:12.2789543Z mock_current_user = {'email': 'test@example.com', 'user_id': 'test-user-123', 'username': 'testuser'}
2025-08-30T14:16:12.2789548Z 
2025-08-30T14:16:12.2789805Z     def test_get_profile_generic_exception(self, client, mock_current_user):
2025-08-30T14:16:12.2789951Z         """Test GET /profile handles generic Exception - Lines 81-86."""
2025-08-30T14:16:12.2790190Z         with patch('app.api.routes.user_profile.get_current_user', return_value=mock_current_user):
2025-08-30T14:16:12.2790384Z             with patch('app.api.routes.user_profile.UserProfileService') as mock_service:
2025-08-30T14:16:12.2790491Z                 # Mock service to raise generic exception
2025-08-30T14:16:12.2790711Z                 mock_service.return_value.get_user_profile.side_effect = Exception("Database error")
2025-08-30T14:16:12.2790774Z     
2025-08-30T14:16:12.2790878Z                 response = client.get("/api/profile")
2025-08-30T14:16:12.2790972Z >               assert response.status_code == 500
2025-08-30T14:16:12.2791048Z E               assert 404 == 500
2025-08-30T14:16:12.2791171Z E                +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.2791256Z 
2025-08-30T14:16:12.2791402Z tests/unit/test_user_profile_routes_100.py:98: AssertionError
2025-08-30T14:16:12.2791552Z ------------------------------ Captured log call -------------------------------
2025-08-30T14:16:12.2791796Z INFO     httpx:_client.py:1013 HTTP Request: GET http://testserver/api/profile "HTTP/1.1 404 Not Found"
2025-08-30T14:16:12.2792157Z __ TestUserProfileRoutes100Coverage.test_update_profile_cognito_sync_failure ___
2025-08-30T14:16:12.2792181Z 
2025-08-30T14:16:12.2792524Z self = <tests.unit.test_user_profile_routes_100.TestUserProfileRoutes100Coverage object at 0x7fdf370ccd90>
2025-08-30T14:16:12.2792693Z client = <starlette.testclient.TestClient object at 0x7fdf2226f010>
2025-08-30T14:16:12.2792929Z mock_current_user = {'email': 'test@example.com', 'user_id': 'test-user-123', 'username': 'testuser'}
2025-08-30T14:16:12.2792935Z 
2025-08-30T14:16:12.2793123Z     def test_update_profile_cognito_sync_failure(self, client, mock_current_user):
2025-08-30T14:16:12.2793293Z         """Test PUT /profile handles Cognito sync failure - Lines 128-132."""
2025-08-30T14:16:12.2793375Z         update_data = {
2025-08-30T14:16:12.2793459Z             "display_name": "New Name",
2025-08-30T14:16:12.2793557Z             "email": "newemail@example.com"
2025-08-30T14:16:12.2793621Z         }
2025-08-30T14:16:12.2793684Z     
2025-08-30T14:16:12.2793921Z         with patch('app.api.routes.user_profile.get_current_user', return_value=mock_current_user):
2025-08-30T14:16:12.2794106Z             with patch('app.api.routes.user_profile.CognitoService') as mock_cognito:
2025-08-30T14:16:12.2794214Z                 # Mock Cognito update to raise exception
2025-08-30T14:16:12.2794490Z                 mock_cognito.return_value.update_user_attributes.side_effect = Exception("Cognito update failed")
2025-08-30T14:16:12.2794553Z     
2025-08-30T14:16:12.2794699Z                 response = client.put("/api/profile", json=update_data)
2025-08-30T14:16:12.2794797Z >               assert response.status_code == 500
2025-08-30T14:16:12.2794883Z E               assert 404 == 500
2025-08-30T14:16:12.2795005Z E                +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.2795010Z 
2025-08-30T14:16:12.2795162Z tests/unit/test_user_profile_routes_100.py:114: AssertionError
2025-08-30T14:16:12.2795305Z ------------------------------ Captured log call -------------------------------
2025-08-30T14:16:12.2795559Z INFO     httpx:_client.py:1013 HTTP Request: PUT http://testserver/api/profile "HTTP/1.1 404 Not Found"
2025-08-30T14:16:12.2795805Z _ TestUserProfileRoutes100Coverage.test_update_profile_fallback_after_cognito_failure _
2025-08-30T14:16:12.2795811Z 
2025-08-30T14:16:12.2796095Z self = <tests.unit.test_user_profile_routes_100.TestUserProfileRoutes100Coverage object at 0x7fdf370ce550>
2025-08-30T14:16:12.2796265Z client = <starlette.testclient.TestClient object at 0x7fdf2226edd0>
2025-08-30T14:16:12.2796493Z mock_current_user = {'email': 'test@example.com', 'user_id': 'test-user-123', 'username': 'testuser'}
2025-08-30T14:16:12.2796639Z 
2025-08-30T14:16:12.2796866Z     def test_update_profile_fallback_after_cognito_failure(self, client, mock_current_user):
2025-08-30T14:16:12.2797054Z         """Test PUT /profile fallback logic after Cognito failure - Lines 171-173."""
2025-08-30T14:16:12.2797137Z         update_data = {
2025-08-30T14:16:12.2797222Z             "display_name": "New Name",
2025-08-30T14:16:12.2797299Z             "bio": "New bio"
2025-08-30T14:16:12.2797373Z         }
2025-08-30T14:16:12.2797436Z     
2025-08-30T14:16:12.2797666Z         with patch('app.api.routes.user_profile.get_current_user', return_value=mock_current_user):
2025-08-30T14:16:12.2797853Z             with patch('app.api.routes.user_profile.CognitoService') as mock_cognito:
2025-08-30T14:16:12.2797941Z                 # First Cognito update fails
2025-08-30T14:16:12.2798185Z                 mock_cognito.return_value.update_user_attributes.side_effect = Exception("Cognito error")
2025-08-30T14:16:12.2798359Z     
2025-08-30T14:16:12.2798558Z                 with patch('app.api.routes.user_profile.UserProfileService') as mock_service:
2025-08-30T14:16:12.2798667Z                     # But profile service update also fails
2025-08-30T14:16:12.2798878Z                     mock_service.return_value.update_user_profile.side_effect = Exception("DB error")
2025-08-30T14:16:12.2798945Z     
2025-08-30T14:16:12.2799083Z                     response = client.put("/api/profile", json=update_data)
2025-08-30T14:16:12.2799184Z >                   assert response.status_code == 500
2025-08-30T14:16:12.2799271Z E                   assert 404 == 500
2025-08-30T14:16:12.2799390Z E                    +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.2799395Z 
2025-08-30T14:16:12.2799544Z tests/unit/test_user_profile_routes_100.py:134: AssertionError
2025-08-30T14:16:12.2799692Z ------------------------------ Captured log call -------------------------------
2025-08-30T14:16:12.2799937Z INFO     httpx:_client.py:1013 HTTP Request: PUT http://testserver/api/profile "HTTP/1.1 404 Not Found"
2025-08-30T14:16:12.2800170Z ____ TestUserProfileRoutes100Coverage.test_update_profile_generic_exception ____
2025-08-30T14:16:12.2800175Z 
2025-08-30T14:16:12.2800453Z self = <tests.unit.test_user_profile_routes_100.TestUserProfileRoutes100Coverage object at 0x7fdf370cefd0>
2025-08-30T14:16:12.2800623Z client = <starlette.testclient.TestClient object at 0x7fdf2c6a98d0>
2025-08-30T14:16:12.2800858Z mock_current_user = {'email': 'test@example.com', 'user_id': 'test-user-123', 'username': 'testuser'}
2025-08-30T14:16:12.2800863Z 
2025-08-30T14:16:12.2801044Z     def test_update_profile_generic_exception(self, client, mock_current_user):
2025-08-30T14:16:12.2801202Z         """Test PUT /profile handles generic Exception - Lines 179-184."""
2025-08-30T14:16:12.2801278Z         update_data = {
2025-08-30T14:16:12.2801362Z             "display_name": "New Name"
2025-08-30T14:16:12.2801430Z         }
2025-08-30T14:16:12.2801496Z     
2025-08-30T14:16:12.2801733Z         with patch('app.api.routes.user_profile.get_current_user', return_value=mock_current_user):
2025-08-30T14:16:12.2801841Z             # Raise exception before any service calls
2025-08-30T14:16:12.2802135Z             with patch('app.api.routes.user_profile.UserProfileUpdate') as mock_model:
2025-08-30T14:16:12.2802278Z                 mock_model.side_effect = Exception("Unexpected error")
2025-08-30T14:16:12.2802340Z     
2025-08-30T14:16:12.2802479Z                 response = client.put("/api/profile", json=update_data)
2025-08-30T14:16:12.2802580Z >               assert response.status_code == 500
2025-08-30T14:16:12.2802657Z E               assert 404 == 500
2025-08-30T14:16:12.2802771Z E                +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.2802775Z 
2025-08-30T14:16:12.2802929Z tests/unit/test_user_profile_routes_100.py:149: AssertionError
2025-08-30T14:16:12.2803072Z ------------------------------ Captured log call -------------------------------
2025-08-30T14:16:12.2803451Z INFO     httpx:_client.py:1013 HTTP Request: PUT http://testserver/api/profile "HTTP/1.1 404 Not Found"
2025-08-30T14:16:12.2803690Z _ TestUserProfileRoutes100Coverage.test_complete_onboarding_cognito_update_failure _
2025-08-30T14:16:12.2803695Z 
2025-08-30T14:16:12.2803971Z self = <tests.unit.test_user_profile_routes_100.TestUserProfileRoutes100Coverage object at 0x7fdf370cf250>
2025-08-30T14:16:12.2804144Z client = <starlette.testclient.TestClient object at 0x7fdf2587ca50>
2025-08-30T14:16:12.2804370Z mock_current_user = {'email': 'test@example.com', 'user_id': 'test-user-123', 'username': 'testuser'}
2025-08-30T14:16:12.2804375Z 
2025-08-30T14:16:12.2804595Z     def test_complete_onboarding_cognito_update_failure(self, client, mock_current_user):
2025-08-30T14:16:12.2804793Z         """Test POST /onboarding/complete handles Cognito update failure - Line 246."""
2025-08-30T14:16:12.2804870Z         onboarding_data = {
2025-08-30T14:16:12.2804960Z             "display_name": "Test User",
2025-08-30T14:16:12.2805146Z             "bio": "My bio",
2025-08-30T14:16:12.2805227Z             "location": "Test City"
2025-08-30T14:16:12.2805296Z         }
2025-08-30T14:16:12.2805359Z     
2025-08-30T14:16:12.2805597Z         with patch('app.api.routes.user_profile.get_current_user', return_value=mock_current_user):
2025-08-30T14:16:12.2805781Z             with patch('app.api.routes.user_profile.CognitoService') as mock_cognito:
2025-08-30T14:16:12.2805871Z                 # Mock Cognito update to fail
2025-08-30T14:16:12.2806118Z                 mock_cognito.return_value.update_user_attributes.side_effect = Exception("Cognito error")
2025-08-30T14:16:12.2806180Z     
2025-08-30T14:16:12.2806377Z                 with patch('app.api.routes.user_profile.UserProfileService') as mock_service:
2025-08-30T14:16:12.2806476Z                     # Profile service also fails
2025-08-30T14:16:12.2806689Z                     mock_service.return_value.complete_onboarding.side_effect = Exception("DB error")
2025-08-30T14:16:12.2806767Z     
2025-08-30T14:16:12.2806952Z                     response = client.post("/api/onboarding/complete", json=onboarding_data)
2025-08-30T14:16:12.2807052Z >                   assert response.status_code == 500
2025-08-30T14:16:12.2807139Z E                   assert 404 == 500
2025-08-30T14:16:12.2807257Z E                    +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.2807262Z 
2025-08-30T14:16:12.2807417Z tests/unit/test_user_profile_routes_100.py:170: AssertionError
2025-08-30T14:16:12.2807562Z ------------------------------ Captured log call -------------------------------
2025-08-30T14:16:12.2807861Z INFO     httpx:_client.py:1013 HTTP Request: POST http://testserver/api/onboarding/complete "HTTP/1.1 404 Not Found"
2025-08-30T14:16:12.2808092Z _ TestUserProfileRoutes100Coverage.test_complete_onboarding_generic_exception __
2025-08-30T14:16:12.2808097Z 
2025-08-30T14:16:12.2808377Z self = <tests.unit.test_user_profile_routes_100.TestUserProfileRoutes100Coverage object at 0x7fdf370cfd90>
2025-08-30T14:16:12.2808555Z client = <starlette.testclient.TestClient object at 0x7fdf23247710>
2025-08-30T14:16:12.2808791Z mock_current_user = {'email': 'test@example.com', 'user_id': 'test-user-123', 'username': 'testuser'}
2025-08-30T14:16:12.2808796Z 
2025-08-30T14:16:12.2808998Z     def test_complete_onboarding_generic_exception(self, client, mock_current_user):
2025-08-30T14:16:12.2809202Z         """Test POST /onboarding/complete handles generic Exception - Lines 252-257."""
2025-08-30T14:16:12.2809280Z         onboarding_data = {
2025-08-30T14:16:12.2809367Z             "display_name": "Test User",
2025-08-30T14:16:12.2809448Z             "bio": "My bio"
2025-08-30T14:16:12.2809511Z         }
2025-08-30T14:16:12.2809581Z     
2025-08-30T14:16:12.2809813Z         with patch('app.api.routes.user_profile.get_current_user', return_value=mock_current_user):
2025-08-30T14:16:12.2809911Z             # Raise exception early in the handler
2025-08-30T14:16:12.2810190Z >           with patch('app.api.routes.user_profile.OnboardingData') as mock_model:
2025-08-30T14:16:12.2810196Z 
2025-08-30T14:16:12.2810307Z tests/unit/test_user_profile_routes_100.py:182: 
2025-08-30T14:16:12.2810413Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T14:16:12.2810659Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1446: in __enter__
2025-08-30T14:16:12.2810750Z     original, local = self.get_original()
2025-08-30T14:16:12.2810861Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T14:16:12.2810867Z 
2025-08-30T14:16:12.2810986Z self = <unittest.mock._patch object at 0x7fdf2226f010>
2025-08-30T14:16:12.2810991Z 
2025-08-30T14:16:12.2811069Z     def get_original(self):
2025-08-30T14:16:12.2811162Z         target = self.getter()
2025-08-30T14:16:12.2811241Z         name = self.attribute
2025-08-30T14:16:12.2811309Z     
2025-08-30T14:16:12.2811384Z         original = DEFAULT
2025-08-30T14:16:12.2811537Z         local = False
2025-08-30T14:16:12.2811605Z     
2025-08-30T14:16:12.2811670Z         try:
2025-08-30T14:16:12.2811762Z             original = target.__dict__[name]
2025-08-30T14:16:12.2811862Z         except (AttributeError, KeyError):
2025-08-30T14:16:12.2811963Z             original = getattr(target, name, DEFAULT)
2025-08-30T14:16:12.2812122Z         else:
2025-08-30T14:16:12.2812204Z             local = True
2025-08-30T14:16:12.2812265Z     
2025-08-30T14:16:12.2812401Z         if name in _builtins and isinstance(target, ModuleType):
2025-08-30T14:16:12.2812486Z             self.create = True
2025-08-30T14:16:12.2812547Z     
2025-08-30T14:16:12.2812655Z         if not self.create and original is DEFAULT:
2025-08-30T14:16:12.2812738Z >           raise AttributeError(
2025-08-30T14:16:12.2812855Z                 "%s does not have the attribute %r" % (target, name)
2025-08-30T14:16:12.2812924Z             )
2025-08-30T14:16:12.2813543Z E           AttributeError: <module 'app.api.routes.user_profile' from '/home/runner/work/lifestyle-spaces/lifestyle-spaces/backend/app/api/routes/user_profile.py'> does not have the attribute 'OnboardingData'
2025-08-30T14:16:12.2813559Z 
2025-08-30T14:16:12.2813802Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1419: AttributeError
2025-08-30T14:16:12.2814030Z _ TestUserProfileRoutes100Coverage.test_update_profile_successful_cognito_sync _
2025-08-30T14:16:12.2814035Z 
2025-08-30T14:16:12.2814316Z self = <tests.unit.test_user_profile_routes_100.TestUserProfileRoutes100Coverage object at 0x7fdf370cc350>
2025-08-30T14:16:12.2814491Z client = <starlette.testclient.TestClient object at 0x7fdf36d879d0>
2025-08-30T14:16:12.2814718Z mock_current_user = {'email': 'test@example.com', 'user_id': 'test-user-123', 'username': 'testuser'}
2025-08-30T14:16:12.2814723Z 
2025-08-30T14:16:12.2814928Z     def test_update_profile_successful_cognito_sync(self, client, mock_current_user):
2025-08-30T14:16:12.2815096Z         """Test PUT /profile with successful Cognito sync for email/username."""
2025-08-30T14:16:12.2815179Z         update_data = {
2025-08-30T14:16:12.2815269Z             "display_name": "New Name",
2025-08-30T14:16:12.2815361Z             "email": "newemail@example.com",
2025-08-30T14:16:12.2815444Z             "username": "newusername"
2025-08-30T14:16:12.2815514Z         }
2025-08-30T14:16:12.2815575Z     
2025-08-30T14:16:12.2815805Z         with patch('app.api.routes.user_profile.get_current_user', return_value=mock_current_user):
2025-08-30T14:16:12.2815992Z             with patch('app.api.routes.user_profile.CognitoService') as mock_cognito:
2025-08-30T14:16:12.2816084Z                 # Mock successful Cognito update
2025-08-30T14:16:12.2816266Z                 mock_cognito.return_value.update_user_attributes.return_value = True
2025-08-30T14:16:12.2816328Z     
2025-08-30T14:16:12.2816528Z                 with patch('app.api.routes.user_profile.UserProfileService') as mock_service:
2025-08-30T14:16:12.2816810Z                     # Mock successful profile update
2025-08-30T14:16:12.2816892Z                     updated_profile = {
2025-08-30T14:16:12.2816975Z                         **mock_current_user,
2025-08-30T14:16:12.2817064Z                         **update_data,
2025-08-30T14:16:12.2817149Z                         "is_verified": False,
2025-08-30T14:16:12.2817238Z                         "is_onboarded": True,
2025-08-30T14:16:12.2817335Z                         "created_at": "2024-01-01T00:00:00Z",
2025-08-30T14:16:12.2817429Z                         "updated_at": "2024-01-01T00:00:00Z"
2025-08-30T14:16:12.2817505Z                     }
2025-08-30T14:16:12.2817707Z                     mock_service.return_value.update_user_profile.return_value = updated_profile
2025-08-30T14:16:12.2817770Z     
2025-08-30T14:16:12.2817918Z                     response = client.put("/api/profile", json=update_data)
2025-08-30T14:16:12.2818016Z >                   assert response.status_code == 200
2025-08-30T14:16:12.2818215Z E                   assert 404 == 200
2025-08-30T14:16:12.2818336Z E                    +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.2818341Z 
2025-08-30T14:16:12.2818491Z tests/unit/test_user_profile_routes_100.py:215: AssertionError
2025-08-30T14:16:12.2818641Z ------------------------------ Captured log call -------------------------------
2025-08-30T14:16:12.2818891Z INFO     httpx:_client.py:1013 HTTP Request: PUT http://testserver/api/profile "HTTP/1.1 404 Not Found"
2025-08-30T14:16:12.2818996Z =============================== warnings summary ===============================
2025-08-30T14:16:12.2819338Z ../../../../../../opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/pydantic/_internal/_generate_schema.py:297
2025-08-30T14:16:12.2819664Z ../../../../../../opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/pydantic/_internal/_generate_schema.py:297
2025-08-30T14:16:12.2819984Z ../../../../../../opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/pydantic/_internal/_generate_schema.py:297
2025-08-30T14:16:12.2821215Z   /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/pydantic/_internal/_generate_schema.py:297: PydanticDeprecatedSince20: `json_encoders` is deprecated. See https://docs.pydantic.dev/2.10/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/
2025-08-30T14:16:12.2821298Z     warnings.warn(
2025-08-30T14:16:12.2821302Z 
2025-08-30T14:16:12.2821590Z ../../../../../../opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/passlib/utils/__init__.py:854
2025-08-30T14:16:12.2822222Z   /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/passlib/utils/__init__.py:854: DeprecationWarning: 'crypt' is deprecated and slated for removal in Python 3.13
2025-08-30T14:16:12.2822322Z     from crypt import crypt as _crypt
2025-08-30T14:16:12.2822336Z 
2025-08-30T14:16:12.2822494Z test_placeholder.py::test_health_endpoint
2025-08-30T14:16:12.2823393Z   /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/_pytest/python.py:198: PytestReturnNotNoneWarning: Expected None, but test_placeholder.py::test_health_endpoint returned True, which will be an error in a future version of pytest.  Did you mean to use `assert` instead of `return`?
2025-08-30T14:16:12.2823466Z     warnings.warn(
2025-08-30T14:16:12.2823471Z 
2025-08-30T14:16:12.2823663Z test_placeholder.py::test_dev_health_endpoint
2025-08-30T14:16:12.2824547Z   /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/_pytest/python.py:198: PytestReturnNotNoneWarning: Expected None, but test_placeholder.py::test_dev_health_endpoint returned True, which will be an error in a future version of pytest.  Did you mean to use `assert` instead of `return`?
2025-08-30T14:16:12.2824627Z     warnings.warn(
2025-08-30T14:16:12.2824633Z 
2025-08-30T14:16:12.2824729Z test_placeholder.py::test_options_request
2025-08-30T14:16:12.2825782Z   /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/_pytest/python.py:198: PytestReturnNotNoneWarning: Expected None, but test_placeholder.py::test_options_request returned True, which will be an error in a future version of pytest.  Did you mean to use `assert` instead of `return`?
2025-08-30T14:16:12.2825863Z     warnings.warn(
2025-08-30T14:16:12.2825868Z 
2025-08-30T14:16:12.2825970Z test_placeholder.py::test_generic_endpoint
2025-08-30T14:16:12.2826854Z   /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/_pytest/python.py:198: PytestReturnNotNoneWarning: Expected None, but test_placeholder.py::test_generic_endpoint returned True, which will be an error in a future version of pytest.  Did you mean to use `assert` instead of `return`?
2025-08-30T14:16:12.2826925Z     warnings.warn(
2025-08-30T14:16:12.2826931Z 
2025-08-30T14:16:12.2827116Z -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
2025-08-30T14:16:12.2827243Z 
2025-08-30T14:16:12.2827402Z ---------- coverage: platform linux, python 3.11.13-final-0 ----------
2025-08-30T14:16:12.2827513Z Name                             Stmts   Miss  Cover   Missing
2025-08-30T14:16:12.2827629Z --------------------------------------------------------------
2025-08-30T14:16:12.2827735Z app/__init__.py                      1      0   100%
2025-08-30T14:16:12.2827846Z app/api/__init__.py                  0      0   100%
2025-08-30T14:16:12.2827953Z app/api/routes/__init__.py           0      0   100%
2025-08-30T14:16:12.2828062Z app/api/routes/auth.py              49      0   100%
2025-08-30T14:16:12.2828174Z app/api/routes/health.py             7      0   100%
2025-08-30T14:16:12.2828283Z app/api/routes/invitations.py       46      0   100%
2025-08-30T14:16:12.2828423Z app/api/routes/spaces.py            76      2    97%   53, 63
2025-08-30T14:16:12.2828606Z app/api/routes/user_profile.py     105      8    92%   75, 132, 171-173, 179-181
2025-08-30T14:16:12.2828745Z app/api/routes/users.py             42      1    98%   110
2025-08-30T14:16:12.2828855Z app/core/__init__.py                 0      0   100%
2025-08-30T14:16:12.2828994Z app/core/config.py                  53      4    92%   34, 106-109
2025-08-30T14:16:12.2829100Z app/core/database.py                55      0   100%
2025-08-30T14:16:12.2829235Z app/core/dependencies.py             9      1    89%   25
2025-08-30T14:16:12.2829340Z app/core/security.py                46      0   100%
2025-08-30T14:16:12.2829437Z app/main.py                         22      0   100%
2025-08-30T14:16:12.2829545Z app/models/__init__.py               0      0   100%
2025-08-30T14:16:12.2829648Z app/models/common.py                23      0   100%
2025-08-30T14:16:12.2829759Z app/models/invitation.py            30      0   100%
2025-08-30T14:16:12.2829862Z app/models/space.py                 84      0   100%
2025-08-30T14:16:12.2829964Z app/models/user.py                  30      0   100%
2025-08-30T14:16:12.2830080Z app/models/user_profile.py          78      0   100%
2025-08-30T14:16:12.2830188Z app/services/__init__.py             2      0   100%
2025-08-30T14:16:12.2830293Z app/services/cognito.py            112      0   100%
2025-08-30T14:16:12.2830409Z app/services/exceptions.py          34      0   100%
2025-08-30T14:16:12.2830516Z app/services/invitation.py          82      0   100%
2025-08-30T14:16:12.2830666Z app/services/space.py              203      4    98%   394, 453-454, 508
2025-08-30T14:16:12.2830783Z app/services/user_profile.py        74      0   100%
2025-08-30T14:16:12.2830884Z app/utils/__init__.py                0      0   100%
2025-08-30T14:16:12.2830993Z --------------------------------------------------------------
2025-08-30T14:16:12.2831081Z TOTAL                             1263     20    98%
2025-08-30T14:16:12.2831086Z 
2025-08-30T14:16:12.2831331Z FAIL Required test coverage of 100% not reached. Total coverage: 98.42%
2025-08-30T14:16:12.2831454Z =========================== short test summary info ============================
2025-08-30T14:16:12.2831954Z FAILED tests/unit/test_absolute_final_coverage.py::TestAbsoluteFinalCoverage::test_spaces_create_validation_error - assert 401 == 422
2025-08-30T14:16:12.2832268Z  +  where 401 = <Response [401 Unauthorized]>.status_code
2025-08-30T14:16:12.2832717Z FAILED tests/unit/test_absolute_final_coverage.py::TestAbsoluteFinalCoverage::test_spaces_create_other_client_error - assert 401 == 500
2025-08-30T14:16:12.2832834Z  +  where 401 = <Response [401 Unauthorized]>.status_code
2025-08-30T14:16:12.2833239Z FAILED tests/unit/test_absolute_final_coverage.py::TestAbsoluteFinalCoverage::test_profile_get_cognito_exception_ignored - assert 404 == 200
2025-08-30T14:16:12.2833353Z  +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.2833725Z FAILED tests/unit/test_absolute_final_coverage.py::TestAbsoluteFinalCoverage::test_profile_get_other_client_error - assert 404 == 500
2025-08-30T14:16:12.2833829Z  +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.2834355Z FAILED tests/unit/test_absolute_final_coverage.py::TestAbsoluteFinalCoverage::test_profile_get_generic_exception - assert 404 == 500
2025-08-30T14:16:12.2834460Z  +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.2834870Z FAILED tests/unit/test_absolute_final_coverage.py::TestAbsoluteFinalCoverage::test_profile_update_cognito_exception_raised - assert 404 == 500
2025-08-30T14:16:12.2834972Z  +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.2835354Z FAILED tests/unit/test_absolute_final_coverage.py::TestAbsoluteFinalCoverage::test_profile_update_fallback_exception - assert 404 == 500
2025-08-30T14:16:12.2835463Z  +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.2835844Z FAILED tests/unit/test_absolute_final_coverage.py::TestAbsoluteFinalCoverage::test_profile_update_generic_exception - assert 404 == 500
2025-08-30T14:16:12.2835950Z  +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.2836333Z FAILED tests/unit/test_absolute_final_coverage.py::TestAbsoluteFinalCoverage::test_onboarding_complete_fallback - assert 404 == 500
2025-08-30T14:16:12.2836436Z  +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.2837450Z FAILED tests/unit/test_absolute_final_coverage.py::TestAbsoluteFinalCoverage::test_onboarding_complete_generic_exception - AttributeError: <module 'app.api.routes.user_profile' from '/home/runner/work/lifestyle-spaces/lifestyle-spaces/backend/app/api/routes/user_profile.py'> does not have the attribute 'OnboardingData'
2025-08-30T14:16:12.2837829Z FAILED tests/unit/test_absolute_final_coverage.py::TestAbsoluteFinalCoverage::test_users_spaces_other_client_error - assert 404 == 500
2025-08-30T14:16:12.2837939Z  +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.2838399Z FAILED tests/unit/test_absolute_final_coverage.py::TestAbsoluteFinalCoverage::test_config_parse_cors_json_non_list - assert ['"single_value"'] == ['single_value']
2025-08-30T14:16:12.2838520Z   At index 0 diff: '"single_value"' != 'single_value'
2025-08-30T14:16:12.2838594Z   Full diff:
2025-08-30T14:16:12.2838671Z   - ['single_value']
2025-08-30T14:16:12.2838750Z   + ['"single_value"']
2025-08-30T14:16:12.2838818Z   ?   +            +
2025-08-30T14:16:12.2839399Z FAILED tests/unit/test_absolute_final_coverage.py::TestAbsoluteFinalCoverage::test_config_cors_origins_default_non_test - pydantic_core._pydantic_core.ValidationError: 3 validation errors for Settings
2025-08-30T14:16:12.2839476Z app_name
2025-08-30T14:16:12.2839705Z   Extra inputs are not permitted [type=extra_forbidden, input_value='test', input_type=str]
2025-08-30T14:16:12.2839918Z     For further information visit https://errors.pydantic.dev/2.10/v/extra_forbidden
2025-08-30T14:16:12.2839997Z dynamodb_table_name
2025-08-30T14:16:12.2840239Z   Extra inputs are not permitted [type=extra_forbidden, input_value='test-table', input_type=str]
2025-08-30T14:16:12.2840452Z     For further information visit https://errors.pydantic.dev/2.10/v/extra_forbidden
2025-08-30T14:16:12.2840646Z cors_origins_str
2025-08-30T14:16:12.2840880Z   Extra inputs are not permitted [type=extra_forbidden, input_value=None, input_type=NoneType]
2025-08-30T14:16:12.2841091Z     For further information visit https://errors.pydantic.dev/2.10/v/extra_forbidden
2025-08-30T14:16:12.2842121Z FAILED tests/unit/test_absolute_final_coverage.py::TestAbsoluteFinalCoverage::test_dependencies_get_authenticated_user_none - ImportError: cannot import name 'get_authenticated_user' from 'app.core.dependencies' (/home/runner/work/lifestyle-spaces/lifestyle-spaces/backend/app/core/dependencies.py)
2025-08-30T14:16:12.2842772Z FAILED tests/unit/test_absolute_final_coverage.py::TestAbsoluteFinalCoverage::test_space_get_space_client_error - botocore.exceptions.ClientError: An error occurred (Error) when calling the GetItem operation: Unknown
2025-08-30T14:16:12.2843302Z FAILED tests/unit/test_absolute_final_coverage.py::TestAbsoluteFinalCoverage::test_space_get_user_role_error - AttributeError: 'SpaceService' object has no attribute 'get_user_role'
2025-08-30T14:16:12.2843967Z FAILED tests/unit/test_absolute_final_coverage.py::TestAbsoluteFinalCoverage::test_space_join_success_return - app.services.exceptions.InvalidInviteCodeError: Invalid invite code
2025-08-30T14:16:12.2844416Z FAILED tests/unit/test_config_100.py::TestConfig100Coverage::test_parse_cors_json_array_valid - assert ['"http://localhost:3000"'] == ['http://localhost:3000']
2025-08-30T14:16:12.2844577Z   At index 0 diff: '"http://localhost:3000"' != 'http://localhost:3000'
2025-08-30T14:16:12.2844650Z   Full diff:
2025-08-30T14:16:12.2844738Z   - ['http://localhost:3000']
2025-08-30T14:16:12.2844823Z   + ['"http://localhost:3000"']
2025-08-30T14:16:12.2844900Z   ?   +                     +
2025-08-30T14:16:12.2845420Z FAILED tests/unit/test_config_100.py::TestConfig100Coverage::test_settings_cors_origins_property_none - pydantic_core._pydantic_core.ValidationError: 3 validation errors for Settings
2025-08-30T14:16:12.2845506Z app_name
2025-08-30T14:16:12.2845733Z   Extra inputs are not permitted [type=extra_forbidden, input_value='test', input_type=str]
2025-08-30T14:16:12.2845935Z     For further information visit https://errors.pydantic.dev/2.10/v/extra_forbidden
2025-08-30T14:16:12.2846059Z dynamodb_table_name
2025-08-30T14:16:12.2846303Z   Extra inputs are not permitted [type=extra_forbidden, input_value='test-table', input_type=str]
2025-08-30T14:16:12.2846505Z     For further information visit https://errors.pydantic.dev/2.10/v/extra_forbidden
2025-08-30T14:16:12.2846583Z cors_origins_str
2025-08-30T14:16:12.2846816Z   Extra inputs are not permitted [type=extra_forbidden, input_value=None, input_type=NoneType]
2025-08-30T14:16:12.2854023Z     For further information visit https://errors.pydantic.dev/2.10/v/extra_forbidden
2025-08-30T14:16:12.2854639Z FAILED tests/unit/test_config_100.py::TestConfig100Coverage::test_settings_cors_origins_property_with_pytest - pydantic_core._pydantic_core.ValidationError: 3 validation errors for Settings
2025-08-30T14:16:12.2854740Z app_name
2025-08-30T14:16:12.2854976Z   Extra inputs are not permitted [type=extra_forbidden, input_value='test', input_type=str]
2025-08-30T14:16:12.2855200Z     For further information visit https://errors.pydantic.dev/2.10/v/extra_forbidden
2025-08-30T14:16:12.2855285Z dynamodb_table_name
2025-08-30T14:16:12.2855533Z   Extra inputs are not permitted [type=extra_forbidden, input_value='test-table', input_type=str]
2025-08-30T14:16:12.2855740Z     For further information visit https://errors.pydantic.dev/2.10/v/extra_forbidden
2025-08-30T14:16:12.2855818Z cors_origins_str
2025-08-30T14:16:12.2856053Z   Extra inputs are not permitted [type=extra_forbidden, input_value=None, input_type=NoneType]
2025-08-30T14:16:12.2856263Z     For further information visit https://errors.pydantic.dev/2.10/v/extra_forbidden
2025-08-30T14:16:12.2856813Z FAILED tests/unit/test_config_100.py::TestConfig100Coverage::test_settings_cors_origins_cached - pydantic_core._pydantic_core.ValidationError: 3 validation errors for Settings
2025-08-30T14:16:12.2857072Z app_name
2025-08-30T14:16:12.2857318Z   Extra inputs are not permitted [type=extra_forbidden, input_value='test', input_type=str]
2025-08-30T14:16:12.2857520Z     For further information visit https://errors.pydantic.dev/2.10/v/extra_forbidden
2025-08-30T14:16:12.2857600Z dynamodb_table_name
2025-08-30T14:16:12.2857834Z   Extra inputs are not permitted [type=extra_forbidden, input_value='test-table', input_type=str]
2025-08-30T14:16:12.2858031Z     For further information visit https://errors.pydantic.dev/2.10/v/extra_forbidden
2025-08-30T14:16:12.2858107Z cors_origins_str
2025-08-30T14:16:12.2858370Z   Extra inputs are not permitted [type=extra_forbidden, input_value='http://custom.com', input_type=str]
2025-08-30T14:16:12.2858568Z     For further information visit https://errors.pydantic.dev/2.10/v/extra_forbidden
2025-08-30T14:16:12.2859060Z FAILED tests/unit/test_coverage_final_24_lines.py::test_create_space_validation_error_line_53 - TypeError: create_space() takes from 1 to 2 positional arguments but 3 were given
2025-08-30T14:16:12.2859664Z FAILED tests/unit/test_coverage_final_24_lines.py::test_create_space_unknown_client_error_line_63 - TypeError: create_space() takes from 1 to 2 positional arguments but 3 were given
2025-08-30T14:16:12.2860214Z FAILED tests/unit/test_coverage_final_24_lines.py::test_update_user_profile_with_image_url - fastapi.exceptions.HTTPException: 400: 1 validation error for UserProfileResponse
2025-08-30T14:16:12.2860282Z id
2025-08-30T14:16:12.2860556Z   Field required [type=missing, input_value={'user_id': 'user123', 'e... '2024-01-01T00:00:00Z'}, input_type=dict]
2025-08-30T14:16:12.2860761Z     For further information visit https://errors.pydantic.dev/2.10/v/missing
2025-08-30T14:16:12.2861177Z FAILED tests/unit/test_coverage_final_24_lines.py::test_update_user_profile_retry_logic - fastapi.exceptions.HTTPException: 400: No fields to update
2025-08-30T14:16:12.2861532Z FAILED tests/unit/test_coverage_final_24_lines.py::test_update_user_profile_generic_exception - AssertionError: assert 400 == 500
2025-08-30T14:16:12.2861751Z  +  where 400 = HTTPException(status_code=400, detail='No fields to update').status_code
2025-08-30T14:16:12.2862286Z  +    where HTTPException(status_code=400, detail='No fields to update') = <ExceptionInfo HTTPException(status_code=400, detail='No fields to update') tblen=2>.value
2025-08-30T14:16:12.2862695Z FAILED tests/unit/test_coverage_final_24_lines.py::test_settings_validators - AttributeError: 'Settings' object has no attribute 'cognito_domain'
2025-08-30T14:16:12.2863107Z FAILED tests/unit/test_coverage_final_24_lines.py::test_get_current_user_no_auth_header - TypeError: object MagicMock can't be used in 'await' expression
2025-08-30T14:16:12.2863516Z FAILED tests/unit/test_coverage_final_24_lines.py::test_leave_space_not_member - AttributeError: 'SpaceService' object has no attribute 'leave_space'
2025-08-30T14:16:12.2863979Z FAILED tests/unit/test_coverage_final_24_lines.py::test_get_space_invitations_no_items - AttributeError: 'SpaceService' object has no attribute 'get_space_invitations'
2025-08-30T14:16:12.2864488Z FAILED tests/unit/test_coverage_final_24_lines.py::test_join_space_with_invite_invalid_code_format - AssertionError: assert 'Invalid invite code' == 'Invalid or e...d invite code'
2025-08-30T14:16:12.2864580Z   - Invalid or expired invite code
2025-08-30T14:16:12.2864653Z   ?         -----------
2025-08-30T14:16:12.2864734Z   + Invalid invite code
2025-08-30T14:16:12.2865191Z FAILED tests/unit/test_coverage_final_29_lines.py::test_create_space_validation_error - TypeError: create_space() takes from 1 to 2 positional arguments but 3 were given
2025-08-30T14:16:12.2865653Z FAILED tests/unit/test_coverage_final_29_lines.py::test_create_space_generic_client_error - TypeError: create_space() takes from 1 to 2 positional arguments but 3 were given
2025-08-30T14:16:12.2866125Z FAILED tests/unit/test_coverage_final_29_lines.py::test_get_user_profile_cognito_sync_failure - fastapi.exceptions.HTTPException: 500: Failed to retrieve user profile
2025-08-30T14:16:12.2866567Z FAILED tests/unit/test_coverage_final_29_lines.py::test_update_user_profile_dependencies - assert None is not None
2025-08-30T14:16:12.2867060Z FAILED tests/unit/test_coverage_final_29_lines.py::test_update_user_profile_merged_data - fastapi.exceptions.HTTPException: 400: 1 validation error for UserProfileResponse
2025-08-30T14:16:12.2867125Z id
2025-08-30T14:16:12.2867393Z   Field required [type=missing, input_value={'user_id': 'user123', 'e... '2024-01-01T00:00:00Z'}, input_type=dict]
2025-08-30T14:16:12.2867583Z     For further information visit https://errors.pydantic.dev/2.10/v/missing
2025-08-30T14:16:12.2868034Z FAILED tests/unit/test_coverage_final_29_lines.py::test_update_user_profile_generic_failure - RuntimeError: asyncio.run() cannot be called from a running event loop
2025-08-30T14:16:12.2868536Z FAILED tests/unit/test_coverage_final_29_lines.py::test_complete_onboarding_with_metadata - fastapi.exceptions.HTTPException: 400: 2 validation errors for UserProfileResponse
2025-08-30T14:16:12.2868711Z id
2025-08-30T14:16:12.2868972Z   Field required [type=missing, input_value={'user_id': 'user123', 'e... '2024-01-01T00:00:00Z'}, input_type=dict]
2025-08-30T14:16:12.2869155Z     For further information visit https://errors.pydantic.dev/2.10/v/missing
2025-08-30T14:16:12.2869222Z username
2025-08-30T14:16:12.2869484Z   Field required [type=missing, input_value={'user_id': 'user123', 'e... '2024-01-01T00:00:00Z'}, input_type=dict]
2025-08-30T14:16:12.2869669Z     For further information visit https://errors.pydantic.dev/2.10/v/missing
2025-08-30T14:16:12.2870503Z FAILED tests/unit/test_coverage_final_29_lines.py::test_get_current_user_return_value - AttributeError: <module 'app.core.dependencies' from '/home/runner/work/lifestyle-spaces/lifestyle-spaces/backend/app/core/dependencies.py'> does not have the attribute 'verify_token'
2025-08-30T14:16:12.2870921Z FAILED tests/unit/test_coverage_final_29_lines.py::test_space_service_create_space_batch_writer - AttributeError: 'str' object has no attribute 'name'
2025-08-30T14:16:12.2871214Z FAILED tests/unit/test_coverage_final_29_lines.py::test_space_service_get_space_member_query - KeyError: 'id'
2025-08-30T14:16:12.2871708Z FAILED tests/unit/test_coverage_final_29_lines.py::test_space_service_join_space_already_member_error - app.services.exceptions.InvalidInviteCodeError: Invalid invite code
2025-08-30T14:16:12.2872296Z FAILED tests/unit/test_final_100_coverage.py::TestFinal100Coverage::test_create_space_validation_error_from_service - assert 401 == 422
2025-08-30T14:16:12.2872482Z  +  where 401 = <Response [401 Unauthorized]>.status_code
2025-08-30T14:16:12.2872873Z FAILED tests/unit/test_final_100_coverage.py::TestFinal100Coverage::test_create_space_generic_client_error_fallback - assert 401 == 500
2025-08-30T14:16:12.2872993Z  +  where 401 = <Response [401 Unauthorized]>.status_code
2025-08-30T14:16:12.2873375Z FAILED tests/unit/test_final_100_coverage.py::TestFinal100Coverage::test_get_user_spaces_non_throughput_client_error - assert 404 == 500
2025-08-30T14:16:12.2873500Z  +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.2873855Z FAILED tests/unit/test_final_100_coverage.py::TestFinal100Coverage::test_get_profile_cognito_attributes_none - assert 404 == 200
2025-08-30T14:16:12.2873962Z  +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.2874296Z FAILED tests/unit/test_final_100_coverage.py::TestFinal100Coverage::test_get_profile_other_client_error - assert 404 == 500
2025-08-30T14:16:12.2874406Z  +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.2874744Z FAILED tests/unit/test_final_100_coverage.py::TestFinal100Coverage::test_get_profile_non_client_exception - assert 404 == 500
2025-08-30T14:16:12.2874845Z  +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.2875286Z FAILED tests/unit/test_final_100_coverage.py::TestFinal100Coverage::test_user_profile_phone_invalid_format - AssertionError: Regex pattern did not match.
2025-08-30T14:16:12.2875519Z  Regex: 'Invalid phone number format'
2025-08-30T14:16:12.2876249Z  Input: "1 validation error for UserProfileUpdate\nphone_number\n  Value error, Phone number must be at least 10 characters [type=value_error, input_value='abc!@#$', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/value_error"
2025-08-30T14:16:12.2877105Z FAILED tests/unit/test_final_100_coverage.py::TestFinal100Coverage::test_get_authenticated_user_with_none - ImportError: cannot import name 'get_authenticated_user' from 'app.core.dependencies' (/home/runner/work/lifestyle-spaces/lifestyle-spaces/backend/app/core/dependencies.py)
2025-08-30T14:16:12.2877566Z FAILED tests/unit/test_final_100_coverage.py::TestFinal100Coverage::test_parse_cors_json_single_value - assert ['"http://example.com"'] == ['http://example.com']
2025-08-30T14:16:12.2877723Z   At index 0 diff: '"http://example.com"' != 'http://example.com'
2025-08-30T14:16:12.2877903Z   Full diff:
2025-08-30T14:16:12.2877998Z   - ['http://example.com']
2025-08-30T14:16:12.2878084Z   + ['"http://example.com"']
2025-08-30T14:16:12.2878155Z   ?   +                  +
2025-08-30T14:16:12.2878732Z FAILED tests/unit/test_final_100_coverage.py::TestFinal100Coverage::test_settings_cors_origins_non_test_environment - pydantic_core._pydantic_core.ValidationError: 3 validation errors for Settings
2025-08-30T14:16:12.2878800Z app_name
2025-08-30T14:16:12.2879033Z   Extra inputs are not permitted [type=extra_forbidden, input_value='test', input_type=str]
2025-08-30T14:16:12.2879243Z     For further information visit https://errors.pydantic.dev/2.10/v/extra_forbidden
2025-08-30T14:16:12.2879315Z dynamodb_table_name
2025-08-30T14:16:12.2879561Z   Extra inputs are not permitted [type=extra_forbidden, input_value='test-table', input_type=str]
2025-08-30T14:16:12.2879761Z     For further information visit https://errors.pydantic.dev/2.10/v/extra_forbidden
2025-08-30T14:16:12.2879845Z cors_origins_str
2025-08-30T14:16:12.2880078Z   Extra inputs are not permitted [type=extra_forbidden, input_value=None, input_type=NoneType]
2025-08-30T14:16:12.2880278Z     For further information visit https://errors.pydantic.dev/2.10/v/extra_forbidden
2025-08-30T14:16:12.2880970Z FAILED tests/unit/test_final_100_coverage.py::TestFinal100Coverage::test_space_service_get_space_client_error - botocore.exceptions.ClientError: An error occurred (InternalServerError) when calling the GetItem operation: Unknown
2025-08-30T14:16:12.2881496Z FAILED tests/unit/test_final_100_coverage.py::TestFinal100Coverage::test_space_service_get_user_role_client_error - AttributeError: 'SpaceService' object has no attribute 'get_user_role'
2025-08-30T14:16:12.2882146Z FAILED tests/unit/test_final_100_coverage.py::TestFinal100Coverage::test_space_service_join_space_get_space_success - app.services.exceptions.InvalidInviteCodeError: Invalid invite code
2025-08-30T14:16:12.2882538Z FAILED tests/unit/test_final_20_lines_coverage.py::test_config_lines_106_109 - AttributeError: 'Settings' object has no attribute 'cognito_domain'
2025-08-30T14:16:12.2882928Z FAILED tests/unit/test_final_20_lines_coverage.py::test_dependencies_line_25 - TypeError: object MagicMock can't be used in 'await' expression
2025-08-30T14:16:12.2883387Z FAILED tests/unit/test_final_20_lines_coverage.py::test_integration_all_error_paths - TypeError: create_space() takes from 1 to 2 positional arguments but 3 were given
2025-08-30T14:16:12.2883757Z FAILED tests/unit/test_minor_coverage_100.py::TestMinorFiles100Coverage::test_create_space_validation_error - assert 401 in [422, 400]
2025-08-30T14:16:12.2883882Z  +  where 401 = <Response [401 Unauthorized]>.status_code
2025-08-30T14:16:12.2884245Z FAILED tests/unit/test_minor_coverage_100.py::TestMinorFiles100Coverage::test_create_space_generic_client_error - assert 401 == 500
2025-08-30T14:16:12.2884358Z  +  where 401 = <Response [401 Unauthorized]>.status_code
2025-08-30T14:16:12.2884726Z FAILED tests/unit/test_minor_coverage_100.py::TestMinorFiles100Coverage::test_get_user_spaces_generic_client_error - assert 404 == 500
2025-08-30T14:16:12.2884958Z  +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.2885835Z FAILED tests/unit/test_minor_coverage_100.py::TestMinorFiles100Coverage::test_user_profile_validate_phone_invalid_format - ImportError: cannot import name 'UserProfile' from 'app.models.user_profile' (/home/runner/work/lifestyle-spaces/lifestyle-spaces/backend/app/models/user_profile.py)
2025-08-30T14:16:12.2886687Z FAILED tests/unit/test_minor_coverage_100.py::TestMinorFiles100Coverage::test_user_profile_validate_avatar_url_invalid - ImportError: cannot import name 'UserProfile' from 'app.models.user_profile' (/home/runner/work/lifestyle-spaces/lifestyle-spaces/backend/app/models/user_profile.py)
2025-08-30T14:16:12.2887533Z FAILED tests/unit/test_minor_coverage_100.py::TestMinorFiles100Coverage::test_get_authenticated_user_none - ImportError: cannot import name 'get_authenticated_user' from 'app.core.dependencies' (/home/runner/work/lifestyle-spaces/lifestyle-spaces/backend/app/core/dependencies.py)
2025-08-30T14:16:12.2888238Z FAILED tests/unit/test_space_service_100.py::TestSpaceService100Coverage::test_update_space_validation_error_empty_name - pydantic_core._pydantic_core.ValidationError: 1 validation error for SpaceUpdate
2025-08-30T14:16:12.2888310Z name
2025-08-30T14:16:12.2888535Z   Value error, Space name cannot be empty [type=value_error, input_value='   ', input_type=str]
2025-08-30T14:16:12.2888735Z     For further information visit https://errors.pydantic.dev/2.10/v/value_error
2025-08-30T14:16:12.2889116Z FAILED tests/unit/test_space_service_100.py::TestSpaceService100Coverage::test_list_user_spaces_handles_missing_space - KeyError: 'id'
2025-08-30T14:16:12.2889619Z FAILED tests/unit/test_space_service_100.py::TestSpaceService100Coverage::test_list_user_spaces_handles_space_not_found_error - TypeError: argument of type 'Mock' is not iterable
2025-08-30T14:16:12.2890277Z FAILED tests/unit/test_space_service_100.py::TestSpaceService100Coverage::test_get_space_client_error - botocore.exceptions.ClientError: An error occurred (InternalServerError) when calling the GetItem operation: Unknown
2025-08-30T14:16:12.2890796Z FAILED tests/unit/test_space_service_100.py::TestSpaceService100Coverage::test_get_user_role_client_error - AttributeError: 'SpaceService' object has no attribute 'get_user_role'
2025-08-30T14:16:12.2891337Z FAILED tests/unit/test_space_service_100.py::TestSpaceService100Coverage::test_join_space_success_flow_lines_490_508 - app.services.exceptions.InvalidInviteCodeError: Invalid invite code
2025-08-30T14:16:12.2891749Z FAILED tests/unit/test_user_profile_routes_100.py::TestUserProfileRoutes100Coverage::test_get_profile_cognito_sync_exception - assert 404 == 200
2025-08-30T14:16:12.2891854Z  +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.2892372Z FAILED tests/unit/test_user_profile_routes_100.py::TestUserProfileRoutes100Coverage::test_get_profile_resource_not_found_error - assert 404 == 500
2025-08-30T14:16:12.2892488Z  +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.2892886Z FAILED tests/unit/test_user_profile_routes_100.py::TestUserProfileRoutes100Coverage::test_get_profile_generic_client_error - assert 404 == 500
2025-08-30T14:16:12.2892993Z  +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.2893381Z FAILED tests/unit/test_user_profile_routes_100.py::TestUserProfileRoutes100Coverage::test_get_profile_generic_exception - assert 404 == 500
2025-08-30T14:16:12.2893490Z  +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.2893899Z FAILED tests/unit/test_user_profile_routes_100.py::TestUserProfileRoutes100Coverage::test_update_profile_cognito_sync_failure - assert 404 == 500
2025-08-30T14:16:12.2894002Z  +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.2894450Z FAILED tests/unit/test_user_profile_routes_100.py::TestUserProfileRoutes100Coverage::test_update_profile_fallback_after_cognito_failure - assert 404 == 500
2025-08-30T14:16:12.2894735Z  +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.2895143Z FAILED tests/unit/test_user_profile_routes_100.py::TestUserProfileRoutes100Coverage::test_update_profile_generic_exception - assert 404 == 500
2025-08-30T14:16:12.2895245Z  +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.2895678Z FAILED tests/unit/test_user_profile_routes_100.py::TestUserProfileRoutes100Coverage::test_complete_onboarding_cognito_update_failure - assert 404 == 500
2025-08-30T14:16:12.2895785Z  +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.2896813Z FAILED tests/unit/test_user_profile_routes_100.py::TestUserProfileRoutes100Coverage::test_complete_onboarding_generic_exception - AttributeError: <module 'app.api.routes.user_profile' from '/home/runner/work/lifestyle-spaces/lifestyle-spaces/backend/app/api/routes/user_profile.py'> does not have the attribute 'OnboardingData'
2025-08-30T14:16:12.2897354Z FAILED tests/unit/test_user_profile_routes_100.py::TestUserProfileRoutes100Coverage::test_update_profile_successful_cognito_sync - assert 404 == 200
2025-08-30T14:16:12.2897454Z  +  where 404 = <Response [404 Not Found]>.status_code
2025-08-30T14:16:12.2897609Z =========== 80 failed, 380 passed, 14 skipped, 8 warnings in 16.54s ============
2025-08-30T14:16:13.4800635Z ##[error]Process completed with exit code 1.
