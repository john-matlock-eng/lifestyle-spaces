name: Terraform Plan

on:
  pull_request:
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-*.yml'
      - 'backend/**'

permissions:
  id-token: write       # Required for OIDC
  contents: read        # Required for actions/checkout
  pull-requests: write  # Required for PR comments

env:
  AWS_REGION: us-east-1
  TF_VERSION: '1.6.0'

jobs:
  plan-dev:
    runs-on: ubuntu-latest
    name: Plan Development Environment
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Build Lambda Package
        working-directory: backend
        run: |
          pip install -r requirements.txt
          python build_lambda_package.py
      
      - name: Verify Lambda Package
        working-directory: backend
        run: |
          if [ ! -f lambda-deployment.zip ]; then
            echo "ERROR: lambda-deployment.zip not found"
            exit 1
          fi
          echo "Lambda package size: $(ls -lh lambda-deployment.zip | awk '{print $5}')"
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Terraform Init
        id: init
        working-directory: terraform/environments/dev
        run: terraform init
      
      - name: Terraform Format Check
        id: fmt
        working-directory: terraform
        run: terraform fmt -check -recursive
      
      - name: Terraform Validate
        id: validate
        working-directory: terraform/environments/dev
        run: terraform validate
      
      - name: Terraform Plan
        id: plan
        working-directory: terraform/environments/dev
        env:
          TF_VAR_jwt_secret_key: ${{ secrets.JWT_SECRET_KEY }}
        run: |
          terraform plan -no-color -out=tfplan 2>&1 | tee plan_output.txt
        continue-on-error: true
      
      - name: Generate Plan Summary
        id: summary
        if: always()
        working-directory: terraform/environments/dev
        run: |
          if [ -f plan_output.txt ]; then
            echo "plan<<EOF" >> $GITHUB_OUTPUT
            grep -E '(^Plan:|will be|must be|No changes)' plan_output.txt | head -20 >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
      
      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `#### Terraform Plan - Development Environment
            
            #### Terraform Format and Style üñå \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è \`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ \`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ \`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan Summary</summary>
            
            \`\`\`
            ${{ steps.summary.outputs.plan }}
            \`\`\`
            
            </details>
            
            *Triggered by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Plan - Development Environment')
            });
            
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              });
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
            }
      
      - name: Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  plan-prod:
    runs-on: ubuntu-latest
    name: Plan Production Environment
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Build Lambda Package
        working-directory: backend
        run: |
          pip install -r requirements.txt
          python build_lambda_package.py
      
      - name: Verify Lambda Package
        working-directory: backend
        run: |
          if [ ! -f lambda-deployment.zip ]; then
            echo "ERROR: lambda-deployment.zip not found"
            exit 1
          fi
          echo "Lambda package size: $(ls -lh lambda-deployment.zip | awk '{print $5}')"
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Terraform Init
        id: init
        working-directory: terraform/environments/prod
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        working-directory: terraform/environments/prod
        run: terraform validate
      
      - name: Terraform Plan
        id: plan
        working-directory: terraform/environments/prod
        run: |
          terraform plan -no-color -out=tfplan 2>&1 | tee plan_output.txt
        continue-on-error: true
      
      - name: Generate Plan Summary
        id: summary
        if: always()
        working-directory: terraform/environments/prod
        run: |
          if [ -f plan_output.txt ]; then
            echo "plan<<EOF" >> $GITHUB_OUTPUT
            grep -E '(^Plan:|will be|must be|No changes)' plan_output.txt | head -20 >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
      
      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `#### Terraform Plan - Production Environment
            
            #### Terraform Initialization ‚öôÔ∏è \`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ \`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ \`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan Summary</summary>
            
            \`\`\`
            ${{ steps.summary.outputs.plan }}
            \`\`\`
            
            </details>
            
            *Triggered by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Plan - Production Environment')
            });
            
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              });
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
            }
      
      - name: Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1