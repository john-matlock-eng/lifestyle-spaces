name: Test and Coverage

on:
  push:
    branches: ['**']
  pull_request:
    branches: [main]
  workflow_call:

jobs:
  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Check for package-lock.json
        id: check-lockfile
        run: |
          if [ -f package-lock.json ]; then
            echo "lockfile=true" >> $GITHUB_OUTPUT
            echo "✅ package-lock.json found"
          else
            echo "lockfile=false" >> $GITHUB_OUTPUT
            echo "⚠️ package-lock.json not found, will use npm install instead of npm ci"
          fi
      
      - name: Setup Node.js (with cache)
        if: steps.check-lockfile.outputs.lockfile == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
          
      - name: Setup Node.js (no cache)
        if: steps.check-lockfile.outputs.lockfile == 'false'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install dependencies
        run: |
          if [ "${{ steps.check-lockfile.outputs.lockfile }}" == "true" ]; then
            # Use npm install instead of npm ci to properly handle Rollup optional dependencies
            # This fixes the "@rollup/rollup-linux-x64-gnu" module not found error
            npm install
          else
            npm install
          fi
      
      - name: Install Rollup Linux binary
        working-directory: frontend
        run: npm install @rollup/rollup-linux-x64-gnu --no-save
      
      - name: Run linting
        run: npm run lint
      
      - name: Type check
        run: npm run type-check
      
      - name: Run tests with coverage
        run: npm run test:coverage
      
      - name: Check coverage threshold
        run: |
          if [ -f coverage/coverage-summary.json ]; then
            coverage=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
            if (( $(echo "$coverage < 95" | bc -l) )); then
              echo "❌ Coverage is below 95%: $coverage%"
              exit 1
            else
              echo "✅ Coverage is at 95% or above: $coverage%"
            fi
          else
            echo "⚠️ Coverage report not found - tests need to be configured"
          fi

  backend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt
      
      - name: Install dependencies
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "⚠️ requirements.txt not found - backend needs to be configured"
          fi
      
      - name: Run linting
        run: |
          if [ -f requirements.txt ]; then
            pip install ruff
            ruff check app/ || echo "⚠️ Linting needs to be configured"
          fi
      
      - name: Run tests with coverage
        run: |
          if [ -f requirements.txt ] && [ -d tests ]; then
            pytest --cov=app --cov-report=term-missing --cov-fail-under=95
          else
            echo "⚠️ Tests need to be configured"
          fi
      
      - name: Security scan
        run: |
          if [ -f requirements.txt ]; then
            pip install safety
            safety check || echo "⚠️ Security scan needs review"
          fi