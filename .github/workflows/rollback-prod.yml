name: Emergency Production Rollback

on:
  workflow_dispatch:
    inputs:
      component:
        description: 'Component to rollback'
        required: true
        type: choice
        options:
          - 'backend'
          - 'frontend'
          - 'both'
      backup_alias:
        description: 'Lambda backup alias (for backend rollback)'
        required: false
        type: string
      frontend_backup_dir:
        description: 'Frontend backup directory (for frontend rollback)'
        required: false
        type: string
      reason:
        description: 'Reason for rollback'
        required: true
        type: string

permissions:
  id-token: write   # Required for OIDC
  contents: read    # Required for actions/checkout

env:
  AWS_REGION: us-east-1

jobs:
  get-infrastructure-outputs:
    runs-on: ubuntu-latest
    environment: production
    outputs:
      api_gateway_url: ${{ steps.tf-outputs.outputs.api_gateway_url }}
      s3_bucket_name: ${{ steps.tf-outputs.outputs.s3_bucket_name }}
      cloudfront_distribution_id: ${{ steps.tf-outputs.outputs.cloudfront_distribution_id }}
      website_url: ${{ steps.tf-outputs.outputs.website_url }}
      lambda_function_name: ${{ steps.tf-outputs.outputs.lambda_function_name }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.6.0'
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Infrastructure Outputs
        id: tf-outputs
        working-directory: terraform/environments/prod
        run: |
          terraform init
          echo "api_gateway_url=$(terraform output -raw api_gateway_url)" >> $GITHUB_OUTPUT
          echo "s3_bucket_name=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
          echo "cloudfront_distribution_id=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT
          echo "website_url=$(terraform output -raw website_url)" >> $GITHUB_OUTPUT
          echo "lambda_function_name=$(terraform output -raw lambda_function_name)" >> $GITHUB_OUTPUT

  rollback-backend:
    needs: get-infrastructure-outputs
    runs-on: ubuntu-latest
    environment: production
    if: inputs.component == 'backend' || inputs.component == 'both'

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: List available backup aliases
        if: inputs.backup_alias == ''
        run: |
          echo "üîç Available backup aliases for rollback:"
          aws lambda list-aliases \
            --function-name ${{ needs.get-infrastructure-outputs.outputs.lambda_function_name }} \
            --query 'Aliases[?contains(Name, `backup`)].{Name:Name,Version:FunctionVersion,Description:Description}' \
            --output table

          echo ""
          echo "‚ùå Please provide a backup_alias from the list above"
          exit 1

      - name: Validate backup alias exists
        run: |
          echo "üîç Validating backup alias: ${{ inputs.backup_alias }}"

          BACKUP_VERSION=$(aws lambda get-alias \
            --function-name ${{ needs.get-infrastructure-outputs.outputs.lambda_function_name }} \
            --name "${{ inputs.backup_alias }}" \
            --query 'FunctionVersion' \
            --output text) || {
            echo "‚ùå Backup alias '${{ inputs.backup_alias }}' not found"
            exit 1
          }

          echo "‚úÖ Found backup alias pointing to version: $BACKUP_VERSION"
          echo "backup_version=$BACKUP_VERSION" >> $GITHUB_ENV

      - name: Execute backend rollback
        run: |
          echo "üîÑ Rolling back backend Lambda function..."
          echo "Reason: ${{ inputs.reason }}"

          # Get current version before rollback
          CURRENT_VERSION=$(aws lambda get-function \
            --function-name ${{ needs.get-infrastructure-outputs.outputs.lambda_function_name }} \
            --query 'Configuration.Version' --output text)

          echo "Current version: $CURRENT_VERSION"
          echo "Rolling back to version: ${{ env.backup_version }}"

          # Update the LIVE alias (or $LATEST) to point to backup version
          aws lambda update-function-code \
            --function-name ${{ needs.get-infrastructure-outputs.outputs.lambda_function_name }} \
            --zip-file fileb:///dev/null \
            --publish || true

          # Actually rollback by updating function configuration to use backup version
          aws lambda update-alias \
            --function-name ${{ needs.get-infrastructure-outputs.outputs.lambda_function_name }} \
            --name LIVE \
            --function-version ${{ env.backup_version }} \
            --description "Rolled back to ${{ inputs.backup_alias }} - Reason: ${{ inputs.reason }}" || \
          aws lambda create-alias \
            --function-name ${{ needs.get-infrastructure-outputs.outputs.lambda_function_name }} \
            --name LIVE \
            --function-version ${{ env.backup_version }} \
            --description "Rolled back to ${{ inputs.backup_alias }} - Reason: ${{ inputs.reason }}"

          echo "‚úÖ Backend rollback completed"

      - name: Test backend after rollback
        run: |
          echo "üß™ Testing backend after rollback..."

          # Wait for rollback to take effect
          sleep 30

          # Test health endpoint
          API_URL="${{ needs.get-infrastructure-outputs.outputs.api_gateway_url }}"
          health_status=$(curl -s -w "%{http_code}" -o /tmp/health.json "$API_URL/health")

          if [ $health_status -eq 200 ]; then
            echo "‚úÖ Backend health check passed after rollback"
            cat /tmp/health.json
          else
            echo "‚ùå Backend health check failed after rollback (status: $health_status)"
            cat /tmp/health.json 2>/dev/null || echo "No response"
            exit 1
          fi

  rollback-frontend:
    needs: get-infrastructure-outputs
    runs-on: ubuntu-latest
    environment: production
    if: inputs.component == 'frontend' || inputs.component == 'both'

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: List available frontend backups
        if: inputs.frontend_backup_dir == ''
        run: |
          echo "üîç Available frontend backups for rollback:"
          aws s3 ls s3://${{ needs.get-infrastructure-outputs.outputs.s3_bucket_name }}-backup/ \
            --recursive | grep "frontend-backup-" | sort -r | head -10

          echo ""
          echo "‚ùå Please provide a frontend_backup_dir from the list above"
          exit 1

      - name: Validate frontend backup exists
        run: |
          echo "üîç Validating frontend backup: ${{ inputs.frontend_backup_dir }}"

          BACKUP_EXISTS=$(aws s3 ls s3://${{ needs.get-infrastructure-outputs.outputs.s3_bucket_name }}-backup/${{ inputs.frontend_backup_dir }}/ | wc -l)

          if [ $BACKUP_EXISTS -eq 0 ]; then
            echo "‚ùå Frontend backup '${{ inputs.frontend_backup_dir }}' not found"
            exit 1
          fi

          echo "‚úÖ Found frontend backup with $BACKUP_EXISTS files"

      - name: Execute frontend rollback
        run: |
          echo "üîÑ Rolling back frontend from backup..."
          echo "Reason: ${{ inputs.reason }}"

          BUCKET_NAME="${{ needs.get-infrastructure-outputs.outputs.s3_bucket_name }}"
          BACKUP_PATH="s3://$BUCKET_NAME-backup/${{ inputs.frontend_backup_dir }}/"

          # Clear current frontend
          echo "Clearing current frontend..."
          aws s3 rm s3://$BUCKET_NAME/ --recursive

          # Restore from backup
          echo "Restoring from backup: $BACKUP_PATH"
          aws s3 sync $BACKUP_PATH s3://$BUCKET_NAME/ \
            --delete \
            --metadata "rollback-reason=${{ inputs.reason }},rollback-timestamp=$(date -u +%Y-%m-%dT%H:%M:%SZ)"

          echo "‚úÖ Frontend rollback completed"

      - name: Invalidate CloudFront after rollback
        run: |
          echo "üîÑ Invalidating CloudFront after frontend rollback..."

          aws cloudfront create-invalidation \
            --distribution-id ${{ needs.get-infrastructure-outputs.outputs.cloudfront_distribution_id }} \
            --paths "/*"

          echo "‚úÖ CloudFront invalidation initiated"

      - name: Test frontend after rollback
        run: |
          echo "üß™ Testing frontend after rollback..."

          # Wait for CloudFront invalidation
          sleep 60

          WEBSITE_URL="${{ needs.get-infrastructure-outputs.outputs.website_url }}"
          website_status=$(curl -s -w "%{http_code}" -o /tmp/website.html "$WEBSITE_URL")

          if [ $website_status -eq 200 ]; then
            echo "‚úÖ Frontend accessible after rollback"

            # Basic content check
            if grep -q "Lifestyle Spaces" /tmp/website.html; then
              echo "‚úÖ Frontend contains expected content"
            else
              echo "‚ö†Ô∏è Frontend may not contain expected content"
            fi
          else
            echo "‚ùå Frontend not accessible after rollback (status: $website_status)"
            exit 1
          fi

  post-rollback-notification:
    needs: [rollback-backend, rollback-frontend]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Send rollback notification
        run: |
          echo "üìß Rollback operation completed"
          echo ""
          echo "üîÑ Rollback Summary:"
          echo "  Component: ${{ inputs.component }}"
          echo "  Reason: ${{ inputs.reason }}"
          echo "  Triggered by: ${{ github.actor }}"
          echo "  Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo ""

          if [ "${{ inputs.component }}" == "backend" ] || [ "${{ inputs.component }}" == "both" ]; then
            echo "  Backend Status: ${{ needs.rollback-backend.result }}"
            if [ "${{ inputs.backup_alias }}" != "" ]; then
              echo "  Backend Rolled Back To: ${{ inputs.backup_alias }}"
            fi
          fi

          if [ "${{ inputs.component }}" == "frontend" ] || [ "${{ inputs.component }}" == "both" ]; then
            echo "  Frontend Status: ${{ needs.rollback-frontend.result }}"
            if [ "${{ inputs.frontend_backup_dir }}" != "" ]; then
              echo "  Frontend Rolled Back To: ${{ inputs.frontend_backup_dir }}"
            fi
          fi

          echo ""
          echo "üîó Links:"
          echo "  Website: ${{ needs.get-infrastructure-outputs.outputs.website_url }}"
          echo "  API: ${{ needs.get-infrastructure-outputs.outputs.api_gateway_url }}"
          echo ""
          echo "‚ö†Ô∏è Please monitor the application and validate functionality"