name: Deploy PR to Development

on:
  pull_request:
    branches: [main]
    paths-ignore:
      - '**.md'
      - '.claude/**'

permissions:
  id-token: write   # Required for OIDC
  contents: read    # Required for actions/checkout
  pull-requests: write  # Required for PR comments

env:
  AWS_REGION: us-east-1
  TF_VERSION: '1.6.0'

jobs:
  test:
    uses: ./.github/workflows/test.yml
    
  deploy-infrastructure:
    needs: test
    runs-on: ubuntu-latest
    environment: development
    outputs:
      api_gateway_url: ${{ steps.tf-outputs.outputs.api_gateway_url }}
      websocket_url: ${{ steps.tf-outputs.outputs.websocket_url }}
      s3_bucket_name: ${{ steps.tf-outputs.outputs.s3_bucket_name }}
      cloudfront_distribution_id: ${{ steps.tf-outputs.outputs.cloudfront_distribution_id }}
      website_url: ${{ steps.tf-outputs.outputs.website_url }}
      lambda_function_name: ${{ steps.tf-outputs.outputs.lambda_function_name }}
      dynamodb_table_name: ${{ steps.tf-outputs.outputs.dynamodb_table_name }}
      cognito_user_pool_id: ${{ steps.tf-outputs.outputs.cognito_user_pool_id }}
      cognito_user_pool_client_id: ${{ steps.tf-outputs.outputs.cognito_user_pool_client_id }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Build Lambda Package
        working-directory: backend
        run: |
          pip install -r requirements.txt
          python build_lambda_package.py
      
      - name: Verify Lambda Package
        working-directory: backend
        run: |
          if [ ! -f lambda-deployment.zip ]; then
            echo "ERROR: lambda-deployment.zip not found"
            exit 1
          fi
          echo "Lambda package size: $(ls -lh lambda-deployment.zip | awk '{print $5}')"
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Terraform Init
        working-directory: terraform/environments/dev
        run: terraform init
      
      - name: Terraform Plan
        working-directory: terraform/environments/dev
        env:
          TF_VAR_jwt_secret_key: ${{ secrets.JWT_SECRET_KEY }}
        run: terraform plan -out=tfplan
      
      - name: Terraform Apply
        working-directory: terraform/environments/dev
        env:
          TF_VAR_jwt_secret_key: ${{ secrets.JWT_SECRET_KEY }}
        run: terraform apply tfplan
      
      - name: Get Terraform Outputs
        id: tf-outputs
        working-directory: terraform/environments/dev
        run: |
          echo "api_gateway_url=$(terraform output -raw api_gateway_url)" >> $GITHUB_OUTPUT
          echo "websocket_url=$(terraform output -raw websocket_url)" >> $GITHUB_OUTPUT
          echo "s3_bucket_name=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
          echo "cloudfront_distribution_id=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT
          echo "website_url=$(terraform output -raw website_url)" >> $GITHUB_OUTPUT
          echo "lambda_function_name=$(terraform output -raw lambda_function_name)" >> $GITHUB_OUTPUT
          echo "dynamodb_table_name=$(terraform output -raw dynamodb_table_name)" >> $GITHUB_OUTPUT
          echo "cognito_user_pool_id=$(terraform output -raw cognito_user_pool_id)" >> $GITHUB_OUTPUT
          echo "cognito_user_pool_client_id=$(terraform output -raw cognito_user_pool_client_id)" >> $GITHUB_OUTPUT
    
  deploy-frontend:
    needs: [test, deploy-infrastructure]
    runs-on: ubuntu-latest
    environment: development
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Install Rollup Linux binary
        working-directory: frontend
        run: npm install @rollup/rollup-linux-x64-gnu --no-save
      
      - name: Build frontend
        working-directory: frontend
        run: npm run build
        env:
          VITE_API_URL: ${{ needs.deploy-infrastructure.outputs.api_gateway_url }}
          VITE_WS_URL: ${{ needs.deploy-infrastructure.outputs.websocket_url }}
          VITE_ENVIRONMENT: development
          VITE_COGNITO_USER_POOL_ID: ${{ needs.deploy-infrastructure.outputs.cognito_user_pool_id }}
          VITE_COGNITO_USER_POOL_CLIENT_ID: ${{ needs.deploy-infrastructure.outputs.cognito_user_pool_client_id }}
          VITE_AWS_REGION: ${{ env.AWS_REGION }}
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy to S3
        run: |
          aws s3 sync frontend/dist/ s3://${{ needs.deploy-infrastructure.outputs.s3_bucket_name }}/ \
            --delete \
            --cache-control "public, max-age=31536000" \
            --exclude "index.html" \
            --exclude "*.json"
          
          aws s3 cp frontend/dist/index.html s3://${{ needs.deploy-infrastructure.outputs.s3_bucket_name }}/ \
            --cache-control "no-cache, no-store, must-revalidate"
          
          aws s3 cp frontend/dist/ s3://${{ needs.deploy-infrastructure.outputs.s3_bucket_name }}/ \
            --recursive \
            --exclude "*" \
            --include "*.json" \
            --cache-control "no-cache"
      
      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ needs.deploy-infrastructure.outputs.cloudfront_distribution_id }} \
            --paths "/*"

  deploy-backend:
    needs: [test, deploy-infrastructure]
    runs-on: ubuntu-latest
    environment: development
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Check backend exists
        id: check-backend
        run: |
          if [ -f backend/requirements.txt ] && [ -f backend/lambda_handler.py ]; then
            echo "backend_exists=true" >> $GITHUB_OUTPUT
          else
            echo "backend_exists=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Backend not yet configured - skipping deployment"
          fi
      
      - name: Build Lambda Package
        if: steps.check-backend.outputs.backend_exists == 'true'
        working-directory: backend
        run: |
          pip install -r requirements.txt
          python build_lambda_package.py
      
      - name: Configure AWS credentials
        if: steps.check-backend.outputs.backend_exists == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy Lambda
        if: steps.check-backend.outputs.backend_exists == 'true'
        run: |
          aws lambda update-function-code \
            --function-name ${{ needs.deploy-infrastructure.outputs.lambda_function_name }} \
            --zip-file fileb://backend/lambda-deployment.zip \
            --publish

          # Wait for function update to complete before proceeding
          echo "Waiting for Lambda function update to complete..."
          aws lambda wait function-updated \
            --function-name ${{ needs.deploy-infrastructure.outputs.lambda_function_name }}

          echo "‚úÖ Lambda function code updated successfully"
          echo "‚ÑπÔ∏è  Environment variables are managed by Terraform and remain unchanged"
      
      - name: Run smoke tests
        if: steps.check-backend.outputs.backend_exists == 'true'
        run: |
          echo "Running API health check..."
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ needs.deploy-infrastructure.outputs.api_gateway_url }}/health)
          if [ $response -eq 200 ]; then
            echo "‚úÖ API health check passed"
          else
            echo "‚ùå API health check failed with status: $response"
            exit 1
          fi

  comment-pr:
    needs: [deploy-infrastructure, deploy-frontend, deploy-backend]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Comment PR with deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const output = `## üöÄ Development Deployment Status
            
            **Status**: ${{ job.status }}
            
            ### Deployment URLs
            - üåê **Website**: ${{ needs.deploy-infrastructure.outputs.website_url }}
            - üîó **API**: ${{ needs.deploy-infrastructure.outputs.api_gateway_url }}
            
            ### Infrastructure Details
            - **S3 Bucket**: \`${{ needs.deploy-infrastructure.outputs.s3_bucket_name }}\`
            - **CloudFront Distribution**: \`${{ needs.deploy-infrastructure.outputs.cloudfront_distribution_id }}\`
            - **Lambda Function**: \`${{ needs.deploy-infrastructure.outputs.lambda_function_name }}\`
            - **DynamoDB Table**: \`${{ needs.deploy-infrastructure.outputs.dynamodb_table_name }}\`
            - **Cognito User Pool**: \`${{ needs.deploy-infrastructure.outputs.cognito_user_pool_id }}\`
            
            *This development environment is automatically deployed for PR #${{ github.event.number }}*`;
            
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Development Deployment Status')
            });
            
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              });
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
            }