name: Deploy to Production

on:
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - '.claude/**'

permissions:
  id-token: write   # Required for OIDC
  contents: read    # Required for actions/checkout

env:
  AWS_REGION: us-east-1
  TF_VERSION: '1.6.0'

jobs:
  test:
    uses: ./.github/workflows/test.yml
    
  deploy-infrastructure:
    needs: test
    runs-on: ubuntu-latest
    environment: production
    outputs:
      api_gateway_url: ${{ steps.tf-outputs.outputs.api_gateway_url }}
      s3_bucket_name: ${{ steps.tf-outputs.outputs.s3_bucket_name }}
      cloudfront_distribution_id: ${{ steps.tf-outputs.outputs.cloudfront_distribution_id }}
      website_url: ${{ steps.tf-outputs.outputs.website_url }}
      lambda_function_name: ${{ steps.tf-outputs.outputs.lambda_function_name }}
      dynamodb_table_name: ${{ steps.tf-outputs.outputs.dynamodb_table_name }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false
      
      - name: Create Lambda placeholder
        run: |
          mkdir -p backend
          cat > backend/lambda_handler.py << 'EOF'
          """
          Placeholder Lambda handler for initial Terraform deployment.
          This file will be replaced during the actual backend deployment.
          """
          def lambda_handler(event, context):
              return {
                  'statusCode': 200,
                  'headers': {
                      'Content-Type': 'application/json',
                      'Access-Control-Allow-Origin': '*',
                      'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
                      'Access-Control-Allow-Methods': 'GET,POST,PUT,DELETE,OPTIONS'
                  },
                  'body': '{"message": "Placeholder API - Backend not yet deployed", "status": "placeholder"}'
              }
          EOF
          cd backend && zip lambda-placeholder.zip lambda_handler.py
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Terraform Init
        working-directory: terraform/environments/prod
        run: terraform init
      
      - name: Terraform Plan
        working-directory: terraform/environments/prod
        run: terraform plan -out=tfplan
      
      - name: Terraform Apply
        working-directory: terraform/environments/prod
        run: terraform apply tfplan
      
      - name: Get Terraform Outputs
        id: tf-outputs
        working-directory: terraform/environments/prod
        run: |
          echo "api_gateway_url=$(terraform output -raw api_gateway_url)" >> $GITHUB_OUTPUT
          echo "s3_bucket_name=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
          echo "cloudfront_distribution_id=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT
          echo "website_url=$(terraform output -raw website_url)" >> $GITHUB_OUTPUT
          echo "lambda_function_name=$(terraform output -raw lambda_function_name)" >> $GITHUB_OUTPUT
          echo "dynamodb_table_name=$(terraform output -raw dynamodb_table_name)" >> $GITHUB_OUTPUT
    
  deploy-frontend:
    needs: [test, deploy-infrastructure]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Install Rollup Linux binary
        working-directory: frontend
        run: npm install @rollup/rollup-linux-x64-gnu --no-save
      
      - name: Build frontend
        working-directory: frontend
        run: npm run build
        env:
          VITE_API_URL: ${{ needs.deploy-infrastructure.outputs.api_gateway_url }}
          VITE_ENVIRONMENT: production
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy to S3
        run: |
          aws s3 sync frontend/dist/ s3://${{ needs.deploy-infrastructure.outputs.s3_bucket_name }}/ \
            --delete \
            --cache-control "public, max-age=31536000" \
            --exclude "index.html" \
            --exclude "*.json"
          
          aws s3 cp frontend/dist/index.html s3://${{ needs.deploy-infrastructure.outputs.s3_bucket_name }}/ \
            --cache-control "no-cache, no-store, must-revalidate"
          
          aws s3 cp frontend/dist/ s3://${{ needs.deploy-infrastructure.outputs.s3_bucket_name }}/ \
            --recursive \
            --exclude "*" \
            --include "*.json" \
            --cache-control "no-cache"
      
      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ needs.deploy-infrastructure.outputs.cloudfront_distribution_id }} \
            --paths "/*"

  deploy-backend:
    needs: [test, deploy-infrastructure]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Check backend exists
        id: check-backend
        run: |
          if [ -f backend/requirements.txt ] && [ -f backend/lambda_handler.py ]; then
            echo "backend_exists=true" >> $GITHUB_OUTPUT
          else
            echo "backend_exists=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Backend not yet configured - skipping deployment"
          fi
      
      - name: Package Lambda
        if: steps.check-backend.outputs.backend_exists == 'true'
        run: |
          cd backend
          pip install -r requirements.txt -t package/
          cp -r app package/
          cp lambda_handler.py package/
          cd package && zip -r ../lambda.zip . \
            -x "*.pyc" "__pycache__/*" "*/__pycache__/*" \
            -x "tests/*" "*test*" "*.dist-info/*" \
            -x "pip/*" "setuptools/*" "wheel/*" \
            -x "*.so" "*.a" "*.la" "*.exe" \
            -x "*/.git/*" "*/node_modules/*"
      
      - name: Configure AWS credentials
        if: steps.check-backend.outputs.backend_exists == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy Lambda
        if: steps.check-backend.outputs.backend_exists == 'true'
        run: |
          aws lambda update-function-code \
            --function-name ${{ needs.deploy-infrastructure.outputs.lambda_function_name }} \
            --zip-file fileb://backend/lambda.zip \
            --publish
      
      - name: Update Lambda environment
        if: steps.check-backend.outputs.backend_exists == 'true'
        run: |
          aws lambda update-function-configuration \
            --function-name ${{ needs.deploy-infrastructure.outputs.lambda_function_name }} \
            --environment Variables="{
              ENVIRONMENT=production,
              CORS_ORIGINS=${{ needs.deploy-infrastructure.outputs.website_url }},
              DYNAMODB_TABLE=${{ needs.deploy-infrastructure.outputs.dynamodb_table_name }}
            }"
      
      - name: Run smoke tests
        if: steps.check-backend.outputs.backend_exists == 'true'
        run: |
          echo "Running API health check..."
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ needs.deploy-infrastructure.outputs.api_gateway_url }}/health)
          if [ $response -eq 200 ]; then
            echo "‚úÖ API health check passed"
          else
            echo "‚ùå API health check failed with status: $response"
            exit 1
          fi
      
      - name: Display deployment URLs
        if: always()
        run: |
          echo "üöÄ Production Deployment Complete!"
          echo "Website URL: ${{ needs.deploy-infrastructure.outputs.website_url }}"
          echo "API URL: ${{ needs.deploy-infrastructure.outputs.api_gateway_url }}"