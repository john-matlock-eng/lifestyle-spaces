name: Terraform Apply

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      auto_approve:
        description: 'Auto approve the apply'
        required: false
        default: false
        type: boolean

permissions:
  id-token: write   # Required for OIDC
  contents: read    # Required for actions/checkout

env:
  AWS_REGION: us-east-1
  TF_VERSION: '1.6.0'

jobs:
  terraform-apply:
    runs-on: ubuntu-latest
    name: Apply ${{ github.event.inputs.environment }} Environment
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Build Lambda Package
        working-directory: backend
        run: |
          pip install -r requirements.txt
          python build_lambda_package.py
      
      - name: Verify Lambda Package
        working-directory: backend
        run: |
          if [ ! -f lambda-deployment.zip ]; then
            echo "ERROR: lambda-deployment.zip not found"
            exit 1
          fi
          echo "Lambda package size: $(ls -lh lambda-deployment.zip | awk '{print $5}')"
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Terraform Init
        working-directory: terraform/environments/${{ github.event.inputs.environment }}
        run: terraform init
      
      - name: Terraform Plan
        working-directory: terraform/environments/${{ github.event.inputs.environment }}
        run: |
          terraform plan -out=tfplan
          terraform show -no-color tfplan > plan.txt
      
      - name: Display Plan Summary
        working-directory: terraform/environments/${{ github.event.inputs.environment }}
        run: |
          echo "=== Terraform Plan Summary ==="
          grep -E '(^Plan:|will be|must be|No changes)' plan.txt || echo "No changes detected"
      
      - name: Terraform Apply
        if: github.event.inputs.auto_approve == 'true' || github.event.inputs.environment == 'dev'
        working-directory: terraform/environments/${{ github.event.inputs.environment }}
        run: terraform apply tfplan
      
      - name: Capture Outputs
        if: always()
        working-directory: terraform/environments/${{ github.event.inputs.environment }}
        run: |
          echo "=== Terraform Outputs ==="
          terraform output -json > outputs.json
          cat outputs.json | jq '.'
      
      - name: Upload Outputs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: terraform-outputs-${{ github.event.inputs.environment }}
          path: terraform/environments/${{ github.event.inputs.environment }}/outputs.json
      
      - name: Display Infrastructure Info
        if: success()
        run: |
          echo "âœ… Infrastructure deployment completed for ${{ github.event.inputs.environment }} environment"
          echo "ðŸ“Š All configuration is managed dynamically via Terraform outputs"
          echo "ðŸ”— No manual secret updates required - workflows read outputs directly"